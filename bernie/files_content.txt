===== tailwind.config.ts =====
Chemin : ./tailwind.config.ts
import type { Config } from "tailwindcss";

const config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)"
      }
    }
  },
  plugins: []
} satisfies Config;

export default config;


===== postcss.config.js =====
Chemin : ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};


===== tsconfig.json =====
Chemin : ./tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "next-env.d.ts",
    "types/**/*.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "files_content.txt"
  ]
}


===== next.config.mjs =====
Chemin : ./next.config.mjs
const nextConfig = {
  reactStrictMode: true,
};

export default nextConfig;


===== listfiles.py =====
Chemin : ./listfiles.py
import os

def get_files_content(directory, excluded_files):
    files_data = []
    
    for root, dirs, files in os.walk(directory):
        # Exclure certains dossiers pour éviter de parcourir des répertoires non désirés
        dirs[:] = [d for d in dirs if os.path.join(root, d) not in excluded_files]
        
        for file in files:
            file_path = os.path.join(root, file)
            # Si le chemin complet du fichier est dans la liste d'exclusion, on passe au suivant
            if file_path in excluded_files:
                continue
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                files_data.append({"name": file, "path": file_path, "content": content})
            except Exception as e:
                print(f"Erreur lors de la lecture du fichier {file_path}: {e}")
    
    return files_data

def save_to_text(data, output_file):
    with open(output_file, 'w', encoding='utf-8') as f:
        for file in data:
            f.write(f"===== {file['name']} =====\n")
            f.write(f"Chemin : {file['path']}\n")
            f.write(file['content'] + "\n\n")

if __name__ == "__main__":
    directory = "./"
    output_file = "files_content.txt"
    
    excluded_files = {
        os.path.join(directory, ".env.local"),
        os.path.join(directory, ".gitignore"),
        os.path.join(directory, "eslint.config.mjs"),
        os.path.join(directory, "next-env.d.ts"),
        os.path.join(directory, "next.config.ts"),
        os.path.join(directory, "package-lock.json"),
        os.path.join(directory, "package.json"),
        os.path.join(directory, "postcss.config.mjs"),
        os.path.join(directory, "README.md"),
        os.path.join(directory, ".next"),
        os.path.join(directory, "node_modules"),
        os.path.join(directory, "files_content.txt")  # Ajout pour éviter de relire le fichier de sortie
    }
    
    if os.path.exists(directory):
        files_content = get_files_content(directory, excluded_files)
        save_to_text(files_content, output_file)
        print(f"Les données ont été enregistrées dans {output_file}")
    else:
        print(f"Le dossier {directory} n'existe pas.")


===== middleware.ts =====
Chemin : ./src/middleware.ts
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Si l'utilisateur n'est pas connecté et essaie d'accéder à une route protégée
  if (!session && (req.nextUrl.pathname.startsWith('/dashboard') || req.nextUrl.pathname.startsWith('/api'))) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  return res;
}

export const config = {
  matcher: ['/dashboard/:path*', '/api/:path*'],
}; 

===== supabaseClient.ts =====
Chemin : ./src/utils/supabaseClient.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey) 

===== videoService.ts =====
Chemin : ./src/services/videoService.ts
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Video } from "../types/video";

const supabase = createClientComponentClient();

export const fetchVideoDetails = async (id: string): Promise<Video> => {
  const { data, error } = await supabase
    .from("category_videos")
    .select(`
      *,
      video_details (
        title,
        instructions_miniature,
        rush_link,
        video_link,
        miniature_link,
        production_status,
        description
      )
    `)
    .eq("id", id)
    .single();

  if (error) {
    console.error("Erreur Supabase dans fetchVideoDetails :", error);
    throw error;
  }

  if (!data?.video_details || !data.video_details[0]) {
    throw new Error("Détails de la vidéo introuvables");
  }

  return { ...data, ...data.video_details[0] } as Video;
};

export const updateTitle = async (id: string, newTitle: string): Promise<void> => {
  const updates = await Promise.all([
    supabase.from("category_videos").update({ title: newTitle }).eq("id", id),
    supabase.from("video_details").update({ title: newTitle }).eq("category_video_id", id)
  ]);
  if (updates.some(({ error }) => error)) {
    throw new Error("Erreur lors de la mise à jour du titre");
  }
};

export const updateDescription = async (id: string, newDescription: string): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ description: newDescription })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour de la description");
  }
};

export const updateInstructions = async (id: string, newInstructions: string): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ instructions_miniature: newInstructions })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour des instructions");
  }
};

export const updateLink = async (id: string, field: string, value: string): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ [field]: value })
    .eq("category_video_id", id);
  if (error) {
    throw new Error(`Erreur lors de la mise à jour du lien ${field}`);
  }
};

export const updateStatus = async (id: string, newStatus: string): Promise<void> => {
  const updates = await Promise.all([
    supabase.from("category_videos").update({ production_status: newStatus }).eq("id", id),
    supabase.from("video_details").update({ production_status: newStatus }).eq("category_video_id", id)
  ]);
  if (updates.some(({ error }) => error)) {
    throw new Error("Erreur lors de la mise à jour du statut");
  }
};


===== Sidebar.tsx =====
Chemin : ./src/components/Sidebar.tsx
"use client";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

export default function Sidebar() {
  const router = useRouter();
  const supabase = createClientComponentClient();

  const handleSignOut = async () => {
    try {
      await supabase.auth.signOut();
      router.push("/login");
    } catch (error) {
      console.error("Erreur lors de la déconnexion:", error);
    }
  };

  return (
    <aside className="w-64 bg-[#171717] min-h-screen flex flex-col border-r border-[#424242]">
      <div className="p-6">
        <h1 className="text-xl font-semibold text-[#ECECEC]">Dashboard</h1>
      </div>

      <nav className="flex-1 p-4">
        <ul className="space-y-2">
          <li>
            <a
              href="/dashboard"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
            >
              Catégories
            </a>
          </li>
          {/* Ajoutez ici d'autres liens de navigation si nécessaire */}
        </ul>
      </nav>

      <div className="p-4 border-t border-[#424242]">
        <button
          onClick={handleSignOut}
          className="w-full px-4 py-2 text-sm bg-[#424242] hover:bg-[#171717] rounded-lg transition-colors duration-200 border border-[#424242] text-[#ECECEC]"
        >
          Déconnexion
        </button>
      </div>
    </aside>
  );
}


===== EditableField.tsx =====
Chemin : ./src/components/EditableField.tsx
import { useState, useEffect } from "react";

interface EditableFieldProps {
  value: string;
  onSave: (newValue: string) => Promise<void>;
  inputType?: "text" | "textarea";
  placeholder?: string;
  className?: string;
}

export function EditableField({
  value,
  onSave,
  inputType = "text",
  placeholder = "",
  className = ""
}: EditableFieldProps) {
  const [editing, setEditing] = useState(false);
  const [newValue, setNewValue] = useState(value);

  // Mettre à jour newValue quand value change (utile pour les mises à jour externes)
  useEffect(() => {
    if (!editing) {
      setNewValue(value);
    }
  }, [value, editing]);

  const handleSave = async () => {
    if (!newValue.trim()) return;
    await onSave(newValue);
    setEditing(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey && inputType !== "textarea") {
      e.preventDefault();
      handleSave();
    }
  };

  const inputStyles =
    "bg-transparent border border-[#424242] focus:border-[#ECECEC] outline-none rounded w-full";

  return (
    <div className={className}>
      {editing ? (
        <>
          {inputType === "textarea" ? (
            <textarea
              value={newValue}
              onChange={(e) => setNewValue(e.target.value)}
              placeholder={placeholder}
              className={`${inputStyles} p-2`}
              rows={4}
              autoFocus
              onBlur={handleSave}
              onKeyDown={handleKeyDown}
            />
          ) : (
            <input
              type="text"
              value={newValue}
              onChange={(e) => setNewValue(e.target.value)}
              placeholder={placeholder}
              className={`${inputStyles} px-2 py-1`}
              autoFocus
              onBlur={handleSave}
              onKeyDown={handleKeyDown}
            />
          )}
        </>
      ) : (
        <div
          onClick={() => setEditing(true)}
          className="cursor-pointer hover:text-gray-300 p-1 rounded hover:bg-[#2a2a2a] transition-colors"
        >
          {value || <span className="text-gray-500 italic">{placeholder}</span>}
        </div>
      )}
    </div>
  );
}


===== CreateVideoModal.tsx =====
Chemin : ./src/components/CreateVideoModal.tsx
import { useState } from 'react';
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateVideoModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  categoryId: string;
  categoryTitle: string;
}

export default function CreateVideoModal({ 
  isOpen, 
  onClose, 
  onSuccess, 
  categoryId, 
  categoryTitle 
}: CreateVideoModalProps) {
  const [title, setTitle] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const supabase = createClientComponentClient();
  
  // Valeur par défaut pour le statut de production (à adapter si besoin)
  const defaultProductionStatus = "À monter";

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // 1. Insertion dans la table category_videos
      const { data: categoryVideoData, error: categoryVideoError } = await supabase
        .from('category_videos')
        .insert([{ 
          category_id: Number(categoryId),  // conversion en nombre si nécessaire
          title, 
          production_status: defaultProductionStatus 
        }])
        .select()
        .single();

      if (categoryVideoError) throw categoryVideoError;

      // 2. Insertion dans la table video_details avec l'ID généré
      const { data: videoDetailsData, error: videoDetailsError } = await supabase
        .from('video_details')
        .insert([{ 
          category_video_id: categoryVideoData.id, 
          title, 
          production_status: defaultProductionStatus 
        }])
        .select()
        .single();

      if (videoDetailsError) throw videoDetailsError;

      setTitle('');
      onSuccess();
      onClose();
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#171717] p-8 rounded-lg w-full max-w-md border border-[#424242]">
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">Nouvelle vidéo</h2>
        
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="category" className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Catégorie
            </label>
            <input
              id="category"
              type="text"
              value={categoryTitle}
              className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC] cursor-not-allowed opacity-50"
              disabled={true}
              readOnly
            />
          </div>

          <div className="mb-6">
            <label htmlFor="title" className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Titre de la vidéo
            </label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC]"
              required
              disabled={isLoading}
              placeholder="Entrez le titre de la vidéo"
            />
          </div>

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-[#ECECEC] rounded-lg hover:bg-[#212121] transition-colors duration-200"
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 border border-[#424242] disabled:opacity-50"
              disabled={isLoading}
            >
              {isLoading ? 'Ajout en cours...' : `Ajouter dans ${categoryTitle}`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


===== StatusProgress.tsx =====
Chemin : ./src/components/StatusProgress.tsx
import { VIDEO_STATUS, Status } from "../types/video";
import { STATUS_STEPS } from "../constants/videoConstants";

interface StatusProgressProps {
  currentStatus: Status;
  onStatusChange: (newStatus: Status) => void;
  isDisabled?: boolean;
}

export function StatusProgress({
  currentStatus,
  onStatusChange,
  isDisabled = false,
}: StatusProgressProps) {
  const getStepStatus = (stepValue: Status): "completed" | "current" | "upcoming" => {
    const stepIndex = STATUS_STEPS.findIndex((step) => step.value === stepValue);
    const currentIndex = STATUS_STEPS.findIndex((step) => step.value === currentStatus);
    if (stepIndex < currentIndex) return "completed";
    if (stepIndex === currentIndex) return "current";
    return "upcoming";
  };

  const getStatusColor = (status: Status) => {
    switch (status) {
      case VIDEO_STATUS.TO_DO:
        return "bg-yellow-600";
      case VIDEO_STATUS.IN_PROGRESS:
        return "bg-blue-600";
      case VIDEO_STATUS.READY_TO_PUBLISH:
        return "bg-green-600";
      case VIDEO_STATUS.FINISHED:
        return "bg-purple-600";
      default:
        return "bg-gray-600";
    }
  };

  const getStatusText = (status: Status) => {
    switch (status) {
      case VIDEO_STATUS.TO_DO:
        return "À faire";
      case VIDEO_STATUS.IN_PROGRESS:
        return "En cours";
      case VIDEO_STATUS.READY_TO_PUBLISH:
        return "Prêt à publier";
      case VIDEO_STATUS.FINISHED:
        return "Terminé";
      default:
        return status;
    }
  };

  return (
    <div className="grid grid-cols-4 gap-4">
      {STATUS_STEPS.map((step, index) => (
        <div key={step.value} className="relative">
          <button
            onClick={() => onStatusChange(step.value)}
            disabled={isDisabled}
            className={`w-full p-3 rounded-lg transition-all duration-200 min-h-[100px] flex flex-col justify-between
              ${
                getStepStatus(step.value) === "completed"
                  ? "bg-green-600/20 border-green-600 text-green-500"
                  : getStepStatus(step.value) === "current"
                  ? "bg-blue-600/20 border-blue-600 text-blue-500"
                  : "bg-[#424242]/20 border-[#424242] text-gray-400"
              } border hover:border-white/50`}
          >
            <div className="flex items-center justify-between w-full mb-1">
              <span className="text-sm font-medium">{step.label}</span>
              <span
                className={`w-5 h-5 rounded-full flex items-center justify-center text-xs shrink-0
                  ${
                    getStepStatus(step.value) === "completed"
                      ? "bg-green-600 text-white"
                      : getStepStatus(step.value) === "current"
                      ? "bg-blue-600 text-white"
                      : "bg-[#424242] text-gray-300"
                  }`}
              >
                {getStepStatus(step.value) === "completed" ? "✓" : index + 1}
              </span>
            </div>
            <p className="text-xs opacity-75 line-clamp-2">{step.description}</p>
          </button>
        </div>
      ))}
    </div>
  );
}


===== CreateCategoryModal.tsx =====
Chemin : ./src/components/CreateCategoryModal.tsx
import { useState, useEffect } from 'react';
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateCategoryModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

const getNextLetter = (existingIdentifiers: string[]): string => {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const usedLetters = new Set(existingIdentifiers.map(id => id.toUpperCase()));
  
  for (const letter of alphabet) {
    if (!usedLetters.has(letter)) {
      return letter;
    }
  }
  return 'Z'; // Fallback if all letters are used
};

export default function CreateCategoryModal({ isOpen, onClose, onSuccess }: CreateCategoryModalProps) {
  const [identifier, setIdentifier] = useState('');
  const [title, setTitle] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const supabase = createClientComponentClient();

  useEffect(() => {
    const fetchNextIdentifier = async () => {
      if (isOpen) {
        try {
          const { data: categories, error } = await supabase
            .from('video_categories')
            .select('identifier');

          if (error) throw error;

          const existingIdentifiers = categories?.map(cat => cat.identifier) || [];
          const nextLetter = getNextLetter(existingIdentifiers);
          setIdentifier(nextLetter);
        } catch (err: any) {
          setError(err.message);
        }
      }
    };

    fetchNextIdentifier();
  }, [isOpen]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      const { error } = await supabase
        .from('video_categories')
        .insert([{ identifier, title }]);

      if (error) throw error;

      setIdentifier('');
      setTitle('');
      onSuccess();
      onClose();
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#171717] p-8 rounded-lg w-full max-w-md border border-[#424242]">
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">Nouvelle catégorie</h2>
        
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="identifier" className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Identifiant
            </label>
            <input
              id="identifier"
              type="text"
              value={identifier}
              className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC] cursor-not-allowed opacity-50"
              required
              disabled={true}
              readOnly
            />
          </div>

          <div className="mb-6">
            <label htmlFor="title" className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Titre
            </label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC]"
              required
              disabled={isLoading}
            />
          </div>

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-[#ECECEC] rounded-lg hover:bg-[#212121] transition-colors duration-200"
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 border border-[#424242] disabled:opacity-50"
              disabled={isLoading}
            >
              {isLoading ? 'Création...' : 'Créer'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

===== videoConstants.ts =====
Chemin : ./src/constants/videoConstants.ts
import { VIDEO_STATUS, StatusStep } from "../types/video";

export const STATUS_STEPS: StatusStep[] = [
  {
    value: VIDEO_STATUS.TO_DO,
    label: 'À faire',
    description: 'La vidéo est en attente de montage'
  },
  {
    value: VIDEO_STATUS.IN_PROGRESS,
    label: 'En cours',
    description: 'Le montage est en cours'
  },
  {
    value: VIDEO_STATUS.READY_TO_PUBLISH,
    label: 'Prêt à publier',
    description: 'La vidéo est prête pour publication'
  },
  {
    value: VIDEO_STATUS.FINISHED,
    label: 'Terminé',
    description: 'La vidéo a été publiée'
  }
];


===== layout.tsx =====
Chemin : ./src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import React from "react";
import "./globals.css";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${inter.variable} antialiased`}>
        {children}
      </body>
    </html>
  );
}


===== globals.css =====
Chemin : ./src/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica, sans-serif;
}


===== page.tsx =====
Chemin : ./src/app/page.tsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    router.push("/login");
  }, [router]);

  return null;
}


===== page.tsx =====
Chemin : ./src/app/signup/page.tsx
'use client';

import { useState } from "react";
import { useRouter } from "next/navigation";
import { supabase } from "@/utils/supabaseClient";

export default function SignupPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMsg("");
    
    try {
      // Inscription avec Supabase
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
      });

      if (authError) throw authError;

      if (authData.user) {
        // Création du profil utilisateur
        const { error: profileError } = await supabase
          .from('profiles')
          .insert([
            {
              id: authData.user.id,
              email: authData.user.email,
              role: 'user', // rôle par défaut
              created_at: new Date().toISOString(),
            }
          ]);

        if (profileError) throw profileError;
        
        // Redirection vers la page de connexion
        router.push('/login');
      }
    } catch (error: any) {
      setErrorMsg(error.message);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900 text-white">
      <form onSubmit={handleSubmit} className="p-6 bg-gray-800 rounded-md shadow-md">
        <h2 className="text-2xl mb-4">Inscription</h2>
        {errorMsg && <p className="text-red-500 mb-2">{errorMsg}</p>}
        <div className="mb-4">
          <label htmlFor="email" className="block mb-1">Email</label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="p-2 rounded w-full text-black"
            required
          />
        </div>
        <div className="mb-4">
          <label htmlFor="password" className="block mb-1">Mot de passe</label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="p-2 rounded w-full text-black"
            required
          />
        </div>
        <button type="submit" className="w-full bg-blue-600 py-2 rounded hover:bg-blue-700">
          S'inscrire
        </button>
      </form>
    </div>
  );
}


===== route.ts =====
Chemin : ./src/app/api/videos/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from "next/server";
import { z } from "zod";

// Schéma de validation pour la création d'une vidéo
const videoSchema = z.object({
  category_id: z.number(),
  title: z.string().min(1, "Le titre est requis"),
  production_status: z.enum(["À monter", "Miniature à faire", "En validation", "Prête à exporter"]),
  instructions_miniature: z.string().optional(),
  rush_link: z.string().url().optional(),
  video_link: z.string().url().optional(),
  miniature_link: z.string().url().optional(),
});

// Pour la mise à jour, toutes les propriétés sont optionnelles sauf category_id
const videoUpdateSchema = videoSchema.partial().extend({
  category_id: z.number()
});

export async function GET(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const categoryId = searchParams.get("categoryId");
    const videoId = searchParams.get("id");

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    let query = supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `);

    if (videoId) {
      query = query.eq("id", videoId);
    }
    if (categoryId) {
      query = query.eq("category_id", categoryId);
    }

    const { data, error } = await query;

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération des vidéos:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoSchema.parse(body);

    // Commencer une transaction
    const { data: categoryVideo, error: categoryVideoError } = await supabase
      .from("category_videos")
      .insert({
        category_id: parsedData.category_id,
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (categoryVideoError) throw categoryVideoError;

    // Créer les détails de la vidéo
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .insert({
        category_video_id: categoryVideo.id,
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json({
      categoryVideo,
      videoDetails
    }, { status: 201 });
  } catch (error: any) {
    console.error('Erreur lors de la création de la vidéo:', error);
    return NextResponse.json(
      { error: error.message },
      { status: 400 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la mise à jour" },
        { status: 400 }
      );
    }

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoUpdateSchema.parse(body);

    // Mise à jour de category_videos
    const { error: categoryVideoError } = await supabase
      .from("category_videos")
      .update({
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .eq("id", id);

    if (categoryVideoError) throw categoryVideoError;

    // Mise à jour de video_details
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .update({
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .eq("category_video_id", id)
      .select();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json(videoDetails);
  } catch (error: any) {
    console.error('Erreur lors de la mise à jour de la vidéo:', error);
    return NextResponse.json(
      { error: error.message },
      { status: 400 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la suppression" },
        { status: 400 }
      );
    }

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    // La suppression en cascade s'occupera de video_details
    const { error } = await supabase
      .from("category_videos")
      .delete()
      .eq("id", id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/[videoId]/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from "next/server";

export async function GET(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `)
      .eq("id", params.videoId)
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération des détails de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
} 

===== route.ts =====
Chemin : ./src/app/api/categories/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

async function getNextIdentifier(supabase: any) {
  const { data: categories } = await supabase
    .from('video_categories')
    .select('identifier')
    .order('identifier', { ascending: true });

  if (!categories || categories.length === 0) {
    return ALPHABET[0]; // Retourne 'A' si aucune catégorie n'existe
  }

  // Trouve le dernier identifiant utilisé
  const lastIdentifier = categories[categories.length - 1].identifier;
  const lastIndex = ALPHABET.indexOf(lastIdentifier);

  if (lastIndex === -1 || lastIndex === ALPHABET.length - 1) {
    throw new Error("Plus d'identifiants disponibles");
  }

  return ALPHABET[lastIndex + 1];
}

// GET /api/categories
export async function GET(request: Request): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select('*')
      .order('identifier');

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération des catégories:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// POST /api/categories
export async function POST(request: Request): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { title } = body;

    if (!title) {
      return NextResponse.json(
        { error: 'Le titre est requis' },
        { status: 400 }
      );
    }

    const identifier = await getNextIdentifier(supabase);

    const { data, error } = await supabase
      .from('video_categories')
      .insert([{ 
        identifier,
        title,
        user_id: session.user.id // Ajout de l'ID de l'utilisateur
      }])
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    console.error('Erreur lors de la création de la catégorie:', error);
    return NextResponse.json(
      { error: error.message },
      { status: 400 }
    );
  }
} 

===== route.ts =====
Chemin : ./src/app/api/categories/[id]/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

// GET /api/categories/[id]
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select(`
        *,
        category_videos (*)
      `)
      .eq('id', params.id)
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// PATCH /api/categories/[id]
export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { identifier, title } = body;

    const { data, error } = await supabase
      .from('video_categories')
      .update({ identifier, title })
      .eq('id', params.id)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// DELETE /api/categories/[id]
export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { error } = await supabase
      .from('video_categories')
      .delete()
      .eq('id', params.id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
} 

===== route.ts =====
Chemin : ./src/app/api/auth/[...nextauth]/route.ts
// ./src/app/api/auth/[...nextauth]/route.ts
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { supabase } from "@/utils/supabaseClient";

const handler = NextAuth({
  secret: process.env.NEXTAUTH_SECRET, // Clé secrète ajoutée pour signer les tokens JWT
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "text", placeholder: "john.doe@example.com" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          console.error("❌ Erreur: Email et mot de passe requis !");
          throw new Error("Email et mot de passe requis");
        }

        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials.email,
          password: credentials.password
        });

        if (error || !data.user) {
          console.error(`❌ Erreur de connexion: ${error?.message}`);
          throw new Error("Identifiants invalides");
        }

        console.log(`✅ Utilisateur connecté: ${data.user.email}`);

        return { ...data.user };
      }
    })
  ],
  session: {
    strategy: "jwt"
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email ?? undefined;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
      }
      return session;
    }
  },
  pages: {
    signIn: "/login"
  }
});

export { handler as GET, handler as POST };


===== page.tsx =====
Chemin : ./src/app/login/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const supabase = createClientComponentClient();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMsg("");
    setIsLoading(true);

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        setErrorMsg(error.message);
        return;
      }

      if (data?.session) {
        router.push("/dashboard");
        router.refresh(); // Force le rafraîchissement pour mettre à jour la session
      }
    } catch (error) {
      console.error("Erreur de connexion:", error);
      setErrorMsg("Une erreur est survenue lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#212121] text-[#ECECEC]">
      <form
        onSubmit={handleSubmit}
        className="w-96 p-8 bg-[#171717] rounded-lg shadow-xl border border-[#424242]"
      >
        <h2 className="text-2xl font-semibold mb-6">Connexion</h2>
        {errorMsg && <p className="text-red-500 mb-4">{errorMsg}</p>}
        <div className="mb-4">
          <label htmlFor="email" className="block mb-2 text-sm font-medium">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC] transition-colors duration-200"
            required
            disabled={isLoading}
          />
        </div>
        <div className="mb-6">
          <label htmlFor="password" className="block mb-2 text-sm font-medium">
            Mot de passe
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC] focus:outline-none focus:border-[#ECECEC] transition-colors duration-200"
            required
            disabled={isLoading}
          />
        </div>
        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-[#424242] hover:bg-[#171717] text-[#ECECEC] py-3 px-4 rounded-lg transition-colors duration-200 border border-[#424242] disabled:opacity-50"
        >
          {isLoading ? "Connexion en cours..." : "Se connecter"}
        </button>
      </form>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import CreateCategoryModal from "@/components/CreateCategoryModal";

interface Category {
  id: number;
  identifier: string;
  title: string;
  pending_count: number;
  finished_count: number;
  ready_to_publish_count: number;
}

export default function DashboardPage() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const { data, error } = await supabase
        .from("video_categories")
        .select("*")
        .order("identifier", { ascending: true });

      if (error) throw error;
      setCategories(data || []);
    } catch (err) {
      console.error("Erreur lors du chargement des catégories:", err);
      setError("Impossible de charger les catégories");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignOut = async () => {
    try {
      await supabase.auth.signOut();
      router.push("/login");
    } catch (error) {
      console.error("Erreur lors de la déconnexion:", error);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center">
        Chargement...
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#212121] flex">
      {/* Sidebar */}
      <aside className="w-64 bg-[#171717] min-h-screen flex flex-col border-r border-[#424242]">
        <div className="p-6">
          <h1 className="text-xl font-semibold text-[#ECECEC]">Dashboard</h1>
        </div>

        <nav className="flex-1 p-4">
          <ul className="space-y-2">
            <li>
              <a
                href="/dashboard"
                className="text-[#ECECEC] hover:text-gray-300 block py-2"
              >
                Catégories
              </a>
            </li>
            {/* Autres liens de navigation si nécessaire */}
          </ul>
        </nav>

        <div className="p-4 border-t border-[#424242]">
          <button
            onClick={handleSignOut}
            className="w-full px-4 py-2 text-sm bg-[#424242] hover:bg-[#171717] rounded-lg transition-colors duration-200 border border-[#424242] text-[#ECECEC]"
          >
            Déconnexion
          </button>
        </div>
      </aside>

      {/* Contenu Principal */}
      <main className="flex-1 p-8 text-[#ECECEC] overflow-y-auto">
        <div className="max-w-6xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-semibold">Catégories de vidéos</h1>
          </div>

          {error && (
            <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-6">
              {error}
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* Carte "Ajouter une catégorie" en premier */}
            <div
              onClick={() => setIsCreateModalOpen(true)}
              className="bg-[#171717] p-6 rounded-lg border border-dashed border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer flex flex-col items-center justify-center"
            >
              <div className="w-12 h-12 bg-[#424242] rounded-full flex items-center justify-center mb-4">
                <span className="text-2xl">+</span>
              </div>
              <p className="text-center text-gray-400">
                Créer une nouvelle catégorie
              </p>
            </div>

            {/* Liste des catégories existantes */}
            {categories.map((category) => (
              <div
                key={category.id}
                onClick={() =>
                  router.push(`/dashboard/categories/${category.id}`)
                }
                className="bg-[#171717] p-6 rounded-lg border border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer"
              >
                <div className="flex items-center mb-4">
                  <span className="text-xl font-medium text-[#424242]">
                    {category.identifier}
                  </span>
                  <span className="mx-2 text-xl font-medium text-[#424242]">
                    |
                  </span>
                  <h3 className="text-xl font-medium">{category.title}</h3>
                </div>
                <div className="flex justify-between text-sm text-gray-400">
                  <span>{category.pending_count} en cours</span>
                  <span>{category.ready_to_publish_count} prêtes</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </main>

      <CreateCategoryModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSuccess={fetchCategories}
      />
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/videos/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  fetchVideoDetails,
  updateTitle,
  updateDescription,
  updateInstructions,
  updateLink,
  updateStatus,
} from "../../../../services/videoService";
import { Video, VIDEO_STATUS } from "../../../../types/video";
import { STATUS_STEPS } from "../../../../constants/videoConstants";
import { EditableField } from "../../../../components/EditableField";
import { StatusProgress } from "../../../../components/StatusProgress";

export default function VideoPage({ params }: { params: { id: string } }) {
  const [video, setVideo] = useState<Video | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isStatusChanging, setIsStatusChanging] = useState(false);
  const router = useRouter();

  // États locaux pour l'édition
  const [newTitle, setNewTitle] = useState("");
  const [newDescription, setNewDescription] = useState("");
  const [newInstructions, setNewInstructions] = useState("");
  const [newRushLink, setNewRushLink] = useState("");
  const [newVideoLink, setNewVideoLink] = useState("");
  const [newMiniatureLink, setNewMiniatureLink] = useState("");
  const [editingTitle, setEditingTitle] = useState(false);
  const [editingDescription, setEditingDescription] = useState(false);
  const [editingInstructions, setEditingInstructions] = useState(false);
  const [editingRushLink, setEditingRushLink] = useState(false);
  const [editingVideoLink, setEditingVideoLink] = useState(false);
  const [editingMiniatureLink, setEditingMiniatureLink] = useState(false);

  useEffect(() => {
    const loadVideo = async () => {
      try {
        const data = await fetchVideoDetails(params.id);
        setVideo(data);
      } catch (err) {
        console.error("Erreur lors du chargement de la vidéo :", err);
        setError("Impossible de charger les détails de la vidéo");
      } finally {
        setIsLoading(false);
      }
    };
    loadVideo();
  }, [params.id]);

  useEffect(() => {
    if (video) {
      setNewTitle(video.title);
      setNewDescription(video.description || "");
      setNewInstructions(video.instructions_miniature || "");
      setNewRushLink(video.rush_link || "");
      setNewVideoLink(video.video_link || "");
      setNewMiniatureLink(video.miniature_link || "");
    }
  }, [video]);

  const handleTitleUpdate = async () => {
    if (!newTitle.trim()) return;
    try {
      await updateTitle(params.id, newTitle);
      setVideo((prev) => (prev ? { ...prev, title: newTitle } : null));
      setEditingTitle(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour du titre :", err);
      setError("Impossible de mettre à jour le titre");
    }
  };

  const handleDescriptionUpdate = async () => {
    try {
      await updateDescription(params.id, newDescription);
      setVideo((prev) => (prev ? { ...prev, description: newDescription } : null));
      setEditingDescription(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour de la description :", err);
      setError("Impossible de mettre à jour la description");
    }
  };

  const handleInstructionsUpdate = async () => {
    try {
      await updateInstructions(params.id, newInstructions);
      setVideo((prev) =>
        prev ? { ...prev, instructions_miniature: newInstructions } : null
      );
      setEditingInstructions(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour des instructions :", err);
      setError("Impossible de mettre à jour les instructions");
    }
  };

  const handleLinkUpdate = async (
    field: string,
    value: string,
    setEditing: (val: boolean) => void
  ) => {
    try {
      await updateLink(params.id, field, value);
      setVideo((prev) => (prev ? { ...prev, [field]: value } : null));
      setEditing(false);
    } catch (err) {
      console.error(`Erreur lors de la mise à jour du lien ${field} :`, err);
      setError(`Impossible de mettre à jour le lien ${field}`);
    }
  };

  const handleStatusUpdate = async (newStatus: typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS]) => {
    if (!video) return;
    setIsStatusChanging(true);
    try {
      const newStatusIndex = STATUS_STEPS.findIndex((step) => step.value === newStatus);
      const currentStatusIndex = STATUS_STEPS.findIndex(
        (step) => step.value === video.production_status
      );
      if (Math.abs(newStatusIndex - currentStatusIndex) > 1) {
        throw new Error("Vous ne pouvez changer que vers le statut suivant ou précédent");
      }
      await updateStatus(params.id, newStatus);
      setVideo((prev) => (prev ? { ...prev, production_status: newStatus } : null));
    } catch (err) {
      console.error("Erreur lors de la mise à jour du statut :", err);
      setError(err instanceof Error ? err.message : "Impossible de mettre à jour le statut");
    } finally {
      setIsStatusChanging(false);
    }
  };

  const getStepStatus = (
    stepValue: typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS],
    currentStatus: typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS] | null
  ) => {
    if (!currentStatus) return "upcoming";
    const stepIndex = STATUS_STEPS.findIndex((step) => step.value === stepValue);
    const currentIndex = STATUS_STEPS.findIndex((step) => step.value === currentStatus);
    if (stepIndex < currentIndex) return "completed";
    if (stepIndex === currentIndex) return "current";
    return "upcoming";
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case VIDEO_STATUS.TO_DO:
        return "bg-yellow-600";
      case VIDEO_STATUS.IN_PROGRESS:
        return "bg-blue-600";
      case VIDEO_STATUS.READY_TO_PUBLISH:
        return "bg-green-600";
      case VIDEO_STATUS.FINISHED:
        return "bg-purple-600";
      default:
        return "bg-[#424242]";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case VIDEO_STATUS.TO_DO:
        return "À faire";
      case VIDEO_STATUS.IN_PROGRESS:
        return "En cours";
      case VIDEO_STATUS.READY_TO_PUBLISH:
        return "Prêt à publier";
      case VIDEO_STATUS.FINISHED:
        return "Terminé";
      default:
        return status;
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center">
        Chargement...
      </div>
    );
  }

  if (error || !video) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-8">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg">
            {error || "Vidéo non trouvée"}
          </div>
          <button
            onClick={() => router.back()}
            className="mt-4 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200"
          >
            Retour
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="max-w-6xl mx-auto p-8">
        {/* En-tête avec titre et statut */}
        <div className="mb-8">
          <button
            onClick={() => router.back()}
            className="mb-4 text-[#ECECEC] hover:text-gray-300 transition-colors duration-200"
          >
            ← Retour
          </button>
          <div className="flex items-start justify-between">
            <h1 className="text-3xl font-semibold flex items-center gap-4">
              <span className="text-[#424242]">#{video.id}</span>
              {editingTitle ? (
                <EditableField
                  value={newTitle}
                  onSave={handleTitleUpdate}
                  inputType="text"
                  placeholder="Titre de la vidéo..."
                />
              ) : (
                <span onClick={() => setEditingTitle(true)} className="cursor-pointer hover:text-gray-300">
                  {video.title}
                </span>
              )}
            </h1>
            <div className={`transition-opacity duration-200 ${isStatusChanging ? "opacity-50" : "opacity-100"}`}>
              <span className={`px-3 py-1 rounded-full text-sm ${getStatusColor(
                video.production_status.toString()
              )}`}>
                {getStatusText(video.production_status.toString())}
              </span>
            </div>
          </div>
        </div>

        <div className="grid gap-6">
          {/* 1. Contenu de la vidéo */}
          <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
            <h2 className="text-xl font-medium mb-4">Contenu de la vidéo</h2>
            <div className="grid gap-4">
              {/* Titre */}
              <div className="flex justify-between items-start">
                <span className="text-gray-400">Titre</span>
                {editingTitle ? (
                  <EditableField
                    value={newTitle}
                    onSave={handleTitleUpdate}
                    inputType="text"
                    placeholder="Titre de la vidéo..."
                  />
                ) : (
                  <span onClick={() => setEditingTitle(true)} className="cursor-pointer hover:text-gray-300 text-right flex-1 ml-4">
                    {video.title}
                  </span>
                )}
              </div>

              {/* Description */}
              <div className="flex justify-between items-start">
                <span className="text-gray-400">Description</span>
                {editingDescription ? (
                  <EditableField
                    value={newDescription}
                    onSave={handleDescriptionUpdate}
                    inputType="textarea"
                    placeholder="Description de la vidéo pour YouTube..."
                  />
                ) : (
                  <span onClick={() => setEditingDescription(true)} className="cursor-pointer hover:text-gray-300 text-right flex-1 ml-4">
                    {video.description || "Ajouter une description"}
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* 2. Ressources de production */}
          <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
            <h2 className="text-xl font-medium mb-4">Ressources de production</h2>
            <div className="grid gap-4">
              {/* Rush Link */}
              <div className="flex justify-between items-center">
                <span className="text-gray-400">Rush brut</span>
                {editingRushLink ? (
                  <EditableField
                    value={newRushLink}
                    onSave={() => handleLinkUpdate("rush_link", newRushLink, setEditingRushLink)}
                    inputType="text"
                    placeholder="Lien vers les rushes..."
                  />
                ) : (
                  <span onClick={() => setEditingRushLink(true)} className="text-blue-400 hover:text-blue-300 cursor-pointer">
                    {video.rush_link || "Ajouter le lien des rushes"}
                  </span>
                )}
              </div>

              {/* Video Link */}
              <div className="flex justify-between items-center">
                <span className="text-gray-400">Montage final</span>
                {editingVideoLink ? (
                  <EditableField
                    value={newVideoLink}
                    onSave={() => handleLinkUpdate("video_link", newVideoLink, setEditingVideoLink)}
                    inputType="text"
                    placeholder="Lien vers la vidéo montée..."
                  />
                ) : (
                  <span onClick={() => setEditingVideoLink(true)} className="text-blue-400 hover:text-blue-300 cursor-pointer">
                    {video.video_link || "Ajouter le lien de la vidéo montée"}
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* 3. Miniature */}
          <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
            <h2 className="text-xl font-medium mb-4">Miniature</h2>
            <div className="grid gap-4">
              <div className="flex justify-between items-start">
                <span className="text-gray-400">Instructions</span>
                {editingInstructions ? (
                  <EditableField
                    value={newInstructions}
                    onSave={handleInstructionsUpdate}
                    inputType="textarea"
                    placeholder="Instructions pour le graphiste..."
                  />
                ) : (
                  <span onClick={() => setEditingInstructions(true)} className="cursor-pointer hover:text-gray-300 flex-1 ml-4">
                    {video.instructions_miniature || "Ajouter les instructions pour la miniature"}
                  </span>
                )}
              </div>

              <div className="flex justify-between items-center">
                <span className="text-gray-400">Fichier miniature</span>
                {editingMiniatureLink ? (
                  <EditableField
                    value={newMiniatureLink}
                    onSave={() =>
                      handleLinkUpdate("miniature_link", newMiniatureLink, setEditingMiniatureLink)
                    }
                    inputType="text"
                    placeholder="Lien vers la miniature..."
                  />
                ) : (
                  <span onClick={() => setEditingMiniatureLink(true)} className="text-blue-400 hover:text-blue-300 cursor-pointer">
                    {video.miniature_link || "Ajouter le lien de la miniature"}
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* 4. Progression */}
          <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
            <h2 className="text-xl font-medium mb-4">Progression</h2>
            <StatusProgress
              currentStatus={video.production_status}
              onStatusChange={handleStatusUpdate}
              isDisabled={isStatusChanging}
            />
          </div>

          {/* 5. Informations système */}
          <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
            <h2 className="text-xl font-medium mb-4">Informations système</h2>
            <div className="grid gap-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-400">Créée le</span>
                <span>{new Date(video.created_at).toLocaleDateString()}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-400">Dernière mise à jour</span>
                <span>{new Date(video.updated_at).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/categories/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Trash2, ArrowLeft, Save } from "react-feather";
import CreateVideoModal from "@/components/CreateVideoModal";

interface Video {
  id: number;
  title: string;
  status: "pending" | "finished" | "ready_to_publish";
  created_at: string;
  updated_at: string;
}

interface Category {
  id: number;
  identifier: string;
  title: string;
  videos: Video[];
}

export default function CategoryPage({ params }: { params: { id: string } }) {
  const [category, setCategory] = useState<Category | null>(null);
  const [editingTitle, setEditingTitle] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    fetchCategoryDetails();
  }, [params.id]);

  useEffect(() => {
    if (category) {
      setNewTitle(category.title);
    }
  }, [category]);

  const fetchCategoryDetails = async () => {
    try {
      const { data: categoryData, error: categoryError } = await supabase
        .from("video_categories")
        .select("*")
        .eq("id", params.id)
        .single();

      if (categoryError) throw categoryError;

      const { data: videosData, error: videosError } = await supabase
        .from("category_videos")
        .select("*")
        .eq("category_id", params.id)
        .order("id", { ascending: true });

      if (videosError) throw videosError;

      setCategory({
        ...categoryData,
        videos: videosData || [],
      });
    } catch (err) {
      console.error("Erreur lors du chargement de la catégorie:", err);
      setError("Impossible de charger les détails de la catégorie");
    } finally {
      setIsLoading(false);
    }
  };

  const handleTitleUpdate = async () => {
    try {
      const { error } = await supabase
        .from("video_categories")
        .update({ title: newTitle })
        .eq("id", params.id);

      if (error) throw error;

      setCategory((prev) => (prev ? { ...prev, title: newTitle } : null));
      setEditingTitle(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour du titre:", err);
      setError("Impossible de mettre à jour le titre");
    }
  };

  const handleDeleteCategory = async () => {
    try {
      setIsDeleting(true);

      const response = await fetch(`/api/categories/${params.id}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Échec de la suppression");
      }

      // Redirection vers le dashboard après suppression réussie
      router.push("/dashboard");
    } catch (err) {
      console.error("Erreur lors de la suppression de la catégorie:", err);
      setError("Impossible de supprimer la catégorie");
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "ready_to_publish":
        return "bg-green-600";
      case "pending":
        return "bg-yellow-600";
      default:
        return "bg-[#424242]";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "ready_to_publish":
        return "Prêt à publier";
      case "pending":
        return "En cours";
      case "finished":
        return "Terminé";
      default:
        return status;
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center">
        Chargement...
      </div>
    );
  }

  if (error || !category) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-8">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg">
            {error || "Catégorie non trouvée"}
          </div>
          <button
            onClick={() => router.back()}
            className="mt-4 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 flex items-center gap-2"
          >
            <ArrowLeft size={16} /> Retour
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="max-w-6xl mx-auto p-8">
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <button
              onClick={() => router.back()}
              className="text-[#ECECEC] hover:text-gray-300 transition-colors duration-200 flex items-center gap-1.5"
            >
              <ArrowLeft size={16} /> Retour
            </button>

            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="flex items-center gap-1.5 px-3 py-1.5 hover:bg-black/20 text-red-500 rounded-md transition-colors duration-200 text-sm"
              disabled={isDeleting}
            >
              <Trash2 size={16} />
              {isDeleting ? "Suppression..." : "Supprimer"}
            </button>
          </div>

          <h1 className="text-3xl font-semibold flex items-center gap-4">
            <span className="text-[#424242]">{category.identifier}</span>
            {editingTitle ? (
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  value={newTitle}
                  onChange={(e) => setNewTitle(e.target.value)}
                  className="bg-transparent border-b border-[#424242] focus:border-[#ECECEC] outline-none px-1"
                  autoFocus
                />
                <button
                  onClick={handleTitleUpdate}
                  className="text-sm px-2 py-1 bg-[#424242] rounded flex items-center gap-1"
                >
                  <Save size={14} /> Sauvegarder
                </button>
              </div>
            ) : (
              <span
                onClick={() => setEditingTitle(true)}
                className="cursor-pointer hover:text-gray-300"
              >
                {category.title}
              </span>
            )}
          </h1>
        </div>

        {/* Modale de confirmation de suppression */}
        {showDeleteConfirm && (
          <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-[#171717] p-6 rounded-lg shadow-xl max-w-md w-full border border-gray-200 dark:border-[#424242]">
              <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-[#ECECEC]">
                Confirmer la suppression
              </h2>
              <p className="mb-6 text-gray-700 dark:text-gray-300">
                Êtes-vous sûr de vouloir supprimer la catégorie{" "}
                <strong>{category.title}</strong> ?
                {category.videos.length > 0 && (
                  <span className="block mt-2 text-red-500 dark:text-red-400">
                    Cette catégorie contient {category.videos.length} vidéo
                    {category.videos.length > 1 ? "s" : ""} qui ne sera/seront
                    plus associée(s) à aucune catégorie.
                  </span>
                )}
              </p>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-[#424242] dark:hover:bg-[#535353] text-gray-800 dark:text-[#ECECEC] rounded-md transition-colors duration-200 text-sm"
                  disabled={isDeleting}
                >
                  Annuler
                </button>
                <button
                  onClick={handleDeleteCategory}
                  className="px-3 py-1.5 flex items-center gap-1.5 bg-red-50 hover:bg-red-100 dark:bg-red-900/30 dark:hover:bg-red-900/50 text-red-600 dark:text-red-400 rounded-md transition-colors duration-200 text-sm"
                  disabled={isDeleting}
                >
                  {isDeleting ? (
                    <>
                      <svg
                        className="animate-spin h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Suppression...
                    </>
                  ) : (
                    <>
                      <Trash2 size={16} />
                      Confirmer
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Liste des vidéos */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div
            onClick={() => setIsCreateModalOpen(true)}
            className="bg-[#171717] p-6 rounded-lg border-2 border-dashed border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer flex items-center justify-center min-h-[160px] group"
          >
            <div className="text-center">
              <div className="w-12 h-12 rounded-full border-2 border-[#424242] group-hover:border-[#ECECEC] flex items-center justify-center mx-auto mb-3 transition-colors duration-200">
                <span className="text-2xl text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                  +
                </span>
              </div>
              <div className="text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                Ajouter une vidéo
              </div>
            </div>
          </div>

          {category.videos.map((video) => (
            <div
              key={video.id}
              onClick={() => router.push(`/dashboard/videos/${video.id}`)}
              className="bg-[#171717] p-6 rounded-lg border border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer"
            >
              <div className="flex flex-col h-full">
                <div className="flex items-start justify-between mb-4">
                  <h3 className="text-xl font-medium flex-1">{video.title}</h3>
                  <span
                    className={`px-3 py-1 rounded-full text-sm ${getStatusColor(
                      video.status
                    )} ml-2`}
                  >
                    {getStatusText(video.status)}
                  </span>
                </div>
                <div className="mt-auto">
                  <div className="text-sm text-gray-400">
                    Dernière mise à jour :{" "}
                    {new Date(video.updated_at).toLocaleDateString()}
                  </div>
                </div>
              </div>
            </div>
          ))}

          {category.videos.length === 0 && (
            <div className="col-span-full text-center py-12 text-gray-400">
              Aucune vidéo dans cette catégorie
            </div>
          )}
        </div>

        <CreateVideoModal
          isOpen={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          onSuccess={fetchCategoryDetails}
          categoryId={params.id}
          categoryTitle={category.title}
        />
      </div>
    </div>
  );
}

===== video.ts =====
Chemin : ./src/types/video.ts
export interface Video {
  id: number;
  title: string;
  status: 'pending' | 'finished' | 'ready_to_publish';
  created_at: string;
  updated_at: string;
  category_id: number;
  description?: string;
  video_url?: string;
  thumbnail_url?: string;
  instructions_miniature: string;
  rush_link: string;
  video_link: string;
  miniature_link: string;
  production_status: Status;
}

export const VIDEO_STATUS = {
  TO_DO: 'À monter',
  IN_PROGRESS: 'En cours',
  READY_TO_PUBLISH: 'Prêt à publier',
  FINISHED: 'Terminé'
} as const;

export type Status = typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS];

export interface StatusStep {
  value: Status;
  label: string;
  description: string;
}


===== next-auth.types.d.ts =====
Chemin : ./types/next-auth.types.d.ts
import NextAuth, { DefaultSession, DefaultUser } from "next-auth";
import "next-auth/jwt";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      role?: string | null;
    } & DefaultSession["user"];
  }
  interface User extends DefaultUser {
    id: string;
    role?: string | null;
  }
  interface AdapterUser extends User {}
}

declare module "next-auth/jwt" {
  interface JWT {
    id?: string;
    role?: string | null;
    name?: string;
  }
}


