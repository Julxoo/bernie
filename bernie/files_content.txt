===== types.ts =====
Chemin : ./src/app/dashboard/admin/types.ts
// src/app/dashboard/admin/types.ts
export interface Metric {
  id: string;
  label: string;
  type: "currency" | "number" | "text";
}

export interface CasinoReport {
  id?: number;
  user_id?: string;
  template_id: number;
  template_name: string;
  month: string;
  year: number;
  created_at: string;
  data: {
    [key: string]: string;
  };
}


===== constants.ts =====
Chemin : ./src/app/dashboard/admin/constants.ts
// src/app/dashboard/admin/constants.ts
import { Metric } from "./types";

// On utilise let au lieu de const pour pouvoir la modifier
export let CASINOS: string[] = [
  "AZUR",
  "BANZAI",
  "CASINO CHAMPAGNE",
  "CASINO NIGHT",
];

// Fonction pour ajouter un nouveau casino
export function addCasino(name: string): void {
  if (!CASINOS.includes(name)) {
    CASINOS.push(name);
  }
}

// Fonction pour supprimer un casino
export function removeCasino(name: string): void {
  CASINOS = CASINOS.filter((casino) => casino !== name);
}

// Fonction pour renommer un casino
export function renameCasino(oldName: string, newName: string): void {
  const index = CASINOS.indexOf(oldName);
  if (index !== -1 && !CASINOS.includes(newName)) {
    CASINOS[index] = newName;
  }
}

export const METRICS: Metric[] = [
  { id: "TOTAL_DEPOSIT", label: "TOTAL DEPOSIT", type: "currency" },
  { id: "SIGNUP", label: "SIGNUP", type: "number" },
  { id: "FTD", label: "FTD", type: "number" },
  { id: "NGR", label: "NGR", type: "currency" },
  { id: "PROFITS", label: "PROFITS", type: "currency" },
];

export const MONTHS: string[] = [
  "janvier",
  "février",
  "mars",
  "avril",
  "mai",
  "juin",
  "juillet",
  "août",
  "septembre",
  "octobre",
  "novembre",
  "décembre",
];


===== page.tsx =====
Chemin : ./src/app/dashboard/admin/page.tsx
// src/app/dashboard/admin/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import AccessDenied from "./components/AccessDenied";
import ReportList from "./components/ReportList";
import ReportEditor from "./components/ReportEditor";
import { fetchReports } from "./services/reportsService";
import { CasinoReport } from "./types";

export default function AdminPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState("reports");
  const [reports, setReports] = useState<CasinoReport[]>([]);
  const [activeReport, setActiveReport] = useState<CasinoReport | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // Charger les rapports au chargement
  useEffect(() => {
    const loadReports = async () => {
      if (status !== "loading" && session?.user?.role !== "admin") {
        router.push("/dashboard");
        return;
      }

      try {
        setIsLoading(true);
        const data = await fetchReports();
        setReports(data);
      } catch (err) {
        console.error('Erreur lors du chargement des rapports:', err);
      } finally {
        setIsLoading(false);
      }
    };
    
    if (status !== "loading") {
      loadReports();
    }
  }, [session, status, router]);

  if (status === "loading") {
    return <div>Chargement...</div>;
  }

  if (session?.user?.role !== "admin") {
    return <AccessDenied />;
  }

  return (
    <div className="p-4 md:p-6 text-gray-200 min-h-screen">
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">Administration</h1>
        <p className="text-sm text-gray-400 mt-1">
          Gérez vos rapports mensuels de performance
        </p>
      </header>

      <div className="mb-6">
        <div className="flex border-b border-[#424242]">
          <button
            className={`px-4 py-2 font-medium ${
              activeTab === "reports" ? "text-white border-b-2 border-white" : "text-gray-400"
            }`}
            onClick={() => setActiveTab("reports")}
          >
            Rapports sauvegardés
          </button>
          {activeReport && (
            <button
              className={`px-4 py-2 font-medium ${
                activeTab === "edit" ? "text-white border-b-2 border-white" : "text-gray-400"
              }`}
              onClick={() => setActiveTab("edit")}
            >
              Édition
            </button>
          )}
        </div>
      </div>

      {activeTab === "reports" && (
        <ReportList 
          reports={reports}
          isLoading={isLoading}
          setReports={setReports}
          setActiveReport={setActiveReport}
          setActiveTab={setActiveTab}
        />
      )}
      
      {activeTab === "edit" && activeReport && (
        <ReportEditor
          activeReport={activeReport}
          setActiveReport={setActiveReport}
          setReports={setReports}
          isLoading={isLoading}
          setIsLoading={setIsLoading}
        />
      )}
    </div>
  );
}

===== reportsService.ts =====
Chemin : ./src/app/dashboard/admin/services/reportsService.ts
// src/app/dashboard/admin/services/reportsService.ts
import * as XLSX from "xlsx";
import { CASINOS, MONTHS, addCasino } from "../constants";
import { CasinoReport } from "../types";
import { Session } from "next-auth";

// Fonction pour récupérer tous les rapports
export async function fetchReports(): Promise<CasinoReport[]> {
  const response = await fetch('/api/casino-reports');
  if (!response.ok) {
    throw new Error('Erreur lors du chargement des rapports');
  }
  return await response.json();
}

// Fonction pour créer un nouveau rapport
export function createNewReport(session?: Session | null): CasinoReport {
  const currentDate = new Date();
  const currentMonth = MONTHS[currentDate.getMonth()];
  const currentYear = currentDate.getFullYear();
  
  // Structure initiale du rapport
  const newReportData: CasinoReport = {
    template_id: 1,
    template_name: "Rapport Performances Mensuelles",
    month: currentMonth,
    year: currentYear,
    created_at: new Date().toISOString(),
    data: {},
    user_id: session?.user?.id
  };
  
  // Initialiser les données pour chaque casino
  CASINOS.forEach(casino => {
    newReportData.data[`${casino}_TOTAL_DEPOSIT`] = "0.00";
    newReportData.data[`${casino}_SIGNUP`] = "0";
    newReportData.data[`${casino}_FTD`] = "0";
    newReportData.data[`${casino}_NGR`] = "0.00";
    newReportData.data[`${casino}_PROFITS`] = "0.00";
  });
  
  return newReportData;
}

// Fonction pour sauvegarder un rapport
export async function saveReport(report: CasinoReport): Promise<CasinoReport> {
  // Ajouter template_id et template_name si non définis
  if (!report.template_id) {
    report.template_id = 1;
  }
  if (!report.template_name) {
    report.template_name = "Rapport Performances Mensuelles";
  }

  // Si le rapport a un ID, mise à jour, sinon création
  let response;
  if (report.id) {
    response = await fetch(`/api/casino-reports/${report.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(report)
    });
  } else {
    response = await fetch('/api/casino-reports', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(report)
    });
  }
  
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || 'Erreur de sauvegarde');
  }
  
  return await response.json();
}

// Fonction pour supprimer un rapport
export async function deleteReport(reportId: number): Promise<boolean> {
  const response = await fetch(`/api/casino-reports/${reportId}`, {
    method: 'DELETE'
  });
  
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || 'Erreur de suppression');
  }
  
  return true;
}

// Fonction pour générer et télécharger un fichier Excel
export function generateExcel(report: CasinoReport): void {
  // Créer un nouveau classeur
  const wb = XLSX.utils.book_new();
  
  // En-tête de la feuille
  const sheetData = [
    [`Rapport mensuel - ${report.month} ${report.year}`],
    []
  ];
  
  // Première section - En-têtes
  sheetData.push(
    ["CASINO", "TOTAL DEPOSIT", "SIGNUP", "FTD", "", "DEPOSIT/SIGNUP", "DEPOSIT/FTD", ""]
  );
  
  // Données pour chaque casino
  let totalDeposit = 0;
  let totalSignup = 0; 
  let totalFtd = 0;
  
  CASINOS.forEach(casino => {
    const deposit = parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0");
    const signup = parseInt(report.data[`${casino}_SIGNUP`] || "0");
    const ftd = parseInt(report.data[`${casino}_FTD`] || "0");
    
    // Calculer les ratios
    const depositPerSignup = signup > 0 ? deposit / signup : 0;
    const depositPerFtd = ftd > 0 ? deposit / ftd : 0;
    
    // Ajouter la ligne pour ce casino
    sheetData.push([
      casino,
      deposit.toFixed(2) + " €",
      signup.toString(),
      ftd.toString(),
      "",
      depositPerSignup.toFixed(2) + " €",
      depositPerFtd.toFixed(2) + " €",
      ""
    ]);
    
    // Additionner pour le total
    totalDeposit += deposit;
    totalSignup += signup;
    totalFtd += ftd;
  });
  
  // Calculer les totaux
  const totalDepositPerSignup = totalSignup > 0 ? totalDeposit / totalSignup : 0;
  const totalDepositPerFtd = totalFtd > 0 ? totalDeposit / totalFtd : 0;
  
  // Ajouter la ligne du total
  sheetData.push([
    "TOTAL :",
    totalDeposit.toFixed(2) + " €",
    totalSignup.toString(),
    totalFtd.toString(),
    "",
    totalDepositPerSignup.toFixed(2) + " €",
    totalDepositPerFtd.toFixed(2) + " €",
    ""
  ]);
  
  // Ajouter une ligne vide
  sheetData.push([]);
  
  // Deuxième section - NGR et PROFITS
  sheetData.push(
    ["CASINO", "NGR", "PROFITS"]
  );
  
  // Données pour chaque casino
  let totalNgr = 0;
  let totalProfits = 0;
  
  CASINOS.forEach(casino => {
    const ngr = parseFloat(report.data[`${casino}_NGR`] || "0");
    const profits = parseFloat(report.data[`${casino}_PROFITS`] || "0");
    
    // Ajouter la ligne pour ce casino
    sheetData.push([
      casino,
      ngr.toFixed(2) + " €",
      profits.toFixed(2) + " €"
    ]);
    
    // Additionner pour le total
    totalNgr += ngr;
    totalProfits += profits;
  });
  
  // Ajouter la ligne du total
  sheetData.push([
    "TOTAL :",
    totalNgr.toFixed(2) + " €",
    totalProfits.toFixed(2) + " €"
  ]);
  
  // Créer la feuille et l'ajouter au classeur
  const ws = XLSX.utils.aoa_to_sheet(sheetData);
  
  // Appliquer des styles (largeur de colonnes, etc.)
  const colWidths = [{ wch: 20 }, { wch: 15 }, { wch: 10 }, { wch: 10 }, { wch: 5 }, { wch: 15 }, { wch: 15 }];
  ws['!cols'] = colWidths;
  
  XLSX.utils.book_append_sheet(wb, ws, `${report.month.substring(0, 3)}_${report.year}`);
  
  // Télécharger le fichier
  XLSX.writeFile(wb, `Rapport_${report.month}_${report.year}.xlsx`);
}

// Fonction pour importer un fichier Excel
export function importExcel(file: File): Promise<CasinoReport> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        
        // Récupérer la première feuille
        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 }) as any[][];
        
        // Extraire le mois et l'année du titre
        let month = "janvier";
        let year = new Date().getFullYear();
        
        if (jsonData[0] && jsonData[0][0]) {
          const titleText = String(jsonData[0][0]);
          const titleMatch = titleText.match(/(\w+)\s+(\d{4})/);
          if (titleMatch) {
            const potentialMonth = titleMatch[1].toLowerCase();
            if (MONTHS.includes(potentialMonth)) {
              month = potentialMonth;
            }
            
            const potentialYear = parseInt(titleMatch[2]);
            if (!isNaN(potentialYear) && potentialYear > 2000 && potentialYear < 2100) {
              year = potentialYear;
            }
          }
        }
        
        // Initialiser un nouveau rapport
        const newReportData: CasinoReport = {
          template_id: 1,
          template_name: "Rapport Performances Mensuelles",
          month: month,
          year: year,
          created_at: new Date().toISOString(),
          data: {}
        };
        
        // Parcourir les données pour remplir le rapport
        // Première section - Dépôts, inscriptions, FTD
        for (let i = 3; i < jsonData.length; i++) {
          const row = jsonData[i];
          if (!row || row.length < 4) continue;
          
          const casino = String(row[0]);
          
          // Arrêter au total
          if (casino === "TOTAL :") break;
          
          // Si le casino n'est pas déjà dans notre liste et n'est pas une ligne vide ou spéciale
          if (!CASINOS.includes(casino) && casino.trim() !== "" && !casino.toLowerCase().includes("total")) {
            // Ajouter automatiquement ce casino à notre liste
            addCasino(casino);
          }
          
          if (CASINOS.includes(casino)) {
            // Extraire les valeurs
            const deposit = parseFloat(String(row[1]).replace(/[^\d.-]/g, '') || "0");
            const signup = parseInt(String(row[2]) || "0");
            const ftd = parseInt(String(row[3]) || "0");
            
            // Stocker les valeurs
            newReportData.data[`${casino}_TOTAL_DEPOSIT`] = deposit.toString();
            newReportData.data[`${casino}_SIGNUP`] = signup.toString();
            newReportData.data[`${casino}_FTD`] = ftd.toString();
          }
        }
        
        // Deuxième section - NGR et Profits
        let ngrSectionFound = false;
        for (let i = 0; i < jsonData.length; i++) {
          const row = jsonData[i];
          if (!row || row.length < 3) continue;
          
          // Détecter le début de la section NGR/PROFITS
          if (row[0] === "CASINO" && row[1] === "NGR" && row[2] === "PROFITS") {
            ngrSectionFound = true;
            continue;
          }
          
          if (ngrSectionFound) {
            const casino = String(row[0]);
            
            // Arrêter au total
            if (casino === "TOTAL :") break;
            
            // Si le casino n'est pas déjà dans notre liste et n'est pas une ligne vide ou spéciale
            if (!CASINOS.includes(casino) && casino.trim() !== "" && !casino.toLowerCase().includes("total")) {
              // Ajouter automatiquement ce casino à notre liste
              addCasino(casino);
            }
            
            if (CASINOS.includes(casino)) {
              // Extraire les valeurs
              const ngr = parseFloat(String(row[1]).replace(/[^\d.-]/g, '') || "0");
              const profits = parseFloat(String(row[2]).replace(/[^\d.-]/g, '') || "0");
              
              // Stocker les valeurs
              newReportData.data[`${casino}_NGR`] = ngr.toString();
              newReportData.data[`${casino}_PROFITS`] = profits.toString();
            }
          }
        }
        
        resolve(newReportData);
      } catch (err) {
        reject(err);
      }
    };
    reader.onerror = (e) => reject(e);
    reader.readAsArrayBuffer(file);
  });
}

===== AccessDenied.tsx =====
Chemin : ./src/app/dashboard/admin/components/AccessDenied.tsx
// src/app/dashboard/admin/components/AccessDenied.tsx
import React from "react";
import { useRouter } from "next/navigation";
import { Lock, AlertCircle } from "lucide-react";

const AccessDenied: React.FC = () => {
  const router = useRouter();
  
  return (
    <div className="flex items-center justify-center min-h-[70vh] p-8">
      <div className="bg-[#1a1a1a] p-8 rounded-lg border border-[#424242] max-w-md w-full text-center shadow-lg">
        <div className="relative w-20 h-20 mx-auto mb-5">
          <div className="absolute inset-0 bg-red-500/10 rounded-full flex items-center justify-center animate-pulse"></div>
          <Lock size={40} className="mx-auto text-red-500" />
        </div>
        
        <h1 className="text-2xl font-bold mb-4 text-white">Accès restreint</h1>
        
        <div className="bg-[#252525] p-4 rounded-lg mb-5 flex items-start">
          <AlertCircle size={20} className="text-amber-400 mr-3 mt-0.5 flex-shrink-0" />
          <p className="text-left text-gray-300">
            Vous devez être administrateur pour accéder à cette page. Si vous pensez qu'il s'agit d'une erreur, veuillez contacter votre superviseur.
          </p>
        </div>
        
        <button
          onClick={() => router.push("/dashboard")}
          className="w-full mt-4 px-4 py-3 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#525252] transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#525252] focus:ring-offset-[#1a1a1a]"
        >
          Retour au tableau de bord
        </button>
        
        <p className="mt-4 text-sm text-gray-400">
          ID de session: {Math.random().toString(36).substring(2, 12).toUpperCase()}
        </p>
      </div>
    </div>
  );
};

export default AccessDenied;

===== ReportList.tsx =====
Chemin : ./src/app/dashboard/admin/components/ReportList.tsx
// src/app/dashboard/admin/components/ReportList.tsx
import React from "react";
import { useSession } from "next-auth/react";
import { Plus, Upload, FileText, Download, Trash2, Calendar, BarChart2 } from "lucide-react";
import { createNewReport, importExcel, deleteReport, generateExcel } from "../services/reportsService";
import { CASINOS } from "../constants";
import { CasinoReport } from "../types";

interface ReportListProps {
  reports: CasinoReport[];
  isLoading: boolean;
  setReports: React.Dispatch<React.SetStateAction<CasinoReport[]>>;
  setActiveReport: React.Dispatch<React.SetStateAction<CasinoReport | null>>;
  setActiveTab: React.Dispatch<React.SetStateAction<string>>;
}

const ReportList: React.FC<ReportListProps> = ({ reports, isLoading, setReports, setActiveReport, setActiveTab }) => {
  const { data: session } = useSession();
  
  // Gérer la création d'un nouveau rapport
  const handleCreateReport = () => {
    const newReport = createNewReport(session);
    setActiveReport(newReport);
    setActiveTab("edit");
  };

  // Gérer l'importation d'un fichier Excel
  const handleImportExcel = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    try {
      const importedReport = await importExcel(file);
      // Ajouter l'ID utilisateur
      if (session?.user?.id) {
        importedReport.user_id = session.user.id;
      }
      setActiveReport(importedReport);
      setActiveTab("edit");
    } catch (err) {
      console.error("Erreur d'importation:", err);
      alert("Impossible d'importer ce fichier.");
    }
    
    // Réinitialiser l'input file
    event.target.value = '';
  };
  
  // Gérer la suppression d'un rapport
  const handleDeleteReport = async (reportId: number) => {
    if (!confirm('Êtes-vous sûr de vouloir supprimer ce rapport ?')) return;
    
    try {
      await deleteReport(reportId);
      setReports(reports.filter(report => report.id !== reportId));
    } catch (err) {
      console.error("Erreur de suppression:", err);
      alert("Impossible de supprimer ce rapport.");
    }
  };
  
  // Gérer l'exportation en Excel
  const handleExport = (report: CasinoReport) => {
    setActiveReport(report);
    setTimeout(() => generateExcel(report), 100);
  };

  // Regrouper les rapports par année
  const reportsByYear = React.useMemo(() => {
    const byYear: { [key: number]: CasinoReport[] } = {};
    
    reports.forEach(report => {
      if (!byYear[report.year]) {
        byYear[report.year] = [];
      }
      byYear[report.year].push(report);
    });
    
    // Trier les années par ordre décroissant
    return Object.keys(byYear)
      .map(Number)
      .sort((a, b) => b - a)
      .map(year => ({
        year,
        reports: byYear[year].sort((a, b) => {
          // Ordre des mois en français
          const months = ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"];
          return months.indexOf(a.month) - months.indexOf(b.month);
        })
      }));
  }, [reports]);

  // Obtenir les statistiques globales pour les rapports
  const getStats = () => {
    let totalReports = reports.length;
    let totalCasinos = CASINOS.length;
    let totalYears = new Set(reports.map(r => r.year)).size;
    let lastUpdated = reports.length > 0 
      ? new Date(Math.max(...reports.map(r => new Date(r.created_at).getTime())))
      : null;
    
    return { totalReports, totalCasinos, totalYears, lastUpdated };
  };

  const stats = getStats();

  return (
    <div>
      {/* Statistiques rapides */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242] flex items-center">
          <Calendar className="text-blue-500 mr-3" size={24} />
          <div>
            <h4 className="text-sm text-gray-400">Rapports</h4>
            <p className="text-xl font-semibold">{stats.totalReports}</p>
          </div>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242] flex items-center">
          <BarChart2 className="text-purple-500 mr-3" size={24} />
          <div>
            <h4 className="text-sm text-gray-400">Années couvertes</h4>
            <p className="text-xl font-semibold">{stats.totalYears}</p>
          </div>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242] flex items-center">
          <FileText className="text-green-500 mr-3" size={24} />
          <div>
            <h4 className="text-sm text-gray-400">Casinos suivis</h4>
            <p className="text-xl font-semibold">{stats.totalCasinos}</p>
          </div>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242] flex items-center">
          <Upload className="text-amber-500 mr-3" size={24} />
          <div>
            <h4 className="text-sm text-gray-400">Dernière mise à jour</h4>
            <p className="text-sm font-semibold">
              {stats.lastUpdated 
                ? stats.lastUpdated.toLocaleDateString('fr-FR', { 
                    day: '2-digit', 
                    month: '2-digit', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  }) 
                : 'Aucune donnée'}
            </p>
          </div>
        </div>
      </div>

      {/* Boutons d'action */}
      <div className="mb-6 flex flex-wrap gap-4">
        <button
          onClick={handleCreateReport}
          className="flex items-center gap-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#525252] transition-colors"
        >
          <Plus size={16} />
          Nouveau rapport
        </button>
        
        <label className="cursor-pointer">
          <input
            type="file"
            accept=".xlsx,.xls"
            onChange={handleImportExcel}
            className="hidden"
          />
          <div className="flex items-center gap-2 px-4 py-2 bg-[#323232] text-[#ECECEC] rounded-lg hover:bg-[#424242] transition-colors">
            <Upload size={16} />
            Importer un Excel
          </div>
        </label>
      </div>
      
      {isLoading ? (
        <div className="text-center p-12">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent" role="status">
            <span className="sr-only">Chargement...</span>
          </div>
          <p className="mt-2 text-gray-400">Chargement des rapports...</p>
        </div>
      ) : reports.length === 0 ? (
        <div className="bg-[#171717] p-8 text-center rounded-lg border border-[#424242]">
          <FileText size={48} className="text-gray-500 mx-auto mb-4" />
          <h3 className="text-xl font-medium mb-2">Aucun rapport sauvegardé</h3>
          <p className="text-gray-400 mb-6">
            Créez votre premier rapport ou importez un fichier Excel existant
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <button
              onClick={handleCreateReport}
              className="flex items-center gap-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#525252] transition-colors"
            >
              <Plus size={16} />
              Créer un rapport
            </button>
            
            <label className="cursor-pointer">
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleImportExcel}
                className="hidden"
              />
              <div className="flex items-center gap-2 px-4 py-2 bg-[#323232] text-[#ECECEC] rounded-lg hover:bg-[#424242] transition-colors">
                <Upload size={16} />
                Importer un Excel
              </div>
            </label>
          </div>
        </div>
      ) : (
        <div>
          {reportsByYear.map(({ year, reports }) => (
            <div key={year} className="mb-6">
              <h3 className="text-xl font-semibold mb-3">{year}</h3>
              <div className="bg-[#171717] rounded-lg border border-[#424242] overflow-hidden">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-[#424242]">
                      <th className="text-left p-4">Mois</th>
                      <th className="text-left p-4">Total Dépôts</th>
                      <th className="text-left p-4">Total Profits</th>
                      <th className="text-left p-4">Date de création</th>
                      <th className="text-right p-4">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {reports.map((report) => {
                      // Calculer les totaux pour l'affichage dans la liste
                      let totalDeposit = 0;
                      let totalProfits = 0;
                      
                      CASINOS.forEach(casino => {
                        totalDeposit += parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0");
                        totalProfits += parseFloat(report.data[`${casino}_PROFITS`] || "0");
                      });
                      
                      return (
                        <tr key={report.id} className="border-b border-[#424242] hover:bg-[#1d1d1d]">
                          <td className="p-4 font-medium capitalize">{report.month}</td>
                          <td className="p-4">{totalDeposit.toLocaleString('fr-FR', { minimumFractionDigits: 2 })} €</td>
                          <td className="p-4">{totalProfits.toLocaleString('fr-FR', { minimumFractionDigits: 2 })} €</td>
                          <td className="p-4">{new Date(report.created_at).toLocaleDateString('fr-FR')}</td>
                          <td className="p-4 text-right">
                            <div className="flex items-center justify-end gap-2">
                              <button 
                                className="p-2 hover:bg-[#212121] rounded-full"
                                onClick={() => {
                                  setActiveReport(report);
                                  setActiveTab("edit");
                                }}
                                title="Voir/Modifier"
                              >
                                <FileText size={16} />
                              </button>
                              <button 
                                className="p-2 hover:bg-[#212121] rounded-full"
                                onClick={() => handleExport(report)}
                                title="Télécharger"
                              >
                                <Download size={16} />
                              </button>
                              <button 
                                className="p-2 hover:bg-[#212121] rounded-full text-red-500"
                                onClick={() => report.id && handleDeleteReport(report.id)}
                                title="Supprimer"
                              >
                                <Trash2 size={16} />
                              </button>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ReportList;

===== YearlyComparison.tsx =====
Chemin : ./src/app/dashboard/admin/components/YearlyComparison.tsx
// src/app/dashboard/admin/components/YearlyComparison.tsx
import React from "react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { TrendingUp, TrendingDown, Minus } from "lucide-react";

interface YearlyComparisonProps {
  years: number[];
  yearlyData: {
    year: number;
    totalDeposit: number;
    totalSignup: number;
    totalFtd: number;
    totalNgr: number;
    totalProfits: number;
  }[];
}

const YearlyComparison: React.FC<YearlyComparisonProps> = ({ years, yearlyData }) => {
  // Formatter pour afficher les valeurs monétaires
  const formatCurrency = (value: number) => {
    return value.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' €';
  };

  // Calculer la croissance année par année
  const calculateGrowth = (currentYear: number, metric: 'totalDeposit' | 'totalSignup' | 'totalFtd' | 'totalNgr' | 'totalProfits') => {
    if (years.length < 2) return { growth: 0, icon: <Minus size={16} /> };

    const currentYearData = yearlyData.find(data => data.year === currentYear);
    const previousYearIndex = years.indexOf(currentYear) + 1;
    
    if (previousYearIndex >= years.length) return { growth: 0, icon: <Minus size={16} /> };
    
    const previousYearData = yearlyData.find(data => data.year === years[previousYearIndex]);
    
    if (!currentYearData || !previousYearData) return { growth: 0, icon: <Minus size={16} /> };
    
    const currentValue = currentYearData[metric];
    const previousValue = previousYearData[metric];
    
    if (previousValue === 0) return { growth: 0, icon: <Minus size={16} /> };
    
    const growthPercentage = ((currentValue - previousValue) / previousValue) * 100;
    
    if (growthPercentage > 0) {
      return { 
        growth: growthPercentage, 
        icon: <TrendingUp size={16} className="text-green-500" /> 
      };
    } else if (growthPercentage < 0) {
      return { 
        growth: growthPercentage, 
        icon: <TrendingDown size={16} className="text-red-500" /> 
      };
    } else {
      return { growth: 0, icon: <Minus size={16} /> };
    }
  };

  // Obtenir les données du plus récent
  const mostRecentYear = years.length > 0 ? years[0] : new Date().getFullYear();
  const depositGrowth = calculateGrowth(mostRecentYear, 'totalDeposit');
  const signupGrowth = calculateGrowth(mostRecentYear, 'totalSignup');
  const ftdGrowth = calculateGrowth(mostRecentYear, 'totalFtd');
  const profitsGrowth = calculateGrowth(mostRecentYear, 'totalProfits');

  // Obtenir les données pour le graphique
  const chartData = yearlyData.map(data => ({
    year: data.year,
    "Dépôts": data.totalDeposit,
    "Profits": data.totalProfits
  }));

  // Formatter pour le tooltip du graphique
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-gray-800 p-3 border border-gray-700 rounded-lg shadow-lg">
          <p className="font-bold">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={`item-${index}`} style={{ color: entry.color }}>
              {entry.name}: {entry.name === "Dépôts" || entry.name === "Profits" 
                ? formatCurrency(entry.value) 
                : entry.value}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
      <h3 className="text-lg font-medium mb-4">Comparaison annuelle</h3>
      
      {yearlyData.length < 2 ? (
        <p className="text-center text-gray-400 py-4">
          Données insuffisantes pour une comparaison annuelle.
          Au moins deux années de données sont nécessaires.
        </p>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-[#212121] p-3 rounded-lg">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">Croissance des dépôts</span>
                {depositGrowth.icon}
              </div>
              <p className={`text-lg font-semibold ${depositGrowth.growth > 0 ? 'text-green-500' : depositGrowth.growth < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {depositGrowth.growth > 0 ? '+' : ''}{depositGrowth.growth.toFixed(1)}%
              </p>
            </div>
            
            <div className="bg-[#212121] p-3 rounded-lg">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">Croissance des inscriptions</span>
                {signupGrowth.icon}
              </div>
              <p className={`text-lg font-semibold ${signupGrowth.growth > 0 ? 'text-green-500' : signupGrowth.growth < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {signupGrowth.growth > 0 ? '+' : ''}{signupGrowth.growth.toFixed(1)}%
              </p>
            </div>
            
            <div className="bg-[#212121] p-3 rounded-lg">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">Croissance des FTD</span>
                {ftdGrowth.icon}
              </div>
              <p className={`text-lg font-semibold ${ftdGrowth.growth > 0 ? 'text-green-500' : ftdGrowth.growth < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {ftdGrowth.growth > 0 ? '+' : ''}{ftdGrowth.growth.toFixed(1)}%
              </p>
            </div>
            
            <div className="bg-[#212121] p-3 rounded-lg">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">Croissance des profits</span>
                {profitsGrowth.icon}
              </div>
              <p className={`text-lg font-semibold ${profitsGrowth.growth > 0 ? 'text-green-500' : profitsGrowth.growth < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {profitsGrowth.growth > 0 ? '+' : ''}{profitsGrowth.growth.toFixed(1)}%
              </p>
            </div>
          </div>
          
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={chartData}
                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                <XAxis dataKey="year" tick={{ fill: '#ECECEC' }} />
                <YAxis 
                  tick={{ fill: '#ECECEC' }}
                  tickFormatter={(value) => `${value.toLocaleString('fr-FR')} €`}
                />
                <Tooltip content={<CustomTooltip />} />
                <Legend />
                <Bar dataKey="Dépôts" fill="#8884d8" />
                <Bar dataKey="Profits" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </div>
          
          <div className="mt-6">
            <h4 className="text-md font-medium mb-3">Récapitulatif par année</h4>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-[#424242]">
                    <th className="p-2 text-left">Année</th>
                    <th className="p-2 text-right">Dépôts</th>
                    <th className="p-2 text-right">Inscriptions</th>
                    <th className="p-2 text-right">FTD</th>
                    <th className="p-2 text-right">Taux Conv.</th>
                    <th className="p-2 text-right">NGR</th>
                    <th className="p-2 text-right">Profits</th>
                  </tr>
                </thead>
                <tbody>
                  {yearlyData.map((data) => {
                    const conversionRate = data.totalSignup > 0 ? (data.totalFtd / data.totalSignup) * 100 : 0;
                    
                    return (
                      <tr key={data.year} className="border-b border-[#2a2a2a]">
                        <td className="p-2 font-medium">{data.year}</td>
                        <td className="p-2 text-right">{formatCurrency(data.totalDeposit)}</td>
                        <td className="p-2 text-right">{data.totalSignup}</td>
                        <td className="p-2 text-right">{data.totalFtd}</td>
                        <td className="p-2 text-right">{conversionRate.toFixed(1)}%</td>
                        <td className="p-2 text-right">{formatCurrency(data.totalNgr)}</td>
                        <td className="p-2 text-right">{formatCurrency(data.totalProfits)}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default YearlyComparison;

===== ReportEditor.tsx =====
Chemin : ./src/app/dashboard/admin/components/ReportEditor.tsx
// src/app/dashboard/admin/components/ReportEditor.tsx
import React, { useState } from "react";
import { Save, Download, Plus, Edit, Trash, Check, X } from "lucide-react";
import {
  CASINOS,
  METRICS,
  MONTHS,
  addCasino,
  removeCasino,
  renameCasino,
} from "../constants";
import { saveReport, generateExcel } from "../services/reportsService";
import { CasinoReport } from "../types";

interface ReportEditorProps {
  activeReport: CasinoReport;
  setActiveReport: React.Dispatch<React.SetStateAction<CasinoReport | null>>;
  setReports: React.Dispatch<React.SetStateAction<CasinoReport[]>>;
  isLoading: boolean;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
}

const ReportEditor: React.FC<ReportEditorProps> = ({
  activeReport,
  setActiveReport,
  setReports,
  isLoading,
  setIsLoading,
}) => {
  const [newCasinoName, setNewCasinoName] = useState<string>("");
  const [editingCasino, setEditingCasino] = useState<string | null>(null);
  const [editCasinoName, setEditCasinoName] = useState<string>("");
  const [casinoToDelete, setCasinoToDelete] = useState<string | null>(null);

  // Mettre à jour une valeur dans le rapport
  const handleReportChange = (
    casino: string,
    metricId: string,
    value: string
  ): void => {
    setActiveReport((prev) => {
      if (!prev) return prev;
      return {
        ...prev,
        data: {
          ...prev.data,
          [`${casino}_${metricId}`]: value,
        },
      };
    });
  };

  // Mettre à jour les métadonnées (mois/année)
  const handleMetadataChange = (
    field: string,
    value: string | number
  ): void => {
    setActiveReport((prev) => {
      if (!prev) return prev;
      return {
        ...prev,
        [field]: value,
      };
    });
  };

  // Sauvegarder le rapport
  const handleSaveReport = async (): Promise<void> => {
    try {
      setIsLoading(true);
      const savedReport = await saveReport(activeReport);

      setActiveReport(savedReport);

      // Mettre à jour la liste des rapports
      setReports((prev) => {
        if (prev.find((r) => r.id === savedReport.id)) {
          return prev.map((r) => (r.id === savedReport.id ? savedReport : r));
        } else {
          return [savedReport, ...prev];
        }
      });

      alert("Rapport sauvegardé avec succès!");
    } catch (err) {
      console.error("Erreur lors de la sauvegarde du rapport:", err);
      const errorMessage =
        err instanceof Error ? err.message : "Erreur inconnue";
      alert("Erreur lors de la sauvegarde du rapport: " + errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // Exporter en Excel
  const handleExportExcel = (): void => {
    generateExcel(activeReport);
  };

  // Fonction pour ajouter un nouveau casino
  const handleAddCasino = (): void => {
    if (newCasinoName.trim() === "") {
      alert("Veuillez entrer un nom de casino");
      return;
    }

    // Vérifier si le casino existe déjà
    const casinoName = newCasinoName.trim().toUpperCase();
    if (CASINOS.includes(casinoName)) {
      alert("Ce casino existe déjà");
      return;
    }

    // Ajouter le casino à la liste globale
    addCasino(casinoName);

    // Initialiser les données pour ce casino dans le rapport actif
    setActiveReport((prev) => {
      if (!prev) return prev;

      const updatedReport = {
        ...prev,
        data: {
          ...prev.data,
        },
      };

      // Initialiser les champs pour le nouveau casino
      updatedReport.data[`${casinoName}_TOTAL_DEPOSIT`] = "0.00";
      updatedReport.data[`${casinoName}_SIGNUP`] = "0";
      updatedReport.data[`${casinoName}_FTD`] = "0";
      updatedReport.data[`${casinoName}_NGR`] = "0.00";
      updatedReport.data[`${casinoName}_PROFITS`] = "0.00";

      return updatedReport;
    });

    // Réinitialiser le champ
    setNewCasinoName("");
  };

  // Commencer la modification d'un casino
  const startEditCasino = (casino: string): void => {
    setEditingCasino(casino);
    setEditCasinoName(casino);
  };

  // Annuler la modification d'un casino
  const cancelEditCasino = (): void => {
    setEditingCasino(null);
    setEditCasinoName("");
  };

  // Confirmer la modification d'un casino
  const confirmEditCasino = (): void => {
    if (!editingCasino) return;
    if (editCasinoName.trim() === "") {
      alert("Le nom du casino ne peut pas être vide");
      return;
    }

    const newName = editCasinoName.trim().toUpperCase();
    if (newName === editingCasino) {
      // Pas de changement
      cancelEditCasino();
      return;
    }

    if (CASINOS.includes(newName)) {
      alert("Un casino avec ce nom existe déjà");
      return;
    }

    // Mettre à jour les données du rapport
    setActiveReport((prev) => {
      if (!prev) return prev;

      const updatedData = { ...prev.data };

      // Copier les données de l'ancien casino vers le nouveau
      METRICS.forEach(({ id }) => {
        const oldKey = `${editingCasino}_${id}`;
        const newKey = `${newName}_${id}`;

        if (updatedData[oldKey] !== undefined) {
          updatedData[newKey] = updatedData[oldKey];
          delete updatedData[oldKey]; // Supprimer l'ancienne clé
        }
      });

      return {
        ...prev,
        data: updatedData,
      };
    });

    // Renommer dans la liste globale
    renameCasino(editingCasino, newName);

    // Réinitialiser
    cancelEditCasino();
  };

  // Confirmer la suppression d'un casino
  const confirmDeleteCasino = (casino: string): void => {
    if (
      window.confirm(`Êtes-vous sûr de vouloir supprimer le casino ${casino} ?`)
    ) {
      // Supprimer les données du casino du rapport
      setActiveReport((prev) => {
        if (!prev) return prev;

        const updatedData = { ...prev.data };

        // Supprimer toutes les clés associées à ce casino
        METRICS.forEach(({ id }) => {
          const key = `${casino}_${id}`;
          delete updatedData[key];
        });

        return {
          ...prev,
          data: updatedData,
        };
      });

      // Supprimer de la liste globale
      removeCasino(casino);
    }
  };

  // Calculer les totaux et ratios
  const calculateTotals = (): {
    totalDeposit: number;
    totalSignup: number;
    totalFtd: number;
    totalNgr: number;
    totalProfits: number;
  } => {
    let totalDeposit = 0;
    let totalSignup = 0;
    let totalFtd = 0;
    let totalNgr = 0;
    let totalProfits = 0;

    CASINOS.forEach((casino) => {
      totalDeposit += parseFloat(
        activeReport.data[`${casino}_TOTAL_DEPOSIT`] || "0"
      );
      totalSignup += parseInt(activeReport.data[`${casino}_SIGNUP`] || "0");
      totalFtd += parseInt(activeReport.data[`${casino}_FTD`] || "0");
      totalNgr += parseFloat(activeReport.data[`${casino}_NGR`] || "0");
      totalProfits += parseFloat(activeReport.data[`${casino}_PROFITS`] || "0");
    });

    return { totalDeposit, totalSignup, totalFtd, totalNgr, totalProfits };
  };

  return (
    <div className="bg-[#171717] p-6 rounded-lg border border-[#424242]">
      {/* En-tête et boutons d'action */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <div>
          <h2 className="text-xl font-semibold capitalize">
            Rapport {activeReport.month} {activeReport.year}
          </h2>
          <p className="text-sm text-gray-400">
            {activeReport.id
              ? "Modification du rapport"
              : "Création d'un nouveau rapport"}
          </p>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={handleExportExcel}
            className="flex items-center gap-2 px-4 py-2 bg-gray-700 text-[#ECECEC] rounded-lg hover:bg-gray-600 transition-colors"
          >
            <Download size={16} />
            Exporter en Excel
          </button>
          <button
            onClick={handleSaveReport}
            className="flex items-center gap-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 border border-[#424242]"
            disabled={isLoading}
          >
            <Save size={16} />
            {isLoading ? "Sauvegarde..." : "Sauvegarder"}
          </button>
        </div>
      </div>

      {/* Métadonnées du rapport */}
      <div className="bg-[#1a1a1a] p-4 rounded-lg mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Mois
            </label>
            <select
              value={activeReport.month}
              onChange={(e) => handleMetadataChange("month", e.target.value)}
              className="w-full p-2 rounded bg-[#212121] border border-[#424242] text-white"
            >
              {MONTHS.map((month) => (
                <option key={month} value={month}>
                  {month}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Année
            </label>
            <input
              type="number"
              value={activeReport.year}
              onChange={(e) =>
                handleMetadataChange(
                  "year",
                  parseInt(e.target.value) || new Date().getFullYear()
                )
              }
              className="w-full p-2 rounded bg-[#212121] border border-[#424242] text-white"
              min="2020"
              max="2030"
            />
          </div>
        </div>
      </div>

      {/* Gestion des casinos */}
      <div className="mb-6 bg-[#1a1a1a] p-4 rounded-lg">
        <h3 className="text-lg font-medium mb-3">Gestion des casinos</h3>

        {/* Ajouter un nouveau casino */}
        <div className="flex items-center gap-2 mb-4">
          <input
            type="text"
            value={newCasinoName}
            onChange={(e) => setNewCasinoName(e.target.value)}
            placeholder="Nom du nouveau casino"
            className="flex-1 p-2 rounded bg-[#212121] border border-[#424242] text-white"
          />
          <button
            onClick={handleAddCasino}
            className="flex items-center gap-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 border border-[#424242]"
          >
            <Plus size={16} />
            Ajouter
          </button>
        </div>

        {/* Liste des casinos avec options de modification/suppression */}
        <div className="mt-4 border border-[#424242] rounded-lg overflow-hidden">
          <table className="w-full">
            <thead className="bg-[#212121]">
              <tr>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  Nom du casino
                </th>
                <th className="text-right p-3 border-b border-[#2a2a2a]">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody>
              {CASINOS.map((casino) => (
                <tr key={casino} className="border-b border-[#2a2a2a]">
                  <td className="p-3">
                    {editingCasino === casino ? (
                      <input
                        type="text"
                        value={editCasinoName}
                        onChange={(e) => setEditCasinoName(e.target.value)}
                        className="w-full p-2 rounded bg-[#212121] border border-[#424242] text-white"
                        autoFocus
                      />
                    ) : (
                      <span className="font-medium">{casino}</span>
                    )}
                  </td>
                  <td className="p-3 text-right">
                    {editingCasino === casino ? (
                      <div className="flex items-center justify-end gap-2">
                        <button
                          onClick={confirmEditCasino}
                          className="p-1 rounded-full hover:bg-green-800/30 text-green-500"
                          title="Confirmer"
                        >
                          <Check size={16} />
                        </button>
                        <button
                          onClick={cancelEditCasino}
                          className="p-1 rounded-full hover:bg-red-800/30 text-red-500"
                          title="Annuler"
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-center justify-end gap-2">
                        <button
                          onClick={() => startEditCasino(casino)}
                          className="p-1 rounded-full hover:bg-blue-800/30 text-blue-500"
                          title="Modifier"
                        >
                          <Edit size={16} />
                        </button>
                        <button
                          onClick={() => confirmDeleteCasino(casino)}
                          className="p-1 rounded-full hover:bg-red-800/30 text-red-500"
                          title="Supprimer"
                        >
                          <Trash size={16} />
                        </button>
                      </div>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <p className="text-xs text-gray-400 mt-2">
          Les modifications apportées aux casinos affecteront tous les rapports.
        </p>
      </div>

      {/* Tableaux de données - Section 1: Dépôts, Inscriptions, FTD */}
      <div className="mb-8">
        <h3 className="text-lg font-medium mb-4">Dépôts & Conversions</h3>
        <div className="overflow-x-auto">
          <table className="w-full border border-[#2a2a2a] rounded-lg overflow-hidden">
            <thead className="bg-[#212121]">
              <tr>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  Casino
                </th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  TOTAL DEPOSIT
                </th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  SIGNUP
                </th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">FTD</th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  DEPOSIT/SIGNUP
                </th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  DEPOSIT/FTD
                </th>
              </tr>
            </thead>
            <tbody>
              {CASINOS.map((casino) => {
                // Calculer les ratios
                const deposit = parseFloat(
                  activeReport.data[`${casino}_TOTAL_DEPOSIT`] || "0"
                );
                const signup = parseInt(
                  activeReport.data[`${casino}_SIGNUP`] || "0"
                );
                const ftd = parseInt(activeReport.data[`${casino}_FTD`] || "0");
                const depositPerSignup = signup > 0 ? deposit / signup : 0;
                const depositPerFtd = ftd > 0 ? deposit / ftd : 0;

                return (
                  <tr key={casino} className="border-b border-[#2a2a2a]">
                    <td className="p-3 font-medium">{casino}</td>
                    <td className="p-3">
                      <input
                        type="text"
                        value={
                          activeReport.data[`${casino}_TOTAL_DEPOSIT`] || "0.00"
                        }
                        onChange={(e) =>
                          handleReportChange(
                            casino,
                            "TOTAL_DEPOSIT",
                            e.target.value
                          )
                        }
                        className="w-full p-2 rounded bg-[#171717] border border-[#2a2a2a] text-white"
                        placeholder="0.00"
                      />
                    </td>
                    <td className="p-3">
                      <input
                        type="number"
                        value={activeReport.data[`${casino}_SIGNUP`] || "0"}
                        onChange={(e) =>
                          handleReportChange(casino, "SIGNUP", e.target.value)
                        }
                        className="w-full p-2 rounded bg-[#171717] border border-[#2a2a2a] text-white"
                        placeholder="0"
                        min="0"
                      />
                    </td>
                    <td className="p-3">
                      <input
                        type="number"
                        value={activeReport.data[`${casino}_FTD`] || "0"}
                        onChange={(e) =>
                          handleReportChange(casino, "FTD", e.target.value)
                        }
                        className="w-full p-2 rounded bg-[#171717] border border-[#2a2a2a] text-white"
                        placeholder="0"
                        min="0"
                      />
                    </td>
                    <td className="p-3 text-gray-400">
                      {depositPerSignup.toFixed(2)} €
                    </td>
                    <td className="p-3 text-gray-400">
                      {depositPerFtd.toFixed(2)} €
                    </td>
                  </tr>
                );
              })}

              {/* Ligne de total calculé automatiquement */}
              <tr className="bg-[#1d1d1d]">
                <td className="p-3 font-bold">TOTAL</td>
                <td className="p-3 font-bold">
                  {calculateTotals().totalDeposit.toFixed(2)} €
                </td>
                <td className="p-3 font-bold">
                  {calculateTotals().totalSignup}
                </td>
                <td className="p-3 font-bold">{calculateTotals().totalFtd}</td>
                <td className="p-3 font-bold">
                  {(() => {
                    const { totalDeposit, totalSignup } = calculateTotals();
                    return totalSignup > 0
                      ? (totalDeposit / totalSignup).toFixed(2) + " €"
                      : "0.00 €";
                  })()}
                </td>
                <td className="p-3 font-bold">
                  {(() => {
                    const { totalDeposit, totalFtd } = calculateTotals();
                    return totalFtd > 0
                      ? (totalDeposit / totalFtd).toFixed(2) + " €"
                      : "0.00 €";
                  })()}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      {/* Tableaux de données - Section 2: NGR et Profits */}
      <div>
        <h3 className="text-lg font-medium mb-4">NGR & Profits</h3>
        <div className="overflow-x-auto">
          <table className="w-full border border-[#2a2a2a] rounded-lg overflow-hidden">
            <thead className="bg-[#212121]">
              <tr>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  Casino
                </th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">NGR</th>
                <th className="text-left p-3 border-b border-[#2a2a2a]">
                  PROFITS
                </th>
              </tr>
            </thead>
            <tbody>
              {CASINOS.map((casino) => (
                <tr key={casino} className="border-b border-[#2a2a2a]">
                  <td className="p-3 font-medium">{casino}</td>
                  <td className="p-3">
                    <input
                      type="text"
                      value={activeReport.data[`${casino}_NGR`] || "0.00"}
                      onChange={(e) =>
                        handleReportChange(casino, "NGR", e.target.value)
                      }
                      className="w-full p-2 rounded bg-[#171717] border border-[#2a2a2a] text-white"
                      placeholder="0.00"
                    />
                  </td>
                  <td className="p-3">
                    <input
                      type="text"
                      value={activeReport.data[`${casino}_PROFITS`] || "0.00"}
                      onChange={(e) =>
                        handleReportChange(casino, "PROFITS", e.target.value)
                      }
                      className="w-full p-2 rounded bg-[#171717] border border-[#2a2a2a] text-white"
                      placeholder="0.00"
                    />
                  </td>
                </tr>
              ))}

              {/* Ligne de total calculé automatiquement */}
              <tr className="bg-[#1d1d1d]">
                <td className="p-3 font-bold">TOTAL</td>
                <td className="p-3 font-bold">
                  {calculateTotals().totalNgr.toFixed(2)} €
                </td>
                <td className="p-3 font-bold">
                  {calculateTotals().totalProfits.toFixed(2)} €
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default ReportEditor;

===== DashboardStats.tsx =====
Chemin : ./src/app/dashboard/admin/components/DashboardStats.tsx
// src/app/dashboard/admin/components/DashboardStats.tsx
import React, { useMemo, useState } from "react";
import { 
  BarChart, 
  Bar, 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import { CasinoReport } from "../types";
import { CASINOS, MONTHS, METRICS } from "../constants";
import CasinoPerformanceCard from "./CasinoPerformanceCard";
import YearlyComparison from "./YearlyComparison";

interface DashboardStatsProps {
  reports: CasinoReport[];
}

const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

const DashboardStats: React.FC<DashboardStatsProps> = ({ reports }) => {
  const [selectedYear, setSelectedYear] = useState<number>(() => {
    // Par défaut, sélectionner l'année la plus récente disponible dans les rapports
    if (reports.length === 0) return new Date().getFullYear();
    const years = reports.map(report => report.year);
    return Math.max(...years);
  });

  const [selectedMetric, setSelectedMetric] = useState<string>("TOTAL_DEPOSIT");
  
  // Calculer les données annuelles pour la comparaison
  const yearlyData = useMemo(() => {
    const years = Array.from(new Set(reports.map(report => report.year)));
    
    return years.map(year => {
      const yearReports = reports.filter(report => report.year === year);
      let totalDeposit = 0;
      let totalSignup = 0;
      let totalFtd = 0;
      let totalNgr = 0;
      let totalProfits = 0;
      
      yearReports.forEach(report => {
        CASINOS.forEach(casino => {
          totalDeposit += parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0");
          totalSignup += parseInt(report.data[`${casino}_SIGNUP`] || "0");
          totalFtd += parseInt(report.data[`${casino}_FTD`] || "0");
          totalNgr += parseFloat(report.data[`${casino}_NGR`] || "0");
          totalProfits += parseFloat(report.data[`${casino}_PROFITS`] || "0");
        });
      });
      
      return {
        year,
        totalDeposit,
        totalSignup,
        totalFtd,
        totalNgr,
        totalProfits
      };
    }).sort((a, b) => b.year - a.year); // Trier par année décroissante
  }, [reports]);

  // Fonction pour obtenir tous les années disponibles dans les rapports
  const availableYears = useMemo(() => {
    const years = Array.from(new Set(reports.map(report => report.year)));
    return years.sort((a, b) => b - a); // Trier par ordre décroissant
  }, [reports]);

  // Filtrer les rapports pour l'année sélectionnée
  const yearReports = useMemo(() => {
    return reports.filter(report => report.year === selectedYear);
  }, [reports, selectedYear]);

  // Récupérer les données mensuelles pour chaque casino
  const monthlyData = useMemo(() => {
    // Initialiser un tableau avec tous les mois de l'année
    const data = MONTHS.map(month => ({
      month,
      monthIndex: MONTHS.indexOf(month),
      totalDeposit: 0,
      totalSignup: 0,
      totalFtd: 0,
      totalNgr: 0,
      totalProfits: 0,
      ...CASINOS.reduce((acc, casino) => {
        acc[`${casino}_TOTAL_DEPOSIT`] = 0;
        acc[`${casino}_SIGNUP`] = 0;
        acc[`${casino}_FTD`] = 0;
        acc[`${casino}_NGR`] = 0;
        acc[`${casino}_PROFITS`] = 0;
        return acc;
      }, {} as Record<string, number>)
    }));

    // Remplir avec les données réelles des rapports
    yearReports.forEach(report => {
      const monthIndex = MONTHS.indexOf(report.month);
      if (monthIndex === -1) return;

      CASINOS.forEach(casino => {
        // Pour chaque casino et chaque métrique
        METRICS.forEach(metric => {
          const key = `${casino}_${metric.id}`;
          const value = parseFloat(report.data[key] || "0");
          data[monthIndex][key] = value;

          // Ajouter également au total du mois
          if (metric.id === "TOTAL_DEPOSIT") {
            data[monthIndex].totalDeposit += value;
          } else if (metric.id === "SIGNUP") {
            data[monthIndex].totalSignup += value;
          } else if (metric.id === "FTD") {
            data[monthIndex].totalFtd += value;
          } else if (metric.id === "NGR") {
            data[monthIndex].totalNgr += value;
          } else if (metric.id === "PROFITS") {
            data[monthIndex].totalProfits += value;
          }
        });
      });
    });

    // Trier par ordre chronologique des mois
    return data.sort((a, b) => a.monthIndex - b.monthIndex);
  }, [yearReports]);

  // Calculer les totaux annuels par casino et les données mensuelles
  const annualStatsByCasino = useMemo(() => {
    const stats = CASINOS.map(casino => {
      let totalDeposit = 0;
      let totalSignup = 0;
      let totalFtd = 0;
      let totalNgr = 0;
      let totalProfits = 0;
      let monthsWithData = 0;
      
      // Pour les données mensuelles du casino
      const monthlyData = MONTHS.map(month => ({
        month,
        deposit: 0,
        signup: 0,
        ftd: 0,
        ngr: 0,
        profits: 0
      }));

      yearReports.forEach(report => {
        const deposit = parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0");
        const signup = parseInt(report.data[`${casino}_SIGNUP`] || "0");
        const ftd = parseInt(report.data[`${casino}_FTD`] || "0");
        const ngr = parseFloat(report.data[`${casino}_NGR`] || "0");
        const profits = parseFloat(report.data[`${casino}_PROFITS`] || "0");
        
        totalDeposit += deposit;
        totalSignup += signup;
        totalFtd += ftd;
        totalNgr += ngr;
        totalProfits += profits;

        if (deposit > 0) {
          monthsWithData++;
        }
        
        // Mettre à jour les données mensuelles
        const monthIndex = MONTHS.indexOf(report.month);
        if (monthIndex !== -1) {
          monthlyData[monthIndex].deposit = deposit;
          monthlyData[monthIndex].signup = signup;
          monthlyData[monthIndex].ftd = ftd;
          monthlyData[monthIndex].ngr = ngr;
          monthlyData[monthIndex].profits = profits;
        }
      });

      // Calculer les moyennes
      const avgDepositPerSignup = totalSignup > 0 ? totalDeposit / totalSignup : 0;
      const avgDepositPerFtd = totalFtd > 0 ? totalDeposit / totalFtd : 0;
      const avgMonthlyDeposit = monthsWithData > 0 ? totalDeposit / monthsWithData : 0;
      
      // Calculer le taux de conversion
      const conversionRate = totalSignup > 0 ? (totalFtd / totalSignup) * 100 : 0;

      return {
        casino,
        totalDeposit,
        totalSignup,
        totalFtd,
        totalNgr,
        totalProfits,
        avgDepositPerSignup,
        avgDepositPerFtd,
        avgMonthlyDeposit,
        conversionRate,
        monthsWithData,
        monthlyData: monthlyData.filter(m => {
          // Ne retourner que les mois pour lesquels nous avons des données
          return yearReports.some(r => r.month === m.month);
        })
      };
    });

    return stats.sort((a, b) => b.totalDeposit - a.totalDeposit);
  }, [yearReports]);

  // Calculer les totaux annuels globaux
  const annualTotals = useMemo(() => {
    let totalDeposit = 0;
    let totalSignup = 0;
    let totalFtd = 0;
    let totalNgr = 0;
    let totalProfits = 0;
    let monthsWithData = 0;
    const monthsSet = new Set();

    yearReports.forEach(report => {
      let monthHasData = false;
      
      CASINOS.forEach(casino => {
        totalDeposit += parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0");
        totalSignup += parseInt(report.data[`${casino}_SIGNUP`] || "0");
        totalFtd += parseInt(report.data[`${casino}_FTD`] || "0");
        totalNgr += parseFloat(report.data[`${casino}_NGR`] || "0");
        totalProfits += parseFloat(report.data[`${casino}_PROFITS`] || "0");
        
        if (parseFloat(report.data[`${casino}_TOTAL_DEPOSIT`] || "0") > 0) {
          monthHasData = true;
        }
      });
      
      if (monthHasData) {
        monthsSet.add(report.month);
      }
    });

    monthsWithData = monthsSet.size;

    // Calculer les moyennes
    const avgDepositPerSignup = totalSignup > 0 ? totalDeposit / totalSignup : 0;
    const avgDepositPerFtd = totalFtd > 0 ? totalDeposit / totalFtd : 0;
    const avgMonthlyDeposit = monthsWithData > 0 ? totalDeposit / monthsWithData : 0;
    
    // Calculer le taux de conversion
    const conversionRate = totalSignup > 0 ? (totalFtd / totalSignup) * 100 : 0;

    return {
      totalDeposit,
      totalSignup,
      totalFtd,
      totalNgr,
      totalProfits,
      avgDepositPerSignup,
      avgDepositPerFtd,
      avgMonthlyDeposit,
      conversionRate,
      monthsWithData
    };
  }, [yearReports]);

  // Données pour le graphique en camembert des dépôts par casino
  const depositPieData = useMemo(() => {
    return annualStatsByCasino
      .filter(stat => stat.totalDeposit > 0)
      .map(stat => ({
        name: stat.casino,
        value: stat.totalDeposit
      }));
  }, [annualStatsByCasino]);

  // Données pour le graphique en camembert des profits par casino
  const profitPieData = useMemo(() => {
    return annualStatsByCasino
      .filter(stat => stat.totalProfits !== 0)
      .map(stat => ({
        name: stat.casino,
        value: stat.totalProfits
      }));
  }, [annualStatsByCasino]);

  // Formatter pour afficher les valeurs monétaires
  const formatCurrency = (value: number) => {
    return value.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' €';
  };

  // Formatter pour le tooltip des graphiques
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-gray-800 p-3 border border-gray-700 rounded-lg shadow-lg">
          <p className="font-bold">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={`item-${index}`} style={{ color: entry.color }}>
              {entry.name}: {entry.dataKey.includes("DEPOSIT") || entry.dataKey.includes("NGR") || entry.dataKey.includes("PROFITS") 
                ? formatCurrency(entry.value) 
                : entry.value}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  // Fonction pour filtrer les données selon la métrique sélectionnée
  const getMetricData = (dataKey: string) => {
    return CASINOS.map(casino => ({
      casino,
      ...METRICS.reduce((acc, metric) => {
        if (metric.id === dataKey) {
          const total = annualStatsByCasino.find(stat => stat.casino === casino)?.[`total${dataKey.charAt(0).toUpperCase() + dataKey.slice(1).replace('_', '')}`] || 0;
          acc[metric.id] = total;
        }
        return acc;
      }, {} as Record<string, number>)
    }));
  };

  // Formate le nom de métrique pour l'affichage
  const formatMetricName = (metricId: string) => {
    const metric = METRICS.find(m => m.id === metricId);
    return metric ? metric.label : metricId;
  };

  return (
    <div className="space-y-8">
      {/* Sélecteurs */}
      <div className="flex flex-wrap gap-4 items-center">
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">Année</label>
          <select
            value={selectedYear}
            onChange={(e) => setSelectedYear(parseInt(e.target.value))}
            className="p-2 rounded bg-[#212121] border border-[#424242] text-white"
          >
            {availableYears.map(year => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">Métrique</label>
          <select
            value={selectedMetric}
            onChange={(e) => setSelectedMetric(e.target.value)}
            className="p-2 rounded bg-[#212121] border border-[#424242] text-white"
          >
            {METRICS.map(metric => (
              <option key={metric.id} value={metric.id}>{metric.label}</option>
            ))}
          </select>
        </div>
      </div>
      
      {/* Comparaison annuelle */}
      <YearlyComparison 
        years={availableYears} 
        yearlyData={yearlyData} 
      />

      {/* Cartes récapitulatives */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-sm font-medium text-gray-400 mb-2">Total Dépôts</h3>
          <p className="text-2xl font-bold">{formatCurrency(annualTotals.totalDeposit)}</p>
          <p className="text-xs text-gray-400 mt-1">
            Moyenne: {formatCurrency(annualTotals.avgMonthlyDeposit)}/mois
          </p>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-sm font-medium text-gray-400 mb-2">Inscriptions</h3>
          <p className="text-2xl font-bold">{annualTotals.totalSignup.toLocaleString()}</p>
          <p className="text-xs text-gray-400 mt-1">
            Conversion: {annualTotals.conversionRate.toFixed(1)}% en FTD
          </p>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-sm font-medium text-gray-400 mb-2">Premier Dépôt (FTD)</h3>
          <p className="text-2xl font-bold">{annualTotals.totalFtd.toLocaleString()}</p>
          <p className="text-xs text-gray-400 mt-1">
            Dépôt moyen: {formatCurrency(annualTotals.avgDepositPerFtd)}/FTD
          </p>
        </div>
        
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-sm font-medium text-gray-400 mb-2">Profits</h3>
          <p className="text-2xl font-bold">{formatCurrency(annualTotals.totalProfits)}</p>
          <p className="text-xs text-gray-400 mt-1">
            NGR: {formatCurrency(annualTotals.totalNgr)}
          </p>
        </div>
      </div>

      {/* Graphique des tendances mensuelles */}
      <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
        <h3 className="text-lg font-medium mb-4">Évolution mensuelle {selectedYear}</h3>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={monthlyData.filter(m => {
                // Ne montrer que les mois pour lesquels nous avons des données
                const hasData = yearReports.some(r => r.month === m.month);
                return hasData;
              })}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#333" />
              <XAxis 
                dataKey="month" 
                tick={{ fill: '#ECECEC' }}
              />
              <YAxis 
                tick={{ fill: '#ECECEC' }}
                tickFormatter={(value) => selectedMetric.includes("DEPOSIT") || selectedMetric.includes("NGR") || selectedMetric.includes("PROFITS") 
                  ? `${value.toLocaleString('fr-FR')} €`
                  : value.toLocaleString('fr-FR')
                }
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              {CASINOS.map((casino, index) => (
                <Line
                  key={casino}
                  type="monotone"
                  dataKey={`${casino}_${selectedMetric}`}
                  name={casino}
                  stroke={COLORS[index % COLORS.length]}
                  activeDot={{ r: 8 }}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Cartes de performance des casinos */}
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-4">Performance par casino</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {annualStatsByCasino
            .filter(stat => stat.totalDeposit > 0 || stat.totalSignup > 0) // Afficher seulement les casinos actifs
            .map(casino => (
              <CasinoPerformanceCard 
                key={casino.casino}
                casinoName={casino.casino}
                data={{
                  totalDeposit: casino.totalDeposit,
                  totalSignup: casino.totalSignup,
                  totalFtd: casino.totalFtd,
                  totalNgr: casino.totalNgr,
                  totalProfits: casino.totalProfits,
                  monthlyData: casino.monthlyData
                }}
              />
            ))}
        </div>
      </div>

      {/* Distribution par casino */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Graphique en camembert des dépôts */}
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-lg font-medium mb-4">Distribution des dépôts par casino</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={depositPieData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {depositPieData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip 
                  formatter={(value: number) => formatCurrency(value)}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Graphique en camembert des profits */}
        <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
          <h3 className="text-lg font-medium mb-4">Distribution des profits par casino</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={profitPieData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {profitPieData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip 
                  formatter={(value: number) => formatCurrency(value)}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Graphique en barres pour la métrique sélectionnée */}
      <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
        <h3 className="text-lg font-medium mb-4">{formatMetricName(selectedMetric)} par casino</h3>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={getMetricData(selectedMetric)}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#333" />
              <XAxis dataKey="casino" tick={{ fill: '#ECECEC' }} />
              <YAxis 
                tick={{ fill: '#ECECEC' }}
                tickFormatter={(value) => selectedMetric.includes("DEPOSIT") || selectedMetric.includes("NGR") || selectedMetric.includes("PROFITS") 
                  ? `${value.toLocaleString('fr-FR')} €`
                  : value.toLocaleString('fr-FR')
                }
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Bar 
                dataKey={selectedMetric} 
                name={formatMetricName(selectedMetric)}
                fill="#8884d8" 
              />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Tableau des performances par casino */}
      <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
        <h3 className="text-lg font-medium mb-4">Récapitulatif annuel par casino ({selectedYear})</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-[#424242]">
                <th className="p-3 text-left">Casino</th>
                <th className="p-3 text-right">Dépôts</th>
                <th className="p-3 text-right">Inscriptions</th>
                <th className="p-3 text-right">FTD</th>
                <th className="p-3 text-right">Taux Conv.</th>
                <th className="p-3 text-right">Dépôt/Inscr.</th>
                <th className="p-3 text-right">NGR</th>
                <th className="p-3 text-right">Profits</th>
              </tr>
            </thead>
            <tbody>
              {annualStatsByCasino.map((stat) => (
                <tr key={stat.casino} className="border-b border-[#424242]">
                  <td className="p-3 font-medium">{stat.casino}</td>
                  <td className="p-3 text-right">{formatCurrency(stat.totalDeposit)}</td>
                  <td className="p-3 text-right">{stat.totalSignup}</td>
                  <td className="p-3 text-right">{stat.totalFtd}</td>
                  <td className="p-3 text-right">{stat.conversionRate.toFixed(1)}%</td>
                  <td className="p-3 text-right">{formatCurrency(stat.avgDepositPerSignup)}</td>
                  <td className="p-3 text-right">{formatCurrency(stat.totalNgr)}</td>
                  <td className="p-3 text-right">{formatCurrency(stat.totalProfits)}</td>
                </tr>
              ))}
              {/* Ligne de total */}
              <tr className="bg-[#1d1d1d] font-bold">
                <td className="p-3">TOTAL</td>
                <td className="p-3 text-right">{formatCurrency(annualTotals.totalDeposit)}</td>
                <td className="p-3 text-right">{annualTotals.totalSignup}</td>
                <td className="p-3 text-right">{annualTotals.totalFtd}</td>
                <td className="p-3 text-right">{annualTotals.conversionRate.toFixed(1)}%</td>
                <td className="p-3 text-right">{formatCurrency(annualTotals.avgDepositPerSignup)}</td>
                <td className="p-3 text-right">{formatCurrency(annualTotals.totalNgr)}</td>
                <td className="p-3 text-right">{formatCurrency(annualTotals.totalProfits)}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default DashboardStats;

===== CasinoPerformanceCard.tsx =====
Chemin : ./src/app/dashboard/admin/components/CasinoPerformanceCard.tsx
// src/app/dashboard/admin/components/CasinoPerformanceCard.tsx
import React from "react";
import { LineChart, Line, XAxis, YAxis, ResponsiveContainer, Tooltip } from "recharts";
import { TrendingUp, TrendingDown, Minus } from "lucide-react";

interface CasinoPerformanceCardProps {
  casinoName: string;
  data: {
    totalDeposit: number;
    totalSignup: number;
    totalFtd: number;
    totalNgr: number;
    totalProfits: number;
    monthlyData: {
      month: string;
      deposit: number;
      signup: number;
      ftd: number;
      ngr: number;
      profits: number;
    }[];
  };
}

const CasinoPerformanceCard: React.FC<CasinoPerformanceCardProps> = ({ casinoName, data }) => {
  // Calculer les tendances (comparaison entre les deux derniers mois)
  const calculateTrend = (metricKey: string) => {
    if (data.monthlyData.length < 2) return { trend: 0, icon: <Minus size={16} /> };
    
    const sortedData = [...data.monthlyData].sort((a, b) => {
      const monthsOrder = ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"];
      return monthsOrder.indexOf(a.month) - monthsOrder.indexOf(b.month);
    });
    
    const lastMonth = sortedData[sortedData.length - 1];
    const previousMonth = sortedData[sortedData.length - 2];
    
    // @ts-ignore - Dynamic property access
    const currentValue = lastMonth[metricKey] || 0;
    // @ts-ignore - Dynamic property access
    const previousValue = previousMonth[metricKey] || 0;
    
    if (previousValue === 0) return { trend: 0, icon: <Minus size={16} /> };
    
    const trendPercentage = ((currentValue - previousValue) / previousValue) * 100;
    
    if (trendPercentage > 0) {
      return { 
        trend: trendPercentage, 
        icon: <TrendingUp size={16} className="text-green-500" /> 
      };
    } else if (trendPercentage < 0) {
      return { 
        trend: trendPercentage, 
        icon: <TrendingDown size={16} className="text-red-500" /> 
      };
    } else {
      return { trend: 0, icon: <Minus size={16} /> };
    }
  };

  const depositTrend = calculateTrend("deposit");
  const signupTrend = calculateTrend("signup");
  const ftdTrend = calculateTrend("ftd");
  const profitsTrend = calculateTrend("profits");
  
  // Formatter pour afficher les valeurs monétaires
  const formatCurrency = (value: number) => {
    return value.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' €';
  };

  // Formatage pour le pourcentage de conversion
  const conversionRate = data.totalSignup > 0 ? (data.totalFtd / data.totalSignup) * 100 : 0;

  return (
    <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#424242]">
      <h3 className="text-xl font-medium mb-3">{casinoName}</h3>
      
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-gray-400">Total Dépôts</span>
            <div className="flex items-center gap-1">
              {depositTrend.icon}
              <span className={`text-xs ${depositTrend.trend > 0 ? 'text-green-500' : depositTrend.trend < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {Math.abs(depositTrend.trend).toFixed(1)}%
              </span>
            </div>
          </div>
          <p className="text-lg font-semibold">{formatCurrency(data.totalDeposit)}</p>
        </div>
        
        <div>
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-gray-400">Profits</span>
            <div className="flex items-center gap-1">
              {profitsTrend.icon}
              <span className={`text-xs ${profitsTrend.trend > 0 ? 'text-green-500' : profitsTrend.trend < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {Math.abs(profitsTrend.trend).toFixed(1)}%
              </span>
            </div>
          </div>
          <p className="text-lg font-semibold">{formatCurrency(data.totalProfits)}</p>
        </div>
        
        <div>
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-gray-400">Inscriptions</span>
            <div className="flex items-center gap-1">
              {signupTrend.icon}
              <span className={`text-xs ${signupTrend.trend > 0 ? 'text-green-500' : signupTrend.trend < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {Math.abs(signupTrend.trend).toFixed(1)}%
              </span>
            </div>
          </div>
          <p className="text-lg font-semibold">{data.totalSignup}</p>
        </div>
        
        <div>
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-gray-400">FTD</span>
            <div className="flex items-center gap-1">
              {ftdTrend.icon}
              <span className={`text-xs ${ftdTrend.trend > 0 ? 'text-green-500' : ftdTrend.trend < 0 ? 'text-red-500' : 'text-gray-400'}`}>
                {Math.abs(ftdTrend.trend).toFixed(1)}%
              </span>
            </div>
          </div>
          <p className="text-lg font-semibold">{data.totalFtd}</p>
          <p className="text-xs text-gray-400">{conversionRate.toFixed(1)}% de conversion</p>
        </div>
      </div>
      
      {/* Statistiques supplémentaires */}
      <div className="grid grid-cols-3 gap-2 mb-4 border-t border-[#333] pt-3">
        <div>
          <p className="text-xs text-gray-400">Dépôt/Inscr.</p>
          <p className="text-sm">
            {formatCurrency(data.totalSignup > 0 ? data.totalDeposit / data.totalSignup : 0)}
          </p>
        </div>
        <div>
          <p className="text-xs text-gray-400">Dépôt/FTD</p>
          <p className="text-sm">
            {formatCurrency(data.totalFtd > 0 ? data.totalDeposit / data.totalFtd : 0)}
          </p>
        </div>
        <div>
          <p className="text-xs text-gray-400">NGR</p>
          <p className="text-sm">{formatCurrency(data.totalNgr)}</p>
        </div>
      </div>
      
      {/* Mini graphique des dépôts et profits */}
      <div className="h-24 mt-4">
        <p className="text-xs text-gray-400 mb-1">Évolution mensuelle</p>
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={data.monthlyData}>
            <XAxis 
              dataKey="month" 
              tick={false}
              axisLine={false}
            />
            <YAxis 
              hide={true}
            />
            <Tooltip
              formatter={(value: number, name: string) => {
                if (name === "deposit" || name === "profits" || name === "ngr") {
                  return [formatCurrency(value), name === "deposit" ? "Dépôts" : name === "profits" ? "Profits" : "NGR"];
                }
                return [value, name === "signup" ? "Inscriptions" : "FTD"];
              }}
              labelFormatter={(label) => `${label}`}
              contentStyle={{ backgroundColor: '#333', borderColor: '#555' }}
            />
            <Line 
              type="monotone" 
              dataKey="deposit" 
              stroke="#8884d8" 
              strokeWidth={2}
              dot={false}
              name="deposit"
            />
            <Line 
              type="monotone" 
              dataKey="profits" 
              stroke="#82ca9d" 
              strokeWidth={2}
              dot={false}
              name="profits"
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
      
      {/* Ratio Performance */}
      <div className="mt-3 text-center border-t border-[#333] pt-3">
        <p className="text-xs text-gray-400 mb-1">
          Ratio Profits/Dépôts: 
          <span className="ml-1 font-semibold text-sm">
            {data.totalDeposit > 0 ? ((data.totalProfits / data.totalDeposit) * 100).toFixed(1) + '%' : '0%'}
          </span>
        </p>
      </div>
    </div>
  );
};

export default CasinoPerformanceCard;

