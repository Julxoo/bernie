===== tailwind.config.ts =====
Chemin : ./tailwind.config.ts
import type { Config } from "tailwindcss";

const config = {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")]
} satisfies Config;

export default config;


===== postcss.config.js =====
Chemin : ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};


===== tsconfig.json =====
Chemin : ./tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "next-env.d.ts",
    "types/**/*.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "files_content.txt"
  ]
}


===== next.config.mjs =====
Chemin : ./next.config.mjs
const nextConfig = {
  reactStrictMode: true,
};

export default nextConfig;


===== .eslintrc.js =====
Chemin : ./.eslintrc.js
module.exports = {
  extends: ["next/core-web-vitals", "next/typescript"],
};


===== listfiles.py =====
Chemin : ./listfiles.py
import os

def get_files_content(directory, excluded_files):
    files_data = []
    
    for root, dirs, files in os.walk(directory):
        # Exclure certains dossiers pour éviter de parcourir des répertoires non désirés
        dirs[:] = [d for d in dirs if os.path.join(root, d) not in excluded_files]
        
        for file in files:
            file_path = os.path.join(root, file)
            # Si le chemin complet du fichier est dans la liste d'exclusion, on passe au suivant
            if file_path in excluded_files:
                continue
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                files_data.append({"name": file, "path": file_path, "content": content})
            except Exception as e:
                print(f"Erreur lors de la lecture du fichier {file_path}: {e}")
    
    return files_data

def save_to_text(data, output_file):
    with open(output_file, 'w', encoding='utf-8') as f:
        for file in data:
            f.write(f"===== {file['name']} =====\n")
            f.write(f"Chemin : {file['path']}\n")
            f.write(file['content'] + "\n\n")

if __name__ == "__main__":
    directory = "./"
    output_file = "files_content.txt"
    
    excluded_files = {
        os.path.join(directory, ".env.local"),
        os.path.join(directory, ".gitignore"),
        os.path.join(directory, "eslint.config.mjs"),
        os.path.join(directory, "next-env.d.ts"),
        os.path.join(directory, "next.config.ts"),
        os.path.join(directory, "package-lock.json"),
        os.path.join(directory, "package.json"),
        os.path.join(directory, "postcss.config.mjs"),
        os.path.join(directory, "README.md"),
        os.path.join(directory, ".next"),
        os.path.join(directory, "node_modules"),
        os.path.join(directory, "files_content.txt")  # Ajout pour éviter de relire le fichier de sortie
    }
    
    if os.path.exists(directory):
        files_content = get_files_content(directory, excluded_files)
        save_to_text(files_content, output_file)
        print(f"Les données ont été enregistrées dans {output_file}")
    else:
        print(f"Le dossier {directory} n'existe pas.")


===== components.json =====
Chemin : ./components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

===== middleware.ts =====
Chemin : ./src/middleware.ts
// middleware.ts
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(req: NextRequest) {
  const token = req.cookies.get("sb:token");
  if (!token) {
    return NextResponse.redirect(new URL("/login", req.url));
  }
  return NextResponse.next();
}

export const config = {
  matcher: ["/dashboard/:path*", "/api/:path*"],
};


===== SupabaseContext.ts =====
Chemin : ./src/lib/SupabaseContext.ts
// src/lib/SupabaseContext.tsx
import { createContext } from "react";
import { SupabaseClient } from "@supabase/supabase-js";

export const SupabaseContext = createContext<SupabaseClient | null>(null);


===== utils.ts =====
Chemin : ./src/lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


===== useEditable.ts =====
Chemin : ./src/hooks/useEditable.ts
import { useState, useRef, useEffect } from "react";

export const useEditable = (
  initialValue: string,
  onSave: (value: string) => Promise<void>,
  delay = 500
) => {
  const [editing, setEditing] = useState(false);
  const [value, setValue] = useState(initialValue);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!editing) {
      setValue(initialValue);
    }
  }, [initialValue, editing]);

  const handleChange = (newVal: string) => {
    setValue(newVal);
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(async () => {
      await onSave(newVal);
    }, delay);
  };

  const handleBlur = async () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    await onSave(value);
    setEditing(false);
  };

  return {
    editing,
    value,
    setEditing,
    handleChange,
    handleBlur,
  };
};


===== urlUtils.ts =====
Chemin : ./src/utils/urlUtils.ts
export const isUrl = (str: string): boolean => {
    const pattern = new RegExp(
      "^(https?:\\/\\/)?" + // protocole
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // nom de domaine
        "((\\d{1,3}\\.){3}\\d{1,3}))" + // ou adresse IP
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port et chemin
        "(\\?[;&a-z\\d%_.~+=-]*)?" + // chaîne de requête
        "(\\#[-a-z\\d_]*)?$", // fragment
      "i"
    );
    return pattern.test(str);
  };
  

===== supabaseClient.ts =====
Chemin : ./src/utils/supabaseClient.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey) 

===== videoService.ts =====
Chemin : ./src/services/videoService.ts
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Video } from "../types/video";

const supabase = createClientComponentClient();

// Interface décrivant la structure attendue des données retournées par Supabase
interface VideoDetailsResult {
  id: number;
  identifier: number;
  title: string;
  production_status: string;
  created_at: string;
  updated_at: string;
  category_id: number;
  video_details: Array<{
    title: string;
    instructions_miniature: string;
    rush_link: string;
    video_link: string;
    miniature_link: string;
    production_status: string;
    description: string;
  }>;
  // On accepte que Supabase renvoie soit un tableau, soit un objet unique pour la catégorie
  video_categories: { identifier: string }[] | { identifier: string } | null;
}

/**
 * Met à jour un champ donné dans les tables "category_videos" et "video_details".
 * @param id - L'ID de la vidéo.
 * @param field - Le nom du champ à mettre à jour.
 * @param value - La nouvelle valeur.
 */
const updateFieldAcrossTables = async (
  id: string,
  field: string,
  value: string
): Promise<void> => {
  const { error: errorVideo } = await supabase
    .from("category_videos")
    .update({ [field]: value })
    .eq("id", id);
  const { error: errorDetails } = await supabase
    .from("video_details")
    .update({ [field]: value })
    .eq("category_video_id", id);

  if (errorVideo || errorDetails) {
    throw new Error(`Erreur lors de la mise à jour du champ "${field}"`);
  }
};

/**
 * Récupère les détails d'une vidéo et construit le fullIdentifier sous la forme "A-1".
 * On récupère également category_id et production_status pour satisfaire l'interface Video.
 */
export const fetchVideoDetails = async (id: string): Promise<Video> => {
  const { data, error } = await supabase
    .from("category_videos")
    .select(
      `
      id,
      identifier,
      title,
      production_status,
      created_at,
      updated_at,
      category_id,
      video_details (
        title,
        instructions_miniature,
        rush_link,
        video_link,
        miniature_link,
        production_status,
        description
      ),
      video_categories!fk_category (identifier)
    `
    )
    .eq("id", id)
    .single();

  if (error) {
    console.error("Erreur Supabase dans fetchVideoDetails :", error);
    throw error;
  }
  if (!data) {
    throw new Error("Détails de la vidéo introuvables");
  }

  const parsedData = data as unknown as VideoDetailsResult;
  const { video_details, ...rest } = parsedData;

  // Gestion de video_categories : tableau ou objet unique
  let categoryIdentifier = "";
  if (parsedData.video_categories) {
    if (Array.isArray(parsedData.video_categories)) {
      categoryIdentifier =
        parsedData.video_categories.length > 0
          ? parsedData.video_categories[0].identifier
          : "";
    } else {
      categoryIdentifier = parsedData.video_categories.identifier;
    }
  }
  const numericIdentifier = parsedData.identifier || 0;
  const fullIdentifier = `${categoryIdentifier}-${numericIdentifier}`;

  return {
    ...rest,
    ...(video_details ? video_details[0] : {}),
    fullIdentifier,
    category_id: rest.category_id,
    status: rest.production_status,
  } as Video;
};

/**
 * Met à jour le titre d'une vidéo et enregistre l'action dans user_activity.
 * @param userId - L'ID de l'utilisateur effectuant l'action.
 * @param id - L'ID de la vidéo.
 * @param newTitle - Le nouveau titre.
 */
export const updateTitle = async (
  userId: string,
  id: string,
  newTitle: string
): Promise<void> => {
  // 1. Met à jour le titre dans les deux tables
  await updateFieldAcrossTables(id, "title", newTitle);

  // 2. Enregistre un log dans la table user_activity
  const detailsText = `La vidéo ID=${id} a un nouveau titre: "${newTitle}"`;
  const { error: insertError } = await supabase
    .from("user_activity")
    .insert([
      {
        user_id: userId,
        action_type: "update_title",
        details: detailsText,
      },
    ]);
  if (insertError) {
    console.error("Impossible d'insérer le log:", insertError);
  }
};

export const updateDescription = async (
  id: string,
  newDescription: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ description: newDescription })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour de la description");
  }
};

export const updateInstructions = async (
  id: string,
  newInstructions: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ instructions_miniature: newInstructions })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour des instructions");
  }
};

export const updateLink = async (
  id: string,
  field: string,
  value: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ [field]: value })
    .eq("category_video_id", id);
  if (error) {
    throw new Error(`Erreur lors de la mise à jour du lien "${field}"`);
  }
};

export const updateStatus = async (
  id: string,
  newStatus: string
): Promise<void> => {
  await updateFieldAcrossTables(id, "production_status", newStatus);
};


===== Sidebar.tsx =====
Chemin : ./src/components/Sidebar.tsx
// Exemple dans Sidebar.tsx
"use client";

import Link from "next/link";
import { useUser } from "@supabase/auth-helpers-react"; // <-- Import correct
import { usePathname } from "next/navigation";
import { 
  Grid, 
  BarChart2, 
  List, 
  Settings, 
  User, 
  LogOut,
  X 
} from "lucide-react";

interface SidebarProps {
  isOpen: boolean;
  onToggle: () => void;
  onSignOut: () => void;
}

export default function Sidebar({ isOpen, onToggle, onSignOut }: SidebarProps) {
  const user = useUser();
  const pathname = usePathname();

  const handleLinkClick = (href: string) => {
    if (pathname === href) return;
    if (typeof window !== "undefined" && window.innerWidth < 768) {
      onToggle();
    }
  };

  const isActiveLink = (href: string) => pathname === href;

  return (
    <>
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden" 
          onClick={onToggle}
        />
      )}
      <aside
        className={`
          fixed top-0 left-0 z-40 w-64 h-screen bg-[#171717] border-r border-[#424242]
          transform transition-transform duration-300 ease-in-out
          ${isOpen ? "translate-x-0" : "-translate-x-full"}
          md:translate-x-0
        `}
      >
        <div className="flex flex-col h-full">
          <div className="p-4 border-b border-[#424242] flex items-center justify-between">
            <span className="text-[#ECECEC] font-medium">Dashboard</span>
            <button 
              onClick={onToggle}
              className="md:hidden text-[#ECECEC]"
              aria-label="Fermer le menu"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          <nav className="flex-1 overflow-y-auto">
            <ul className="space-y-1 py-2">
              <li>
                <Link
                  href="/dashboard"
                  className={`
                    flex items-center space-x-3 px-4 py-2
                    ${isActiveLink("/dashboard") ? "bg-[#252525] text-white" : "text-[#ECECEC] hover:bg-[#222222]"}
                  `}
                  onClick={() => handleLinkClick("/dashboard")}
                >
                  <Grid className="w-5 h-5" />
                  <span>Catégories</span>
                </Link>
              </li>
              {/* ... autres liens */}
              {user && user.role === "admin" && (
                <li>
                  <Link
                    href="/dashboard/admin"
                    className={`
                      flex items-center space-x-3 px-4 py-2
                      ${isActiveLink("/dashboard/admin") ? "bg-[#252525] text-white" : "text-[#ECECEC] hover:bg-[#222222]"}
                    `}
                    onClick={() => handleLinkClick("/dashboard/admin")}
                  >
                    <Settings className="w-5 h-5" />
                    <span>Administration</span>
                  </Link>
                </li>
              )}
            </ul>
            {/* ... */}
          </nav>
          <div className="p-4 border-t border-[#424242] mt-auto">
            <button
              onClick={onSignOut}
              className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-[#252525] hover:bg-[#333333] rounded-lg text-[#ECECEC]"
            >
              <LogOut className="w-4 h-4" />
              <span>Déconnexion</span>
            </button>
          </div>
        </div>
      </aside>
    </>
  );
}


===== EditableItem.tsx =====
Chemin : ./src/components/EditableItem.tsx
"use client";

import { useState } from "react";
import { EditableField } from "./EditableField";
import { Copy } from "react-feather";

interface EditableItemProps {
  label: string;
  value: string;
  placeholder: string;
  onSave: (newValue: string) => Promise<void>;
  inputType?: "text" | "textarea";
  isLink?: boolean;
  copyable?: boolean; // Nouvelle prop pour activer la copie
}

export default function EditableItem({
  label,
  value,
  placeholder,
  onSave,
  inputType = "text",
  copyable = false,
}: EditableItemProps) {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(value);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Erreur lors de la copie", err);
    }
  };

  return (
    <div className="flex flex-col sm:flex-row sm:items-start gap-2">
      {label && (
        <span className="text-gray-400 min-w-[100px]">{label}</span>
      )}
      <div className="w-full sm:ml-4 flex items-center gap-2">
        <EditableField
          value={value}
          onSave={onSave}
          inputType={inputType}
          placeholder={placeholder}
          autoFocus
        />
        {copyable && (
          <button
            onClick={handleCopy}
            className="p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            title="Copier"
          >
            <Copy size={16} />
            {copied && <span className="text-xs ml-1">Copié</span>}
          </button>
        )}
      </div>
    </div>
  );
}


===== EditableField.tsx =====
Chemin : ./src/components/EditableField.tsx
"use client";

import { useEditable } from "../hooks/useEditable";
import { isUrl } from "../utils/urlUtils";
import React from "react";
import { ExternalLink } from "react-feather";

interface EditableFieldProps {
  value: string;
  onSave: (newValue: string) => Promise<void>;
  inputType?: "text" | "textarea";
  placeholder?: string;
  className?: string;
  autoFocus?: boolean;
}

export function EditableField({
  value,
  onSave,
  inputType = "text",
  placeholder = "",
  className = "",
  autoFocus = false,
}: EditableFieldProps) {
  const {
    editing,
    value: localValue,
    setEditing,
    handleChange,
    handleBlur,
  } = useEditable(value, onSave);

  const inputStyles =
    "bg-transparent border border-[#424242] focus:border-[#ECECEC] outline-none rounded w-full";

  const handleKeyDown = (
    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    // Pour les inputs : on capture "Enter" (et pour textarea, si Shift n'est pas pressé)
    if (e.key === "Enter" && (inputType !== "textarea" || !e.shiftKey)) {
      e.preventDefault();
      handleBlur();
    }
  };

  if (editing) {
    return (
      <div className={className}>
        {inputType === "textarea" ? (
          <textarea
            value={localValue}
            onChange={(e) => handleChange(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={`${inputStyles} p-2`}
            rows={4}
            autoFocus={autoFocus}
            onBlur={handleBlur}
            enterKeyHint="done"
          />
        ) : (
          <input
            type="text"
            value={localValue}
            onChange={(e) => handleChange(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={`${inputStyles} px-2 py-1`}
            autoFocus={autoFocus}
            onBlur={handleBlur}
            enterKeyHint="done"
          />
        )}
      </div>
    );
  }

  return (
    <div className={className}>
      {value ? (
        isUrl(value) ? (
          <div className="flex items-center gap-2">
            <span
              onClick={() => setEditing(true)}
              className="cursor-pointer hover:text-gray-300 p-1 rounded hover:bg-[#2a2a2a] transition-colors break-all flex-1"
            >
              {value}
            </span>
            <a
              href={value}
              target="_blank"
              rel="noreferrer"
              className="cursor-pointer hover:underline text-blue-400"
              onClick={(e) => e.stopPropagation()}
              aria-label="Ouvrir le lien"
            >
              <ExternalLink size={16} />
            </a>
          </div>
        ) : (
          <span
            onClick={() => setEditing(true)}
            className="cursor-pointer hover:text-gray-300 p-1 rounded hover:bg-[#2a2a2a] transition-colors break-all"
          >
            {value}
          </span>
        )
      ) : (
        <span
          onClick={() => setEditing(true)}
          className="cursor-pointer italic p-1 rounded hover:bg-[#2a2a2a] transition-colors"
        >
          {placeholder}
        </span>
      )}
    </div>
  );
}


===== CreateVideoModal.tsx =====
Chemin : ./src/components/CreateVideoModal.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateVideoModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  categoryId: string; // ID numérique de la catégorie
  categoryIdentifier: string; // Par ex. "A"
  categoryTitle: string; // Par ex. "Vidéo Grattage/Casino"
}

export default function CreateVideoModal({
  isOpen,
  onClose,
  onSuccess,
  categoryId,
  categoryIdentifier,
  categoryTitle,
}: CreateVideoModalProps) {
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // Identifiant numérique de la vidéo (ex. 1, 2, 3...)
  const [videoIdentifier, setVideoIdentifier] = useState<number>(0);

  // Titre de la vidéo
  const [videoTitle, setVideoTitle] = useState("");

  const supabase = createClientComponentClient();

  const fetchNextVideoIdentifier = useCallback(async () => {
    try {
      setError("");

      // Récupérer le plus grand "identifier" existant dans la catégorie
      const { data, error } = await supabase
        .from("category_videos")
        .select("identifier")
        .eq("category_id", Number(categoryId))
        .order("identifier", { ascending: false })
        .limit(1);

      if (error) throw error;

      // S'il n'y a aucune vidéo, on part de 0
      const lastIdentifier = data && data.length > 0 ? data[0].identifier : 0;
      const nextIdentifier = lastIdentifier + 1;
      setVideoIdentifier(nextIdentifier);
    } catch (err: unknown) {
      console.error(
        "Erreur lors de la récupération de l'identifiant vidéo:",
        err
      );
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError(
          "Erreur inconnue lors de la récupération de l'identifiant vidéo"
        );
      }
    }
  }, [supabase, categoryId]);

  useEffect(() => {
    if (isOpen) {
      fetchNextVideoIdentifier();
      setVideoTitle(""); // reset du champ titre
    }
  }, [isOpen, fetchNextVideoIdentifier]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      if (!videoTitle.trim()) {
        throw new Error("Le titre de la vidéo ne peut être vide.");
      }
      if (videoIdentifier <= 0) {
        throw new Error("L'identifiant de la vidéo est invalide.");
      }

      // Exemple de statut par défaut
      const defaultProductionStatus = "À monter";

      // 1. Insertion dans category_videos
      const { data: inserted, error: insertError } = await supabase
        .from("category_videos")
        .insert([
          {
            category_id: Number(categoryId),
            identifier: videoIdentifier, // On insère l'identifiant numérique
            title: videoTitle,
            production_status: defaultProductionStatus,
          },
        ])
        .select()
        .single();

      if (insertError) throw insertError;

      // 2. Insertion dans video_details (optionnel, si vous l'utilisez)
      const { error: detailsError } = await supabase
        .from("video_details")
        .insert([
          {
            category_video_id: inserted.id,
            title: videoTitle,
            production_status: defaultProductionStatus,
          },
        ]);

      if (detailsError) throw detailsError;

      onSuccess();
      onClose();
    } catch (err: unknown) {
      console.error("Erreur lors de la création de la vidéo :", err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Erreur inconnue lors de la création de la vidéo");
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  // Identifiant complet ex. "A-1"
  const fullIdentifier = `${categoryIdentifier}-${videoIdentifier}`;

  return (
    <div
      className="
        fixed inset-0 bg-black bg-opacity-50
        flex items-center justify-center z-50
        px-4 py-4
      "
    >
      <div
        className="
          bg-[#171717]
          p-4 sm:p-8
          rounded-lg
          w-full max-w-md
          border border-[#424242]
        "
      >
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">
          Nouvelle vidéo
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          {/* Catégorie (en lecture seule) */}
          <div className="mb-4">
            <label
              htmlFor="categoryName"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Catégorie
            </label>
            <input
              id="categoryName"
              type="text"
              value={categoryTitle}
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                cursor-not-allowed opacity-50
              "
              readOnly
              disabled
            />
          </div>

          {/* Identifiant complet (lecture seule, non modifiable) */}
          <div className="mb-4">
            <label className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Identifiant complet
            </label>
            <div
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                cursor-not-allowed opacity-50
              "
            >
              {fullIdentifier}
            </div>
            <p className="text-xs text-gray-400 mt-1">
              Cet identifiant est généré automatiquement.
            </p>
          </div>

          {/* Titre de la vidéo */}
          <div className="mb-4">
            <label
              htmlFor="videoTitle"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Titre de la vidéo
            </label>
            <input
              id="videoTitle"
              type="text"
              value={videoTitle}
              onChange={(e) => setVideoTitle(e.target.value)}
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                focus:outline-none focus:border-[#ECECEC]
              "
              placeholder="Saisissez un titre pour la vidéo..."
              required
              disabled={isLoading}
            />
          </div>

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="
                px-4 py-2 text-[#ECECEC] rounded-lg
                hover:bg-[#212121] transition-colors duration-200
              "
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="
                px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg
                hover:bg-[#171717] transition-colors duration-200
                border border-[#424242] disabled:opacity-50
              "
              disabled={isLoading}
            >
              {isLoading ? "Ajout en cours..." : "Ajouter"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


===== BottomNav.tsx =====
Chemin : ./src/components/BottomNav.tsx
"use client";

import Link from "next/link";
import { useUser } from "@supabase/auth-helpers-react"; // Remplacer useSession par useUser
import { usePathname } from "next/navigation";
import { 
  Grid,
  BarChart2,
  List,
  Settings,
  User,
  LogOut
} from "lucide-react";

interface BottomNavProps {
  onSignOut: () => void;
}

export default function BottomNav({ onSignOut }: BottomNavProps) {
  const user = useUser(); // Utilisation directe
  const pathname = usePathname();

  const isActiveLink = (href: string) => pathname === href;

  return (
    <nav
      className="
        fixed bottom-0 left-0 right-0 z-40 
        bg-[#171717] border-t border-[#424242]
        flex justify-between items-center 
        px-2
        h-16   /* Hauteur fixe de la bottomNav */
        md:hidden
      "
    >
      <Link
        href="/dashboard"
        className={`flex flex-col items-center justify-center flex-1 ${
          isActiveLink("/dashboard") ? "text-white" : "text-[#a1a1a1]"
        }`}
      >
        <Grid className="w-5 h-5" />
        <span className="text-xs">Catégories</span>
      </Link>

      <Link
        href="/dashboard/stats"
        className={`flex flex-col items-center justify-center flex-1 ${
          isActiveLink("/dashboard/stats") ? "text-white" : "text-[#a1a1a1]"
        }`}
      >
        <BarChart2 className="w-5 h-5" />
        <span className="text-xs">Stats</span>
      </Link>

      <Link
        href="/dashboard/priorities"
        className={`flex flex-col items-center justify-center flex-1 ${
          isActiveLink("/dashboard/priorities") ? "text-white" : "text-[#a1a1a1]"
        }`}
      >
        <List className="w-5 h-5" />
        <span className="text-xs">Priorités</span>
      </Link>

      {user && user.role === "admin" && (
        <Link
          href="/dashboard/admin"
          className={`flex flex-col items-center justify-center flex-1 ${
            isActiveLink("/dashboard/admin") ? "text-white" : "text-[#a1a1a1]"
          }`}
        >
          <Settings className="w-5 h-5" />
          <span className="text-xs">Admin</span>
        </Link>
      )}

      <Link
        href="/dashboard/profile"
        className={`flex flex-col items-center justify-center flex-1 ${
          isActiveLink("/dashboard/profile") ? "text-white" : "text-[#a1a1a1]"
        }`}
      >
        <User className="w-5 h-5" />
        <span className="text-xs">Profil</span>
      </Link>

      <button
        onClick={onSignOut}
        className="flex flex-col items-center justify-center flex-1 text-[#a1a1a1]"
      >
        <LogOut className="w-5 h-5" />
        <span className="text-xs">Quitter</span>
      </button>
    </nav>
  );
}


===== Header.tsx =====
Chemin : ./src/components/Header.tsx
"use client";

import { useRouter } from "next/navigation";
import { MenuIcon, XIcon } from "lucide-react";

interface HeaderProps {
  title?: string;
  isSidebarOpen?: boolean;
  onToggleSidebar?: () => void;
}

export default function Header({
  title = "Dashboard",
  isSidebarOpen = false,
  onToggleSidebar,
}: HeaderProps) {
  const router = useRouter();

  return (
    <header className="flex items-center justify-between p-4 bg-[#171717] border-b border-[#424242]">
      <div className="flex items-center gap-2">
        {onToggleSidebar && (
          <button onClick={onToggleSidebar} className="md:hidden focus:outline-none">
            {isSidebarOpen ? <XIcon size={24} /> : <MenuIcon size={24} />}
          </button>
        )}
        <h1 className="text-xl font-semibold text-[#ECECEC]">{title}</h1>
      </div>
      <nav>
        <button
          onClick={() => router.push("/dashboard")}
          className="text-[#ECECEC] hover:text-gray-300 transition-colors"
        >
          Accueil
        </button>
      </nav>
    </header>
  );
}


===== GlobalWrapper.tsx =====
Chemin : ./src/components/GlobalWrapper.tsx
"use client";

import { useState } from "react";
import { usePathname, useRouter } from "next/navigation";
import { signOut } from "next-auth/react";
import Sidebar from "./Sidebar";
import BottomNav from "./BottomNav";

interface GlobalWrapperProps {
  children: React.ReactNode;
}

export default function GlobalWrapper({ children }: GlobalWrapperProps) {
  const pathname = usePathname();
  const router = useRouter();

  // Ne pas afficher la sidebar/bottomNav sur la page de login
  const isLoginPage = pathname.startsWith("/login");

  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  const handleToggleSidebar = () => setIsSidebarOpen((prev) => !prev);
  const handleSignOut = async () => {
    await signOut({ redirect: false });
    router.push("/login");
  };

  if (isLoginPage) {
    return <>{children}</>;
  }

  return (
    <div className="relative min-h-screen bg-[#212121]">
      {/* Barre latérale sur desktop */}
      <div className="hidden md:block">
        <Sidebar
          isOpen={isSidebarOpen}
          onToggle={handleToggleSidebar}
          onSignOut={handleSignOut}
        />
      </div>

      {/* Bottom navigation sur mobile */}
      <div className="md:hidden">
        <BottomNav onSignOut={handleSignOut} />
      </div>

      {/* Contenu principal */}
      <main
        className={`
          pt-16   /* top padding (pour le header ou autre, si nécessaire) */
          md:pt-4 md:p-8
          text-[#ECECEC] overflow-y-auto
          transition-all duration-300
          ${isSidebarOpen ? "md:ml-64" : ""}
          /* IMPORTANT : padding-bottom pour ne pas que le content soit caché par la bottom nav en mobile */
          pb-16   /* sur mobile */
          md:pb-0 /* sur desktop, pas besoin */
        `}
      >
        {children}
      </main>
    </div>
  );
}


===== ErrorState.tsx =====
Chemin : ./src/components/ErrorState.tsx
import { ArrowLeft } from "react-feather";

interface ErrorStateProps {
  error: string | null;
  onBack: () => void;
}

export default function ErrorState({ error, onBack }: ErrorStateProps) {
  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-4">
      <div className="max-w-4xl mx-auto">
        <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-4">
          {error || "Erreur inconnue"}
        </div>
        <button
          onClick={onBack}
          className="inline-flex items-center gap-1.5 text-[#ECECEC] hover:text-gray-300 transition-colors"
        >
          <ArrowLeft size={16} />
          Retour
        </button>
      </div>
    </div>
  );
}


===== DashboardLayout.tsx =====
Chemin : ./src/components/DashboardLayout.tsx
// src/components/DashboardLayout.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Sidebar from "./Sidebar";
import { signOut } from "next-auth/react";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      // Utilisation de signOut de NextAuth pour terminer la session
      await signOut({ redirect: false });
      router.push("/login");
    } catch (error) {
      console.error("Erreur lors de la déconnexion:", error);
    }
  };

  return (
    <div className="relative min-h-screen bg-[#212121] flex">
      {/* Bouton hamburger pour mobile */}
      <button
        className="md:hidden fixed top-4 left-4 z-50 p-2 bg-[#424242] rounded-full shadow-lg focus:outline-none"
        onClick={() => setIsSidebarOpen(!isSidebarOpen)}
        aria-label={isSidebarOpen ? "Fermer le menu" : "Ouvrir le menu"}
      >
        {isSidebarOpen ? "X" : "≡"}
      </button>

      {/* Sidebar avec props pour gérer l'état et la déconnexion */}
      <Sidebar
        isOpen={isSidebarOpen}
        onToggle={() => setIsSidebarOpen((prev) => !prev)}
        onSignOut={handleSignOut}
      />

      {/* Contenu principal */}
      <main className="flex-1 p-4 pt-16 md:pt-4 md:p-8 text-[#ECECEC] overflow-y-auto">
        {children}
      </main>
    </div>
  );
}


===== Section.tsx =====
Chemin : ./src/components/Section.tsx
import React from "react";

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

export default function Section({ title, children }: SectionProps) {
  return (
    <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm">
      <h2 className="text-lg md:text-xl font-medium mb-4">{title}</h2>
      <div className="grid gap-4">{children}</div>
    </section>
  );
}


===== StatusProgress.tsx =====
Chemin : ./src/components/StatusProgress.tsx
import { Status } from "../types/video";
import { STATUS_STEPS } from "../constants/videoConstants";

interface StatusProgressProps {
  currentStatus: Status;
  onStatusChange: (newStatus: Status) => void;
  isDisabled?: boolean;
}

export function StatusProgress({
  currentStatus,
  onStatusChange,
  isDisabled = false,
}: StatusProgressProps) {
  const getStepStatus = (stepValue: Status): "completed" | "current" | "upcoming" => {
    const stepIndex = STATUS_STEPS.findIndex((step) => step.value === stepValue);
    const currentIndex = STATUS_STEPS.findIndex((step) => step.value === currentStatus);
    if (stepIndex < currentIndex) return "completed";
    if (stepIndex === currentIndex) return "current";
    return "upcoming";
  };

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
      {STATUS_STEPS.map((step, index) => (
        <button
          key={step.value}
          onClick={() => onStatusChange(step.value)}
          disabled={isDisabled}
          className={`
            w-full p-3 rounded-lg transition-all duration-200 
            flex flex-col justify-between
            ${
              getStepStatus(step.value) === "completed"
                ? "bg-green-600/20 border-green-600 text-green-500"
                : getStepStatus(step.value) === "current"
                ? "bg-blue-600/20 border-blue-600 text-blue-500"
                : "bg-[#424242]/20 border-[#424242] text-gray-400"
            }
            border hover:border-white/50
            min-h-[80px] md:min-h-[100px]
            focus:outline-none focus:ring-2 focus:ring-white/30
          `}
        >
          <div className="flex justify-between items-center mb-2">
            <span className="font-medium text-sm md:text-base">{step.label}</span>
            <span className="flex items-center justify-center h-6 w-6 rounded-full border text-xs">
              {getStepStatus(step.value) === "completed" ? "✓" : index + 1}
            </span>
          </div>
          <p className="text-xs md:text-sm opacity-80 mt-1">{step.description}</p>
        </button>
      ))}
    </div>
  );
}


===== Providers.tsx =====
Chemin : ./src/components/Providers.tsx
// src/components/Providers.tsx
"use client";

import { useState } from "react";
import { createPagesBrowserClient } from "@supabase/auth-helpers-nextjs";
import { SessionContextProvider } from "@supabase/auth-helpers-react";

export function Providers({ children }: { children: React.ReactNode }) {
  const [supabaseClient] = useState(() => createPagesBrowserClient());

  return (
    <SessionContextProvider supabaseClient={supabaseClient}>
      {children}
    </SessionContextProvider>
  );
}


===== CreateCategoryModal.tsx =====
Chemin : ./src/components/CreateCategoryModal.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateVideoModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

const getNextLetter = (existingIdentifiers: string[]): string => {
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const usedLetters = new Set(
    existingIdentifiers.map((id) => id.toUpperCase())
  );
  for (const letter of alphabet) {
    if (!usedLetters.has(letter)) {
      return letter;
    }
  }
  return "Z"; // Retourne 'Z' si tous les identifiants sont utilisés
};

export default function CreateVideoModal({
  isOpen,
  onClose,
  onSuccess,
}: CreateVideoModalProps) {
  const [identifier, setIdentifier] = useState("");
  const [title, setTitle] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const supabase = createClientComponentClient();

  const fetchNextVideoIdentifier = useCallback(async () => {
    if (isOpen) {
      try {
        const { data: categories, error } = await supabase
          .from("video_categories")
          .select("identifier");

        if (error) throw error;

        const existingIdentifiers =
          categories?.map((cat: { identifier: string }) => cat.identifier) ||
          [];
        const nextLetter = getNextLetter(existingIdentifiers);
        setIdentifier(nextLetter);
      } catch (err: unknown) {
        console.error("Erreur lors de la récupération de l'identifiant :", err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Erreur inconnue lors de la récupération de l'identifiant");
        }
      }
    }
  }, [isOpen, supabase]);

  useEffect(() => {
    fetchNextVideoIdentifier();
  }, [fetchNextVideoIdentifier]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      const { error } = await supabase
        .from("video_categories")
        .insert([{ identifier, title }]);

      if (error) throw error;

      setIdentifier("");
      setTitle("");
      onSuccess();
      onClose();
    } catch (err: unknown) {
      console.error("Erreur lors de la création de la vidéo :", err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Erreur inconnue lors de la création de la vidéo");
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="
        fixed inset-0 bg-black bg-opacity-50 
        flex items-center justify-center z-50 
        px-4 py-4
      "
    >
      <div
        className="
          bg-[#171717] 
          p-4 sm:p-8
          rounded-lg 
          w-full max-w-md 
          border border-[#424242]
        "
      >
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">
          Nouvelle vidéo
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label
              htmlFor="identifier"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Identifiant
            </label>
            <input
              id="identifier"
              type="text"
              value={identifier}
              readOnly
              disabled
              className="
                w-full p-3 rounded-lg bg-[#212121] 
                border border-[#424242] 
                text-[#ECECEC] 
                focus:outline-none focus:border-[#ECECEC] 
                cursor-not-allowed opacity-50
              "
              required
            />
          </div>
          <div className="mb-6">
            <label
              htmlFor="title"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Titre
            </label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="
                w-full p-3 rounded-lg bg-[#212121] 
                border border-[#424242] 
                text-[#ECECEC] 
                focus:outline-none focus:border-[#ECECEC]
              "
              required
              disabled={isLoading}
            />
          </div>
          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="
                px-4 py-2 text-[#ECECEC] rounded-lg 
                hover:bg-[#212121] transition-colors duration-200
              "
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="
                px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg 
                hover:bg-[#171717] transition-colors duration-200 
                border border-[#424242] disabled:opacity-50
              "
              disabled={isLoading}
            >
              {isLoading ? "Création..." : "Créer"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


===== card.tsx =====
Chemin : ./src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


===== scroll-area.tsx =====
Chemin : ./src/components/ui/scroll-area.tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


===== table.tsx =====
Chemin : ./src/components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


===== calendar.tsx =====
Chemin : ./src/components/ui/calendar.tsx
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


===== switch.tsx =====
Chemin : ./src/components/ui/switch.tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


===== button.tsx =====
Chemin : ./src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


===== badge.tsx =====
Chemin : ./src/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


===== avatar.tsx =====
Chemin : ./src/components/ui/avatar.tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


===== progress.tsx =====
Chemin : ./src/components/ui/progress.tsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


===== skeleton.tsx =====
Chemin : ./src/components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }


===== input.tsx =====
Chemin : ./src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


===== videoConstants.ts =====
Chemin : ./src/constants/videoConstants.ts
import { VIDEO_STATUS, StatusStep } from "../types/video";

export const STATUS_STEPS: StatusStep[] = [
  {
    value: VIDEO_STATUS.TO_DO,
    label: 'À faire',
    description: 'La vidéo est en attente de montage'
  },
  {
    value: VIDEO_STATUS.IN_PROGRESS,
    label: 'En cours',
    description: 'Le montage est en cours'
  },
  {
    value: VIDEO_STATUS.READY_TO_PUBLISH,
    label: 'Prêt à publier',
    description: 'La vidéo est prête pour publication'
  },
  {
    value: VIDEO_STATUS.FINISHED,
    label: 'Terminé',
    description: 'La vidéo a été publiée'
  }
];


===== layout.tsx =====
Chemin : ./src/app/layout.tsx
// src/app/layout.tsx
import "./globals.css";
import { Providers } from "@/components/Providers";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}


===== globals.css =====
Chemin : ./src/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica, sans-serif;
}



@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


===== page.tsx =====
Chemin : ./src/app/page.tsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    router.push("/login");
  }, [router]);

  return null;
}


===== route.ts =====
Chemin : ./src/app/api/admin/route.ts
// src/app/api/admin/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function GET() {
  const supabase = createRouteHandlerClient({ cookies });
  const { data: { session }, error: authError } = await supabase.auth.getSession();
  if (authError || !session || session.user.role !== "admin") {
    return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
  }

  // Ici, mettez la logique de votre API pour les admins
  return NextResponse.json({ message: "Bienvenue dans l'API d'administration" });
}


===== route.ts =====
Chemin : ./src/app/api/admin/users-activity/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

interface ActionLog {
  user_id: string;
  created_at: string;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData.session || sessionData.session.user.role !== "admin") {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { data: profiles, error: profileError } = await supabase
      .from("profiles")
      .select("id, email, role, name");
    if (profileError) throw profileError;

    const { data: actions, error: actionsError } = await supabase
      .from("user_activity")
      .select("user_id, created_at");
    if (actionsError) throw actionsError;

    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const filteredActions = (actions as ActionLog[]).filter((action) => {
      return new Date(action.created_at) >= thirtyDaysAgo;
    });

    const actionsMap: Record<string, number> = {};
    filteredActions.forEach((action) => {
      actionsMap[action.user_id] = (actionsMap[action.user_id] || 0) + 1;
    });

    const result = (profiles || []).map((p: any) => ({
      ...p,
      actionsCount: actionsMap[p.id] || 0,
    }));

    return NextResponse.json(result);
  } catch (error: any) {
    console.error("Erreur GET /api/admin/users-activity:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/admin/users-activity/[userId]/route.ts
// src/app/api/admin/users-activity/[userId]/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(
  request: Request,
  { params }: { params: { userId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    // Vérifier qu'on est admin
    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData.session || sessionData.session.user.role !== "admin") {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const THIRTY_DAYS_AGO = new Date();
    THIRTY_DAYS_AGO.setDate(THIRTY_DAYS_AGO.getDate() - 30);

    const { data: logs, error: logsError } = await supabase
      .from("user_activity")
      .select("id, action_type, details, created_at")
      .eq("user_id", params.userId)
      .gte("created_at", THIRTY_DAYS_AGO.toISOString())
      .order("created_at", { ascending: false });

    if (logsError) throw logsError;

    return NextResponse.json(logs);
  } catch (error: any) {
    console.error("Erreur GET /api/admin/users-activity/[userId]:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from "next/server";
import { z } from "zod";

// Schéma de validation pour la création d'une vidéo
const videoSchema = z.object({
  category_id: z.number(),
  title: z.string().min(1, "Le titre est requis"),
  production_status: z.enum(["À monter", "Miniature à faire", "En validation", "Prête à exporter"]),
  instructions_miniature: z.string().optional(),
  rush_link: z.string().url().optional(),
  video_link: z.string().url().optional(),
  miniature_link: z.string().url().optional(),
});

// Pour la mise à jour, toutes les propriétés sont optionnelles sauf category_id
const videoUpdateSchema = videoSchema.partial().extend({
  category_id: z.number()
});

export async function GET(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const categoryId = searchParams.get("categoryId");
    const videoId = searchParams.get("id");

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    let query = supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `);

    if (videoId) {
      query = query.eq("id", videoId);
    }
    if (categoryId) {
      query = query.eq("category_id", categoryId);
    }

    const { data, error } = await query;

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération des vidéos:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoSchema.parse(body);

    // Commencer une transaction
    const { data: categoryVideo, error: categoryVideoError } = await supabase
      .from("category_videos")
      .insert({
        category_id: parsedData.category_id,
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (categoryVideoError) throw categoryVideoError;

    // Créer les détails de la vidéo
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .insert({
        category_video_id: categoryVideo.id,
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json({
      categoryVideo,
      videoDetails
    }, { status: 201 });
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('Erreur lors de la création de la vidéo:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    console.error('Erreur lors de la création de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur inconnue' },
      { status: 400 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la mise à jour" },
        { status: 400 }
      );
    }

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoUpdateSchema.parse(body);

    // Mise à jour de category_videos
    const { error: categoryVideoError } = await supabase
      .from("category_videos")
      .update({
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .eq("id", id);

    if (categoryVideoError) throw categoryVideoError;

    // Mise à jour de video_details
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .update({
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .eq("category_video_id", id)
      .select();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json(videoDetails);
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('Erreur lors de la mise à jour de la vidéo:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    console.error('Erreur lors de la mise à jour de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur inconnue' },
      { status: 400 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la suppression" },
        { status: 400 }
      );
    }

    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { error } = await supabase
      .from("category_videos")
      .delete()
      .eq("id", id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/[videoId]/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const { data, error } = await supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `)
      .eq("id", params.videoId)
      .single();
    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: unknown) {
    console.error("Erreur lors de la récupération des détails de la vidéo:", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const { error } = await supabase
      .from("category_videos")
      .delete()
      .eq("id", params.videoId);
    if (error) throw error;
    return NextResponse.json({ success: true });
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : "Erreur lors de la suppression";
    console.error("Erreur lors de la suppression de la vidéo:", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/[videoId]/comments/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { z } from "zod";

const commentSchema = z.object({
  comment: z.string().min(1, "Le commentaire ne peut être vide"),
});

export async function GET(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { data: comments, error } = await supabase
      .from("video_comments")
      .select("id, comment, created_at, user_id")
      .eq("video_id", Number(params.videoId))
      .order("created_at", { ascending: true });
    if (error) throw error;
    return NextResponse.json(comments);
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}

export async function POST(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const body = await request.json();
    const parsed = commentSchema.safeParse(body);
    if (!parsed.success) {
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }
    const { comment } = parsed.data;
    const { data, error } = await supabase
      .from("video_comments")
      .insert([
        {
          video_id: Number(params.videoId),
          user_id: session.user.id,
          comment,
        },
      ])
      .select()
      .single();
    if (error) throw error;
    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/categories/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import { SupabaseClient } from '@supabase/supabase-js';

const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

async function getNextIdentifier(supabase: SupabaseClient) {
  const { data: categories } = await supabase
    .from('video_categories')
    .select('identifier')
    .order('identifier', { ascending: true });

  if (!categories || categories.length === 0) {
    return ALPHABET[0];
  }

  const lastIdentifier = categories[categories.length - 1].identifier;
  const lastIndex = ALPHABET.indexOf(lastIdentifier);

  if (lastIndex === -1 || lastIndex === ALPHABET.length - 1) {
    throw new Error("Plus d'identifiants disponibles");
  }

  return ALPHABET[lastIndex + 1];
}

export async function GET(): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select('*')
      .order('identifier');

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error('Erreur lors de la récupération des catégories:', error);
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

export async function POST(request: Request): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { title } = body;

    if (!title) {
      return NextResponse.json(
        { error: 'Le titre est requis' },
        { status: 400 }
      );
    }

    const identifier = await getNextIdentifier(supabase);

    const { data, error } = await supabase
      .from('video_categories')
      .insert([{ 
        identifier,
        title,
        user_id: session.user.id
      }])
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error('Erreur lors de la création de la catégorie:', error);
    return NextResponse.json(
      { error: errorMessage },
      { status: 400 }
    );
  }
}


===== route.ts =====
Chemin : ./src/app/api/categories/[id]/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

// GET /api/categories/[id]
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select(`
        *,
        category_videos (*)
      `)
      .eq('id', params.id)
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// PATCH /api/categories/[id]
export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { identifier, title } = body;

    const { data, error } = await supabase
      .from('video_categories')
      .update({ identifier, title })
      .eq('id', params.id)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// DELETE /api/categories/[id]
export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { error } = await supabase
      .from('video_categories')
      .delete()
      .eq('id', params.id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
} 

===== route.ts =====
Chemin : ./src/app/api/alerts/route.ts
// src/app/api/alerts/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    // On définit un seuil à 7 jours
    const thresholdDate = new Date();
    thresholdDate.setDate(thresholdDate.getDate() - 7);
    const isoThreshold = thresholdDate.toISOString();

    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, title, production_status, updated_at")
      .neq("production_status", "Terminé")
      .lt("updated_at", isoThreshold);

    if (error) throw error;
    return NextResponse.json(videos);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API alerts :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/stats/route.ts
// src/app/api/stats/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

// Définition d'une interface pour les vidéos récupérées
interface Video {
  production_status: string;
}

// Interface pour les statistiques calculées
interface Stats {
  toDo: number;
  inProgress: number;
  readyToPublish: number;
  finished: number;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    
    // Récupération de la colonne production_status de la table category_videos
    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("production_status");
      
    if (error) throw error;

    const videoList: Video[] = videos ?? [];

    // Calcul des compteurs en typant l'accumulateur
    const stats: Stats = videoList.reduce((acc: Stats, video: Video) => {
      const status = video.production_status;
      if (status === "À monter") acc.toDo += 1;
      else if (status === "En cours") acc.inProgress += 1;
      else if (status === "Prêt à publier") acc.readyToPublish += 1;
      else if (status === "Terminé") acc.finished += 1;
      return acc;
    }, { toDo: 0, inProgress: 0, readyToPublish: 0, finished: 0 });

    return NextResponse.json(stats);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API stats :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/priorities/route.ts
// src/app/api/priorities/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

interface Video {
  id: number;
  title: string;
  production_status: string;
  updated_at: string;
}

interface PrioritizedVideo extends Video {
  priority: number;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Récupérer toutes les vidéos dont le statut n'est pas "Terminé"
    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, title, production_status, updated_at")
      .neq("production_status", "Terminé");

    if (error) throw error;

    const now = new Date();
    const videoList: Video[] = videos ?? [];

    const prioritizedVideos: PrioritizedVideo[] = videoList.map((video) => {
      const updatedAt = new Date(video.updated_at);
      const diffInMs = now.getTime() - updatedAt.getTime();
      const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
      return {
        ...video,
        priority: Math.round(diffInDays),
      };
    });

    prioritizedVideos.sort((a, b) => b.priority - a.priority);

    return NextResponse.json(prioritizedVideos);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error("Erreur dans l'API priorités :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/status/[status]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_KEY!
);

export async function GET(req: NextRequest, { params }: { params: { status: string } }) {
  const { status } = params;

  if (!status) {
    return NextResponse.json({ error: "Status is required" }, { status: 400 });
  }

  const { data, error } = await supabase
    .from("videos")
    .select("*")
    .eq("progress_status", status);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


===== route.ts =====
Chemin : ./src/app/api/performance/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

interface Video {
  id: number;
  created_at: string;
  updated_at: string;
  production_status: string;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, created_at, updated_at, production_status")
      .eq("production_status", "Terminé");

    if (error) throw error;

    const videoList: Video[] = videos ?? [];

    let totalDays = 0;
    let count = 0;
    const monthlyCounts: Record<string, number> = {};

    videoList.forEach((video) => {
      const created = new Date(video.created_at);
      const updated = new Date(video.updated_at);
      const diffInDays =
        (updated.getTime() - created.getTime()) / (1000 * 60 * 60 * 24);
      totalDays += diffInDays;
      count++;

      const month = updated.toISOString().slice(0, 7);
      monthlyCounts[month] = (monthlyCounts[month] || 0) + 1;
    });

    const avgProductionTime = count > 0 ? totalDays / count : 0;

    return NextResponse.json({
      avgProductionTime: avgProductionTime.toFixed(2),
      monthlyCounts,
      totalVideos: count,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API performance :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/auth/[...nextauth]/route.ts
// ./src/app/api/auth/[...nextauth]/route.ts
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { supabase } from "@/utils/supabaseClient";

const handler = NextAuth({
  secret: process.env.NEXTAUTH_SECRET, // Clé secrète ajoutée pour signer les tokens JWT
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: {
          label: "Email",
          type: "text",
          placeholder: "john.doe@example.com",
        },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Email et mot de passe requis");
        }

        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials.email,
          password: credentials.password,
        });

        if (error || !data.user) {
          throw new Error("Identifiants invalides");
        }

        let role = "user"; // rôle par défaut
        try {
          const { data: profileData, error: profileError } = await supabase
            .from("profiles")
            .select("role")
            .eq("id", data.user.id)
            .single();
          if (!profileError && profileData?.role) {
            role = profileData.role;
          }
          console.log("[Authorize] Rôle récupéré :", role);
        } catch (e) {
          console.error("Impossible de récupérer le rôle:", e);
        }

        return { ...data.user, role };
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email ?? undefined;
        token.role = user.role ?? "user"; // Forcer une valeur par défaut si non défini
        console.log("[JWT] User:", user);
        console.log("[JWT] Token après ajout role:", token);
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
        session.user.role = token.role ?? "user"; // Assurez-vous que role est toujours présent
        console.log("[Session] Session utilisateur:", session.user);
      }
      return session;
    },
  },

  pages: {
    signIn: "/login",
  },
});

export { handler as GET, handler as POST };


===== page.tsx =====
Chemin : ./src/app/login/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { createPagesBrowserClient } from "@supabase/auth-helpers-nextjs";
import toast, { Toaster } from "react-hot-toast";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const router = useRouter();
  const supabase = createPagesBrowserClient(); // si tu utilises ce helper

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMsg("");
    setIsLoading(true);

    try {
      // Remplace l'appel NextAuth par Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      console.log("SignInWithPassword result:", data, error);

      if (error) {
        // Erreur Supabase (identifiants invalides, etc.)
        toast.error(error.message);
        setErrorMsg(error.message);
      } else if (!data.user) {
        // Cas improbable : pas d'erreur mais pas de user ?
        toast.error("Connexion échouée (aucun user)");
        setErrorMsg("Connexion échouée");
      } else {
        // Connexion OK : on redirige
        router.push("/dashboard");
      }
    } catch (error: unknown) {
      console.error("Erreur de connexion:", error);
      if (error instanceof Error) {
        toast.error(error.message);
        setErrorMsg(error.message);
      } else {
        toast.error("Une erreur inconnue est survenue lors de la connexion");
        setErrorMsg("Une erreur inconnue est survenue lors de la connexion");
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#212121] text-[#ECECEC]">
      <Toaster />
      <form
        onSubmit={handleSubmit}
        className="w-96 p-8 bg-[#171717] rounded-lg shadow-xl border border-[#424242]"
      >
        <h2 className="text-2xl font-semibold mb-6">Connexion</h2>
        {errorMsg && <p className="text-red-500 mb-4">{errorMsg}</p>}

        <div className="mb-4">
          <label htmlFor="email" className="block mb-2 text-sm font-medium">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC]"
            required
            disabled={isLoading}
          />
        </div>

        <div className="mb-6">
          <label htmlFor="password" className="block mb-2 text-sm font-medium">
            Mot de passe
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC]"
            required
            disabled={isLoading}
          />
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-[#424242] hover:bg-[#171717] text-[#ECECEC] py-3 px-4 rounded-lg border border-[#424242] disabled:opacity-50"
        >
          {isLoading ? "Connexion en cours..." : "Se connecter"}
        </button>
      </form>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import CreateCategoryModal from "@/components/CreateCategoryModal";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter } from "next/navigation";
import Link from "next/link";

interface CategoryWithCounts {
  id: number;
  identifier: string;
  title: string;
  pending_count: number;
  ready_to_publish_count: number;
  finished_count: number;
}

interface VideoCategory {
  id: number;
  identifier: string;
  title: string;
  category_videos: { production_status: string }[] | null;
}

export default function DashboardPage() {
  const [categories, setCategories] = useState<CategoryWithCounts[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState<boolean>(false);

  const supabase = createClientComponentClient();
  const router = useRouter();

  const fetchCategories = useCallback(async () => {
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from("video_categories")
        .select(`
          id,
          identifier,
          title,
          category_videos (
            production_status
          )
        `)
        .order("identifier", { ascending: true });

      if (error) throw error;

      const dataCategories = (data || []) as VideoCategory[];

      const mapped = dataCategories.map((cat) => {
        let pending_count = 0;
        let ready_to_publish_count = 0;
        let finished_count = 0;

        cat.category_videos?.forEach((video) => {
          if (video.production_status === "En cours") {
            pending_count++;
          } else if (video.production_status === "Prêt à publier") {
            ready_to_publish_count++;
          } else if (video.production_status === "Terminé") {
            finished_count++;
          }
        });

        return {
          id: cat.id,
          identifier: cat.identifier,
          title: cat.title,
          pending_count,
          ready_to_publish_count,
          finished_count,
        };
      });

      setCategories(mapped);
    } catch (err) {
      console.error("Erreur lors du chargement des catégories:", err);
      setError("Impossible de charger les catégories");
    } finally {
      setIsLoading(false);
    }
  }, [supabase]);

  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      {/* --- Entête avec le titre et le bouton "Voir toutes les vidéos" --- */}
      <header className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl sm:text-3xl md:text-3xl font-bold tracking-tight text-white">
          Catégories de vidéos
        </h1>

        {/* Bouton qui renvoie vers la page listant toutes les vidéos */}
        <Link
          href="/dashboard/videos"
          className="
            inline-block px-4 py-2 rounded-md
            bg-[#424242] text-[#ECECEC]
            hover:bg-[#171717] transition-colors duration-200
            border border-[#424242]
          "
        >
          Voir toutes les vidéos
        </Link>
      </header>

      {isLoading ? (
        <div className="text-center py-6">Chargement en cours...</div>
      ) : (
        <>
          {error && (
            <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-6">
              {error}
            </div>
          )}

          <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* Carte pour créer une nouvelle catégorie */}
            <div
              onClick={() => setIsCreateModalOpen(true)}
              className="
                bg-[#171717]
                p-4 sm:p-6
                rounded-lg
                border border-dashed border-[#424242]
                transition-all duration-200
                cursor-pointer
                flex flex-col items-center justify-center
                hover:shadow-md
                md:hover:scale-[1.01]
                active:scale-[0.99]
              "
            >
              <div className="w-10 h-10 sm:w-12 sm:h-12 bg-[#424242] rounded-full flex items-center justify-center mb-3 text-xl text-white">
                +
              </div>
              <p className="text-center text-gray-400 text-sm sm:text-base">
                Créer une nouvelle catégorie
              </p>
            </div>

            {/* Liste des catégories existantes */}
            {categories.map((category, index) => (
              <div
                key={category.id}
                onClick={() =>
                  router.push(`/dashboard/categories/${category.id}`)
                }
                className="
                  bg-[#171717]
                  p-4 sm:p-6
                  rounded-lg
                  border border-[#424242]
                  transition-all duration-200
                  cursor-pointer
                  hover:shadow-md
                  md:hover:scale-[1.01]
                  active:scale-[0.99]
                "
                style={{ animationDelay: `${index * 50}ms` }}
              >
                <div className="flex items-center mb-2 sm:mb-3">
                  <span className="text-base sm:text-lg md:text-xl font-medium text-[#424242]">
                    {category.identifier}
                  </span>
                  <span className="mx-2 text-base sm:text-lg md:text-xl font-medium text-[#424242]">
                    |
                  </span>
                  <h3 className="text-base sm:text-lg md:text-xl font-medium truncate">
                    {category.title}
                  </h3>
                </div>
                <div className="flex flex-col text-xs sm:text-sm text-gray-400 gap-1">
                  <span>{category.pending_count} en cours</span>
                  <span>{category.ready_to_publish_count} prêtes</span>
                  <span>{category.finished_count} terminées</span>
                </div>
              </div>
            ))}
          </section>
        </>
      )}

      <CreateCategoryModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSuccess={fetchCategories}
      />
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/profile/page.tsx
// src/app/dashboard/profile/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useUser } from "@supabase/auth-helpers-react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter } from "next/navigation";

export default function ProfilePage() {
  const { user } = useUser();
  const supabase = createClientComponentClient();
  const [profile, setProfile] = useState<{
    name: string | null;
    email: string;
    role: string;
    created_at: string;
  } | null>(null);
  const [name, setName] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const router = useRouter();

  useEffect(() => {
    if (user) {
      (async () => {
        const { data, error } = await supabase
          .from("profiles")
          .select("name, email, role, created_at")
          .eq("id", user.id)
          .single();
        if (error) {
          console.error("Erreur lors de la récupération du profil :", error);
        } else if (data) {
          setProfile(data);
          setName(data.name || "");
        }
      })();
    }
  }, [user, supabase]);

  const handleUpdateName = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");
    try {
      const { error } = await supabase
        .from("profiles")
        .update({ name })
        .eq("id", user?.id);
      if (error) throw error;
      setMessage("Nom mis à jour !");
      setProfile((prev) => (prev ? { ...prev, name } : prev));
    } catch (err) {
      console.error("Erreur lors de la mise à jour du nom :", err);
      setMessage("Erreur lors de la mise à jour du nom.");
    } finally {
      setLoading(false);
    }
  };

  const handleUpdatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");
    try {
      const { error } = await supabase.auth.updateUser({
        password: newPassword,
      });
      if (error) throw error;
      setMessage("Mot de passe mis à jour !");
      setNewPassword("");
    } catch (err) {
      console.error("Erreur lors de la mise à jour du mot de passe :", err);
      setMessage("Erreur lors de la mise à jour du mot de passe.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center p-4">
      <div className="w-full max-w-md p-8 bg-[#171717] rounded-lg shadow-xl border border-[#424242]">
        <h2 className="text-2xl font-semibold mb-6">Mon Profil</h2>
        {profile && (
          <div className="mb-6 p-4 bg-[#212121] rounded border border-[#424242]">
            <p className="mb-2">
              <strong>Email :</strong> {profile.email}
            </p>
            <p className="mb-2">
              <strong>Rôle :</strong> {profile.role}
            </p>
            <p className="mb-2">
              <strong>Date d'inscription :</strong>{" "}
              {new Date(profile.created_at).toLocaleDateString()}
            </p>
          </div>
        )}
        {message && (
          <div className="mb-4 p-3 rounded bg-green-500/10 border border-green-500 text-green-500">
            {message}
          </div>
        )}
        <form onSubmit={handleUpdateName} className="mb-8">
          <label className="block mb-2">Nom d'utilisateur</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Entrez votre nom d'utilisateur..."
            className="w-full p-3 bg-[#212121] border border-[#424242] rounded"
          />
          <button
            type="submit"
            disabled={loading}
            className="mt-4 w-full p-3 bg-[#424242] text-[#ECECEC] rounded hover:bg-[#171717] transition-colors"
          >
            Mettre à jour le nom
          </button>
        </form>
        <form onSubmit={handleUpdatePassword}>
          <label className="block mb-2">Nouveau mot de passe</label>
          <input
            type="password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            placeholder="Entrez votre nouveau mot de passe..."
            className="w-full p-3 bg-[#212121] border border-[#424242] rounded"
          />
          <button
            type="submit"
            disabled={loading}
            className="mt-4 w-full p-3 bg-[#424242] text-[#ECECEC] rounded hover:bg-[#171717] transition-colors"
          >
            Mettre à jour le mot de passe
          </button>
        </form>
      </div>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/admin/page.tsx
// src/app/dashboard/admin/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useUser } from "@supabase/auth-helpers-react";
import { useRouter } from "next/navigation";

interface Profile {
  id: string;
  email: string;
  role: string;
  name?: string;
  actionsCount?: number;
}

export default function AdminPage() {
  const { user } = useUser();
  const router = useRouter();
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>("");

  useEffect(() => {
    if (!user || user.role !== "admin") {
      router.push("/dashboard");
    }
  }, [user, router]);

  useEffect(() => {
    async function fetchUsersActivity() {
      setLoading(true);
      try {
        const res = await fetch("/api/admin/users-activity", {
          credentials: "include",
          cache: "no-store",
        });
        if (!res.ok) {
          throw new Error("Erreur lors du fetch des activités utilisateurs");
        }
        const data = await res.json();
        setProfiles(data);
      } catch (err: any) {
        console.error(err);
        setError(err.message || "Erreur inconnue");
      } finally {
        setLoading(false);
      }
    }
    fetchUsersActivity();
  }, []);

  if (loading) {
    return <div className="p-4 text-gray-200">Chargement...</div>;
  }
  if (error) {
    return (
      <div className="p-4 text-red-400 border border-red-500 rounded">
        {error}
      </div>
    );
  }
  return (
    <div className="p-4 text-[#ECECEC]">
      <h1 className="text-2xl font-semibold mb-4">Administration</h1>
      <p className="mb-6">Suivi de l'activité des employés (30 derniers jours)</p>
      <table className="w-full border border-gray-600">
        <thead className="bg-[#2a2a2a]">
          <tr>
            <th className="px-3 py-2 text-left">Utilisateur</th>
            <th className="px-3 py-2 text-left">Email</th>
            <th className="px-3 py-2 text-left">Rôle</th>
            <th className="px-3 py-2 text-right">Actions (30j)</th>
          </tr>
        </thead>
        <tbody>
          {profiles.map((p) => (
            <tr
              key={p.id}
              className="hover:bg-[#212121] cursor-pointer"
              onClick={() => router.push(`/dashboard/admin/user/${p.id}`)}
            >
              <td className="px-3 py-2">{p.name || "Sans Nom"}</td>
              <td className="px-3 py-2">{p.email}</td>
              <td className="px-3 py-2">{p.role}</td>
              <td className="px-3 py-2 text-right">{p.actionsCount ?? 0}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/admin/user/[userId]/page.tsx
// src/app/dashboard/admin/user/[userId]/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useSearchParams, useRouter, useParams } from "next/navigation";
import { useSession } from "next-auth/react";

interface Activity {
  id: number;
  action_type: string;
  details: string;
  created_at: string;
}

export default function UserActivityPage() {
  const { data: session } = useSession();
  const router = useRouter();
  const { userId } = useParams();
  
  const [activities, setActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    // Vérification admin
    if (session?.user?.role !== "admin") {
      router.push("/dashboard");
    }
  }, [session, router]);

  useEffect(() => {
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(`/api/admin/users-activity/${userId}`);
        if (!res.ok) {
          throw new Error("Impossible de charger l'historique utilisateur");
        }
        const data = await res.json();
        setActivities(data);
      } catch (err: any) {
        console.error(err);
        setError(err.message || "Erreur");
      } finally {
        setLoading(false);
      }
    })();
  }, [userId]);

  if (loading) return <div className="p-4 text-gray-200">Chargement...</div>;
  if (error) {
    return (
      <div className="p-4 text-red-400 border border-red-500 rounded">
        {error}
      </div>
    );
  }

  return (
    <div className="p-4 text-[#ECECEC]">
      <h1 className="text-2xl font-semibold mb-4">Historique de l'utilisateur {userId}</h1>
      {activities.length === 0 && (
        <div className="text-gray-400">Aucune activité récente.</div>
      )}
      {activities.map((act) => (
        <div key={act.id} className="mb-3 p-3 bg-[#212121] rounded border border-[#424242]">
          <p className="text-sm text-gray-300">
            <strong>Action :</strong> {act.action_type}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Détails :</strong> {act.details}
          </p>
          <p className="text-xs text-gray-500 mt-1">
            {new Date(act.created_at).toLocaleString()}
          </p>
        </div>
      ))}
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/videos/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import Link from "next/link";
import { ArrowLeft } from "react-feather";

interface VideoRow {
  id: number;
  title: string;
  category_id: number;
  production_status: string;
  created_at: string;
  updated_at: string;
  // etc. si besoin
}

interface Category {
  id: number;
  identifier: string;
  title: string;
}

export default function VideosListingPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const supabase = createClientComponentClient();

  // On récupère la valeur initiale de status (ex. "À monter") depuis l'URL
  const initialStatus = searchParams.get("status") || "";

  // States pour le filtre
  const [statusFilter, setStatusFilter] = useState(initialStatus);
  const [selectedCategory, setSelectedCategory] = useState<string>(""); // "" => toutes catégories
  const [searchQuery, setSearchQuery] = useState("");
  const [videos, setVideos] = useState<VideoRow[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // 1. Charger la liste de catégories pour le dropdown
  useEffect(() => {
    (async () => {
      try {
        const { data, error } = await supabase
          .from("video_categories")
          .select("id, identifier, title")
          .order("identifier");

        if (error) throw error;
        setCategories(data || []);
      } catch (err) {
        console.error("Erreur fetch categories:", err);
      }
    })();
  }, [supabase]);

  // 2. Charger la liste de vidéos (à chaque fois que le user modifie un filtre)
  //    On relance la requête quand [statusFilter, selectedCategory, searchQuery] changent
  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setError("");

        let query = supabase
          .from("category_videos")
          .select("*") // tu peux faire .select("id, ... video_details(...)") si besoin
          .order("updated_at", { ascending: false });

        // Filtre par statut si statusFilter n'est pas vide
        if (statusFilter) {
          query = query.eq("production_status", statusFilter);
        }

        // Filtre par catégorie
        const catId = parseInt(selectedCategory, 10);
        if (!isNaN(catId) && catId > 0) {
          query = query.eq("category_id", catId);
        }

        // Recherche par titre
        if (searchQuery.trim()) {
          query = query.ilike("title", `%${searchQuery.trim()}%`);
        }

        const { data, error } = await query;
        if (error) throw error;
        setVideos(data as VideoRow[]);
      } catch (err: any) {
        console.error("Erreur fetch videos:", err);
        setError("Impossible de récupérer la liste des vidéos");
      } finally {
        setLoading(false);
      }
    })();
  }, [supabase, statusFilter, selectedCategory, searchQuery]);

  // Handler si on veut rediriger ou quelque chose sur "back"
  const handleBack = () => {
    router.back();
  };

  return (
    <div className="p-4 md:p-6 text-gray-200 min-h-screen">
      {/* Barre de navigation "retour" */}
      <div className="flex items-center gap-2 mb-4">
        <button
          onClick={handleBack}
          className="flex items-center gap-1.5 text-[#ECECEC] hover:text-gray-300 transition-colors"
        >
          <ArrowLeft size={18} />
          Retour
        </button>
        <h1 className="text-xl font-semibold ml-4">
          Toutes les vidéos {statusFilter ? `(${statusFilter})` : ""}
        </h1>
      </div>

      {/* Filtres */}
      <div className="bg-[#1a1a1a] p-4 rounded-lg border border-[#2a2a2a] mb-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtre par catégorie */}
          <div>
            <label className="block text-sm text-gray-400 mb-1">
              Filtrer par catégorie
            </label>
            <select
              className="w-full bg-[#212121] border border-[#424242] rounded px-2 py-1"
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="">Toutes catégories</option>
              {categories.map((cat) => (
                <option key={cat.id} value={cat.id}>
                  {cat.identifier} - {cat.title}
                </option>
              ))}
            </select>
          </div>

          {/* Filtre par statut (optionnel si on veut laisser l'user en choisir un) */}
          <div>
            <label className="block text-sm text-gray-400 mb-1">
              Statut
            </label>
            <select
              className="w-full bg-[#212121] border border-[#424242] rounded px-2 py-1"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="">Tous statuts</option>
              <option value="À monter">À monter</option>
              <option value="En cours">En cours</option>
              <option value="Prêt à publier">Prêt à publier</option>
              <option value="Terminé">Terminé</option>
            </select>
          </div>

          {/* Recherche par titre */}
          <div>
            <label className="block text-sm text-gray-400 mb-1">
              Rechercher
            </label>
            <input
              className="w-full bg-[#212121] border border-[#424242] rounded px-2 py-1"
              type="text"
              placeholder="Rechercher par titre..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* Liste de vidéos */}
      {loading && <div>Chargement des vidéos...</div>}
      {error && (
        <div className="bg-red-500/10 border border-red-500 text-red-500 p-3 rounded">
          {error}
        </div>
      )}
      {!loading && !error && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {videos.length === 0 ? (
            <div className="text-gray-400 col-span-full">
              Aucune vidéo ne correspond à ces filtres.
            </div>
          ) : (
            videos.map((video) => (
              <Link
                key={video.id}
                href={`/dashboard/videos/${video.id}`}
                className="
                  block bg-[#171717] p-4 rounded-lg border border-[#424242]
                  hover:border-[#ECECEC] transition-colors duration-200
                "
              >
                <h2 className="text-lg font-bold mb-2">{video.title}</h2>
                <p className="text-sm text-gray-400">
                  Statut: {video.production_status}
                </p>
                <p className="text-sm text-gray-500 mt-1">
                  Mise à jour: {new Date(video.updated_at).toLocaleDateString()}
                </p>
              </Link>
            ))
          )}
        </div>
      )}
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/videos/[id]/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import toast from "react-hot-toast";
import {
  fetchVideoDetails,
  updateTitle,
  updateDescription,
  updateInstructions,
  updateLink,
  updateStatus,
} from "../../../../services/videoService";
import { Video, VIDEO_STATUS } from "../../../../types/video";
import EditableItem from "../../../../components/EditableItem";
import { StatusProgress } from "../../../../components/StatusProgress";
import { ArrowLeft, Trash2 } from "react-feather";

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

const Section = ({ title, children }: SectionProps) => (
  <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm">
    <h2 className="text-lg md:text-xl font-medium mb-4">{title}</h2>
    <div className="grid gap-4">{children}</div>
  </section>
);

interface ErrorStateProps {
  error: string | null;
  onBack: () => void;
}

const ErrorState = ({ error, onBack }: ErrorStateProps) => (
  <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-4">
    <div className="max-w-4xl mx-auto">
      <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-4">
        {error || "Vidéo non trouvée"}
      </div>
      <button
        onClick={onBack}
        className="inline-flex items-center gap-1.5 text-[#ECECEC] hover:text-gray-300 transition-colors"
      >
        <ArrowLeft size={16} /> Retour
      </button>
    </div>
  </div>
);

interface Comment {
  id: number;
  comment: string;
  created_at: string;
}

export default function VideoPage({ params }: { params: { id: string } }) {
  const { data: session } = useSession();
  const [video, setVideo] = useState<Video | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isStatusChanging, setIsStatusChanging] = useState<boolean>(false);
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [loadingComments, setLoadingComments] = useState(true);
  const [errorComments, setErrorComments] = useState("");
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const router = useRouter();

  useEffect(() => {
    const loadVideo = async () => {
      try {
        const data = await fetchVideoDetails(params.id);
        setVideo(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement de la vidéo :", err);
        setError(
          err instanceof Error
            ? "Impossible de charger les détails de la vidéo"
            : "Erreur inconnue lors du chargement de la vidéo"
        );
      } finally {
        setIsLoading(false);
      }
    };
    loadVideo();
  }, [params.id]);

  const handleTitleUpdate = async (newTitle: string) => {
    const trimmed = newTitle.trim();
    if (!trimmed) return;
    try {
      if (!session?.user?.id) throw new Error("Utilisateur non authentifié");
      await updateTitle(session.user.id, params.id, trimmed);
      setVideo((prev) => (prev ? { ...prev, title: trimmed } : null));
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour du titre :", err);
      setError(
        err instanceof Error
          ? "Impossible de mettre à jour le titre"
          : "Erreur inconnue lors de la mise à jour du titre"
      );
    }
  };

  const handleDescriptionUpdate = async (newDescription: string) => {
    try {
      await updateDescription(params.id, newDescription);
      setVideo((prev) =>
        prev ? { ...prev, description: newDescription } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour de la description :", err);
      setError(
        err instanceof Error
          ? "Impossible de mettre à jour la description"
          : "Erreur inconnue lors de la mise à jour de la description"
      );
    }
  };

  const handleInstructionsUpdate = async (newInstructions: string) => {
    try {
      await updateInstructions(params.id, newInstructions);
      setVideo((prev) =>
        prev ? { ...prev, instructions_miniature: newInstructions } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour des instructions :", err);
      setError(
        err instanceof Error
          ? "Impossible de mettre à jour les instructions"
          : "Erreur inconnue lors de la mise à jour des instructions"
      );
    }
  };

  const handleLinkUpdate = async (
    newValue: string,
    dbField: "rush_link" | "video_link" | "miniature_link"
  ) => {
    try {
      await updateLink(params.id, dbField, newValue);
      setVideo((prev) => (prev ? { ...prev, [dbField]: newValue } : null));
    } catch (err: unknown) {
      console.error(`Erreur lors de la mise à jour du lien ${dbField} :`, err);
      setError(
        err instanceof Error
          ? `Impossible de mettre à jour le lien ${dbField}`
          : "Erreur inconnue lors de la mise à jour du lien"
      );
    }
  };

  const handleStatusUpdate = async (
    newStatus: (typeof VIDEO_STATUS)[keyof typeof VIDEO_STATUS]
  ) => {
    if (!video) return;
    setIsStatusChanging(true);
    try {
      await updateStatus(params.id, newStatus);
      setVideo((prev) =>
        prev ? { ...prev, production_status: newStatus } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour du statut :", err);
      toast.error(
        err instanceof Error
          ? err.message
          : "Impossible de mettre à jour le statut"
      );
    } finally {
      setIsStatusChanging(false);
    }
  };

  const fetchComments = useCallback(async () => {
    try {
      const response = await fetch(`/api/videos/${params.id}/comments`);
      if (!response.ok) {
        throw new Error("Erreur lors de la récupération des commentaires");
      }
      const data = (await response.json()) as Comment[];
      setComments(data);
    } catch (err: unknown) {
      console.error("Erreur lors du chargement des commentaires", err);
      setErrorComments(
        err instanceof Error
          ? "Impossible de charger les commentaires"
          : "Erreur inconnue lors du chargement des commentaires"
      );
    } finally {
      setLoadingComments(false);
    }
  }, [params.id]);

  useEffect(() => {
    if (video) {
      fetchComments();
    }
  }, [video, fetchComments]);

  const postComment = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      const response = await fetch(`/api/videos/${params.id}/comments`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ comment: newComment }),
      });
      if (!response.ok) {
        throw new Error("Erreur lors de l'envoi du commentaire");
      }
      setNewComment("");
      fetchComments();
    } catch (err: unknown) {
      console.error("Erreur lors de l'ajout du commentaire", err);
      alert("Impossible d'ajouter le commentaire");
    }
  };

  const handleDeleteVideo = async () => {
    try {
      setIsDeleting(true);
      const response = await fetch(`/api/videos/${params.id}`, {
        method: "DELETE",
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Échec de la suppression");
      }
      router.push("/dashboard");
    } catch (err: unknown) {
      console.error("Erreur lors de la suppression de la vidéo :", err);
      setError(
        err instanceof Error
          ? err.message
          : "Impossible de supprimer la vidéo"
      );
    } finally {
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center p-4">
        <div className="animate-pulse flex flex-col items-center">
          <div className="h-8 w-48 bg-gray-700 rounded mb-4"></div>
          <div className="h-32 w-full max-w-md bg-gray-700 rounded"></div>
        </div>
      </div>
    );
  }

  if (error || !video) {
    return <ErrorState error={error} onBack={() => router.back()} />;
  }

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="container mx-auto p-4 md:p-8 max-w-4xl">
        <header className="mb-6">
          <button
            onClick={() => router.back()}
            className="inline-flex items-center text-[#ECECEC] hover:text-gray-300 transition-colors"
            aria-label="Retour"
          >
            <ArrowLeft size={18} />
            <span className="ml-2">Retour</span>
          </button>
          <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4 mt-4">
            <h1 className="text-2xl md:text-3xl font-semibold flex flex-wrap items-center gap-3">
              <span>{video.fullIdentifier}</span>
              <EditableItem
                label=""
                value={video.title}
                placeholder="Titre de la vidéo..."
                onSave={handleTitleUpdate}
                isLink={false}
              />
            </h1>
            <div className="flex items-center gap-4">
              <span
                className={`px-3 py-1 rounded-full text-sm font-semibold transition-opacity duration-200 ${
                  isStatusChanging ? "opacity-50" : "opacity-100"
                } ${(() => {
                  switch (video.production_status) {
                    case VIDEO_STATUS.TO_DO:
                      return "bg-yellow-600";
                    case VIDEO_STATUS.IN_PROGRESS:
                      return "bg-blue-600";
                    case VIDEO_STATUS.READY_TO_PUBLISH:
                      return "bg-green-600";
                    case VIDEO_STATUS.FINISHED:
                      return "bg-purple-600";
                    default:
                      return "bg-gray-600";
                  }
                })()}`}
              >
                {(() => {
                  switch (video.production_status) {
                    case VIDEO_STATUS.TO_DO:
                      return "À faire";
                    case VIDEO_STATUS.IN_PROGRESS:
                      return "En cours";
                    case VIDEO_STATUS.READY_TO_PUBLISH:
                      return "Prêt à publier";
                    case VIDEO_STATUS.FINISHED:
                      return "Terminé";
                    default:
                      return video.production_status;
                  }
                })()}
              </span>
              <button
                onClick={() => setShowDeleteConfirm(true)}
                className="flex items-center gap-1.5 px-3 py-1.5 hover:bg-black/20 text-red-500 rounded-md transition-colors duration-200 text-sm"
              >
                <Trash2 size={16} />
                Supprimer
              </button>
            </div>
          </div>
        </header>

        <main className="grid gap-6">
          <Section title="Contenu de la vidéo">
            <EditableItem
              label="Titre"
              value={video.title}
              placeholder="Ajouter un titre"
              onSave={handleTitleUpdate}
              copyable={true}
            />
            <EditableItem
              label="Description"
              value={video.description || ""}
              placeholder="Ajouter une description"
              onSave={handleDescriptionUpdate}
              inputType="textarea"
              copyable={true}
            />
          </Section>

          <Section title="Ressources de production">
            <EditableItem
              label="Rush brut"
              value={video.rush_link || ""}
              placeholder="Ajouter le lien des rushes"
              onSave={(newVal: string) => handleLinkUpdate(newVal, "rush_link")}
              isLink={true}
            />
            <EditableItem
              label="Montage final"
              value={video.video_link || ""}
              placeholder="Ajouter le lien de la vidéo montée"
              onSave={(newVal: string) => handleLinkUpdate(newVal, "video_link")}
              isLink={true}
            />
          </Section>

          <Section title="Miniature">
            <EditableItem
              label="Instructions"
              value={video.instructions_miniature || ""}
              placeholder="Ajouter les instructions pour la miniature"
              onSave={handleInstructionsUpdate}
              inputType="textarea"
            />
            <EditableItem
              label="Fichier miniature"
              value={video.miniature_link || ""}
              placeholder="Ajouter le lien de la miniature"
              onSave={(newVal: string) => handleLinkUpdate(newVal, "miniature_link")}
              isLink={true}
            />
          </Section>

          <Section title="Progression">
            <StatusProgress
              currentStatus={video.production_status}
              onStatusChange={handleStatusUpdate}
              isDisabled={isStatusChanging}
            />
          </Section>

          <Section title="Informations système">
            <div className="grid gap-3">
              <div className="flex justify-between">
                <span className="text-gray-400">Créée le</span>
                <span>{new Date(video.created_at).toLocaleDateString()}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Dernière mise à jour</span>
                <span>{new Date(video.updated_at).toLocaleDateString()}</span>
              </div>
            </div>
          </Section>

          <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm mt-6">
            <h2 className="text-lg md:text-xl font-medium mb-4">
              Commentaires internes
            </h2>
            <form onSubmit={postComment} className="mb-4">
              <textarea
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Ajouter un commentaire..."
                className="w-full p-2 bg-[#212121] border border-[#424242] rounded-lg text-[#ECECEC] focus:outline-none"
                rows={3}
              />
              <button
                type="submit"
                className="mt-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200"
              >
                Ajouter
              </button>
            </form>
            {loadingComments ? (
              <div>Chargement des commentaires...</div>
            ) : errorComments ? (
              <div className="text-red-500">{errorComments}</div>
            ) : comments.length === 0 ? (
              <div>Aucun commentaire pour le moment.</div>
            ) : (
              <ul className="space-y-3">
                {comments.map((c: Comment) => (
                  <li key={c.id} className="p-3 bg-[#212121] rounded-lg">
                    <p className="text-sm">{c.comment}</p>
                    <span className="text-xs text-gray-400">
                      {new Date(c.created_at).toLocaleString()}
                    </span>
                  </li>
                ))}
              </ul>
            )}
          </section>
        </main>
      </div>

      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
          <div className="bg-[#171717] p-6 rounded-lg shadow-xl border border-[#424242] max-w-md w-full">
            <h2 className="text-xl font-semibold mb-4 text-[#ECECEC]">
              Confirmer la suppression
            </h2>
            <p className="mb-6 text-gray-300">
              Êtes-vous sûr de vouloir supprimer la vidéo{" "}
              <strong>{video.title}</strong> ?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 bg-gray-300 text-gray-900 rounded hover:bg-gray-400 transition-colors"
                disabled={isDeleting}
              >
                Annuler
              </button>
              <button
                onClick={handleDeleteVideo}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                disabled={isDeleting}
              >
                {isDeleting ? "Suppression..." : "Supprimer"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/videos/status/[status]/page.tsx
// "use client";

// import { useEffect, useState } from "react";
// import Link from "next/link";
// import { createClient } from "@supabase/supabase-js";

// const supabase = createClient(
//   process.env.NEXT_PUBLIC_SUPABASE_URL!,
//   process.env.NEXT_PUBLIC_SUPABASE_KEY!
// );

// export default function VideosByStatus({ params }: { params: { status: string } }) {
//   const { status } = params;
//   const [videos, setVideos] = useState<any[]>([]);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     async function fetchVideos() {
//       if (!status) return;
//       const { data, error } = await supabase
//         .from("videos")
//         .select("*")
//         .eq("progress_status", status);

//       if (error) {
//         console.error("Error fetching videos:", error.message);
//       } else {
//         setVideos(data);
//       }
//       setLoading(false);
//     }

//     fetchVideos();
//   }, [status]);

//   if (loading) return <div className="text-center py-10">Chargement...</div>;

//   return (
//     <div className="container mx-auto p-6">
//       <Link href="/dashboard/stats">
//         <a className="text-blue-500 underline">← Retour aux statistiques</a>
//       </Link>
//       <h1 className="text-2xl font-bold my-4">Vidéos avec le statut : {status}</h1>

//       {videos.length === 0 ? (
//         <p className="text-gray-600">Aucune vidéo trouvée.</p>
//       ) : (
//         <ul className="divide-y divide-gray-300">
//           {videos.map((video) => (
//             <li key={video.id} className="py-2">
//               <Link href={`/dashboard/videos/${video.id}`}>
//                 <a className="text-blue-600 hover:underline">{video.title || `Vidéo ${video.id}`}</a>
//               </Link>
//             </li>
//           ))}
//         </ul>
//       )}
//     </div>
//   );
// }


===== page.tsx =====
Chemin : ./src/app/dashboard/categories/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Trash2, ArrowLeft, Archive, Inbox } from "react-feather";
import CreateVideoModal from "@/components/CreateVideoModal";

interface Video {
  id: number;
  title: string;
  production_status: string;
  created_at: string;
  updated_at: string;
  identifier: number;
}

interface Category {
  id: number;
  identifier: string;
  title: string;
  videos: Video[];
}

export default function CategoryPage({ params }: { params: { id: string } }) {
  const [category, setCategory] = useState<Category | null>(null);
  const [editingTitle, setEditingTitle] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [showArchived, setShowArchived] = useState(false);
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    fetchCategoryDetails();
  }, [params.id]);

  useEffect(() => {
    if (category) {
      setNewTitle(category.title);
    }
  }, [category]);

  const fetchCategoryDetails = async () => {
    try {
      const { data: categoryData, error: categoryError } = await supabase
        .from("video_categories")
        .select("*")
        .eq("id", params.id)
        .single();
      if (categoryError) throw categoryError;

      const { data: videosData, error: videosError } = await supabase
        .from("category_videos")
        .select("id, identifier, title, production_status, created_at, updated_at")
        .eq("category_id", params.id)
        .order("id", { ascending: true });
      if (videosError) throw videosError;

      setCategory({
        ...categoryData,
        videos: videosData || [],
      });
    } catch (err) {
      console.error("Erreur lors du chargement de la catégorie:", err);
      setError("Impossible de charger les détails de la catégorie");
    } finally {
      setIsLoading(false);
    }
  };

  const handleTitleUpdate = async () => {
    try {
      const { error } = await supabase
        .from("video_categories")
        .update({ title: newTitle })
        .eq("id", params.id);
      if (error) throw error;

      setCategory((prev) => (prev ? { ...prev, title: newTitle } : null));
      setEditingTitle(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour du titre:", err);
      setError("Impossible de mettre à jour le titre");
    }
  };

  const handleDeleteCategory = async () => {
    try {
      setIsDeleting(true);
      const response = await fetch(`/api/categories/${params.id}`, {
        method: "DELETE",
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Échec de la suppression");
      }
      router.push("/dashboard");
    } catch (err) {
      console.error("Erreur lors de la suppression de la catégorie:", err);
      setError("Impossible de supprimer la catégorie");
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center">
        Chargement...
      </div>
    );
  }

  if (error || !category) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-8">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg">
            {error || "Catégorie non trouvée"}
          </div>
          <button
            onClick={() => router.back()}
            className="mt-4 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 flex items-center gap-2"
          >
            <ArrowLeft size={16} /> Retour
          </button>
        </div>
      </div>
    );
  }

  // Séparation des vidéos actives et archivées
  const activeVideos = category.videos.filter(video => video.production_status !== "Terminé");
  const archivedVideos = category.videos.filter(video => video.production_status === "Terminé");
  const hasArchivedVideos = archivedVideos.length > 0;

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="max-w-6xl mx-auto p-8">
        {/* Barre du haut (retour + supprimer) */}
        <div className="flex justify-between items-center mb-4">
          <button
            onClick={() => router.back()}
            className="text-[#ECECEC] hover:text-gray-300 transition-colors duration-200 flex items-center gap-1.5"
          >
            <ArrowLeft size={16} /> Retour
          </button>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="flex items-center gap-1.5 px-3 py-1.5 hover:bg-black/20 text-red-500 rounded-md transition-colors duration-200 text-sm"
            disabled={isDeleting}
          >
            <Trash2 size={16} />
            {isDeleting ? "Suppression..." : "Supprimer"}
          </button>
        </div>

        {/* Titre de la catégorie (modifiable) */}
        <h1 className="text-2xl md:text-3xl font-semibold flex items-center gap-2 flex-wrap">
          <span className="break-all">{category.identifier} - </span>
          {editingTitle ? (
            <div className="flex flex-wrap sm:flex-nowrap items-center gap-2 mt-2">
              <input
                type="text"
                value={newTitle}
                onChange={(e) => setNewTitle(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    handleTitleUpdate();
                  }
                }}
                className="bg-transparent border-b border-[#424242] focus:border-[#ECECEC] outline-none px-1 w-full sm:w-auto"
                autoFocus
              />
              <button
                onClick={handleTitleUpdate}
                className="text-sm px-2 py-1 bg-[#424242] rounded flex items-center gap-1 whitespace-nowrap mt-2 sm:mt-0"
              >
                Sauvegarder
              </button>
            </div>
          ) : (
            <span
              onClick={() => setEditingTitle(true)}
              className="cursor-pointer hover:text-gray-300 break-all"
            >
              {category.title}
            </span>
          )}
        </h1>

        {/* Liste des vidéos actives */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6">
          {/* Carte spéciale pour ajouter une nouvelle vidéo */}
          <div
            onClick={() => setIsCreateModalOpen(true)}
            className="bg-[#171717] p-6 rounded-lg border-2 border-dashed border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer flex items-center justify-center min-h-[160px] group"
          >
            <div className="text-center">
              <div className="w-12 h-12 rounded-full border-2 border-[#424242] group-hover:border-[#ECECEC] flex items-center justify-center mx-auto mb-3 transition-colors duration-200">
                <span className="text-2xl text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                  +
                </span>
              </div>
              <div className="text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                Ajouter une vidéo
              </div>
            </div>
          </div>

          {/* Cartes des vidéos actives */}
          {activeVideos.map((video) => {
            const fullIdentifier = `${category.identifier}-${video.identifier}`;
            return (
              <div
                key={video.id}
                onClick={() => router.push(`/dashboard/videos/${video.id}`)}
                className="relative bg-[#171717] p-6 rounded-lg border border-[#424242] hover:border-[#ECECEC] transition-all duration-200 cursor-pointer"
              >
                <div className="absolute top-2 right-2">
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-semibold text-white ${
                      video.production_status === "À monter"
                        ? "bg-yellow-600"
                        : video.production_status === "En cours"
                        ? "bg-blue-600"
                        : video.production_status === "Prêt à publier"
                        ? "bg-green-600"
                        : "bg-[#424242]"
                    }`}
                  >
                    {video.production_status}
                  </span>
                </div>
                <div className="flex flex-col h-full">
                  <h3 className="text-xl font-medium mb-2 pr-24">
                    {fullIdentifier} {video.title}
                  </h3>
                  <div className="mt-auto text-sm text-gray-400">
                    Dernière mise à jour :{" "}
                    {new Date(video.updated_at).toLocaleDateString()}
                  </div>
                </div>
              </div>
            );
          })}

          {activeVideos.length === 0 && category.videos.length > 0 ? (
            <div className="col-span-full text-center py-12 text-gray-400">
              Toutes les vidéos sont archivées
            </div>
          ) : activeVideos.length === 0 ? (
            <div className="col-span-full text-center py-12 text-gray-400">
              Aucune vidéo dans cette catégorie
            </div>
          ) : null}
        </div>

        {/* Section des vidéos archivées (avec toggle) */}
        {hasArchivedVideos && (
          <div className="mt-12">
            <button
              onClick={() => setShowArchived(!showArchived)}
              className="flex items-center gap-2 text-[#ECECEC] bg-[#2b2b2b] hover:bg-[#333] px-4 py-2 rounded-lg mb-4 transition-colors duration-200"
            >
              {showArchived ? <Inbox size={18} /> : <Archive size={18} />}
              {showArchived ? "Masquer les vidéos terminées" : `Afficher les vidéos terminées (${archivedVideos.length})`}
            </button>

            {showArchived && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
                {archivedVideos.map((video) => {
                  const fullIdentifier = `${category.identifier}-${video.identifier}`;
                  return (
                    <div
                      key={video.id}
                      onClick={() => router.push(`/dashboard/videos/${video.id}`)}
                      className="relative bg-[#171717] p-6 rounded-lg border border-[#333] hover:border-[#ECECEC] transition-all duration-200 cursor-pointer opacity-75 hover:opacity-100"
                    >
                      <div className="absolute top-2 right-2">
                        <span className="px-2 py-1 rounded-full text-xs font-semibold text-white bg-purple-600">
                          {video.production_status}
                        </span>
                      </div>
                      <div className="flex flex-col h-full">
                        <h3 className="text-xl font-medium mb-2 pr-24">
                          {fullIdentifier} {video.title}
                        </h3>
                        <div className="mt-auto text-sm text-gray-400">
                          Dernière mise à jour :{" "}
                          {new Date(video.updated_at).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )}

        {/* Modale de création de vidéo */}
        <CreateVideoModal
          isOpen={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          onSuccess={fetchCategoryDetails}
          categoryId={params.id}
          categoryIdentifier={category.identifier}
          categoryTitle={category.title}
        />
      </div>

      {/* Fenêtre de confirmation de suppression */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center">
          <div className="bg-[#171717] p-6 rounded-lg shadow-xl border border-[#424242] max-w-md w-full">
            <h2 className="text-xl font-semibold mb-4 text-[#ECECEC]">
              Confirmer la suppression
            </h2>
            <p className="text-gray-300 mb-6">
              Êtes-vous sûr de vouloir supprimer la catégorie{" "}
              <strong>{category.title}</strong> ?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 bg-gray-300 text-gray-900 rounded hover:bg-gray-400 transition-colors"
                disabled={isDeleting}
              >
                Annuler
              </button>
              <button
                onClick={handleDeleteCategory}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                disabled={isDeleting}
              >
                {isDeleting ? "Suppression..." : "Supprimer"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

===== page.tsx =====
Chemin : ./src/app/dashboard/stats/page.tsx
"use client";

import { useEffect, useState } from "react";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title as ChartTitle,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";
import { Line, Bar } from "react-chartjs-2";
import Link from "next/link";

// shadcn/ui components
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

// Import supabase client
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ChartTitle,
  Tooltip,
  Legend,
  Filler
);

interface Stats {
  toDo: number;           // À monter
  inProgress: number;     // En cours
  readyToPublish: number; // Prêt à publier
  finished: number;       // Terminé
}

interface PerformanceData {
  avgProductionTime: string; // temps moyen de production (en jours)
  monthlyCounts: Record<string, number>;
  totalVideos: number;
}

// Pour la distribution par catégorie
interface CategoryRow {
  id: number;
  title: string;
  category_videos: Array<{
    id: number;
  }>;
}

export default function StatsPage() {
  const supabase = createClientComponentClient();

  const [stats, setStats] = useState<Stats | null>(null);
  const [performance, setPerformance] = useState<PerformanceData | null>(null);

  // Distribution par catégorie : { label: string, total: number }
  const [categoryDistribution, setCategoryDistribution] = useState<
    { label: string; total: number }[]
  >([]);

  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  // Calcul du total de vidéos toutes catégories confondues
  const totalVideos =
    stats?.toDo + stats?.inProgress + stats?.readyToPublish + stats?.finished || 0;

  // --- FETCH DE /api/stats ET /api/performance ---
  useEffect(() => {
    (async () => {
      try {
        setIsLoading(true);

        // 1. Récupération des stats par statut
        const resStats = await fetch("/api/stats");
        if (!resStats.ok) {
          throw new Error("Erreur lors de la récupération des stats");
        }
        const dataStats = (await resStats.json()) as Stats;

        // 2. Récupération des infos de performance
        const resPerf = await fetch("/api/performance");
        if (!resPerf.ok) {
          throw new Error("Erreur lors de la récupération de la performance");
        }
        const dataPerf = (await resPerf.json()) as PerformanceData;

        setStats(dataStats);
        setPerformance(dataPerf);
      } catch (err) {
        console.error("Erreur:", err);
        setError(
          "Impossible de charger les données. Veuillez réessayer plus tard."
        );
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);

  // --- FETCH DE LA DISTRIBUTION PAR CATÉGORIE ---
  useEffect(() => {
    (async () => {
      try {
        // On récupère la liste des catégories + la liste des vidéos associées
        const { data, error } = await supabase
          .from("video_categories")
          .select("id, title, category_videos (id)")
          .order("title", { ascending: true });

        if (error) {
          throw new Error(error.message);
        }

        const catRows = (data || []) as CategoryRow[];
        // On calcule, pour chaque catégorie, le total de vidéos
        const distribution = catRows.map((cat) => ({
          label: cat.title,
          total: cat.category_videos ? cat.category_videos.length : 0,
        }));

        setCategoryDistribution(distribution);
      } catch (err: any) {
        console.error("Erreur fetch category distribution:", err);
      }
    })();
  }, [supabase]);

  // --- PREPARATION DU PREMIER CHART (Évolution par statut) ---
  const chartDataByStatus = {
    labels: ["À monter", "En cours", "Prêt à publier", "Terminé"],
    datasets: [
      {
        label: "Vidéos",
        data: stats
          ? [stats.toDo, stats.inProgress, stats.readyToPublish, stats.finished]
          : [],
        borderColor: "#3b82f6",
        backgroundColor: "rgba(59, 130, 246, 0.2)",
        borderWidth: 3,
        tension: 0.4,
        fill: true,
        pointRadius: 6,
        pointBackgroundColor: "#3b82f6",
        pointBorderColor: "#171717",
        pointBorderWidth: 2,
        pointHoverRadius: 8,
        pointHoverBackgroundColor: "#ffffff",
        pointHoverBorderColor: "#3b82f6",
        pointHoverBorderWidth: 2,
      },
    ],
  };

  const chartOptionsByStatus = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { display: false },
      tooltip: {
        backgroundColor: "rgba(23, 23, 23, 0.9)",
        titleColor: "#fff",
        bodyColor: "#fff",
        padding: 12,
        borderColor: "rgba(59, 130, 246, 0.5)",
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: false,
        callbacks: {
          title: (tooltipItems: any) => tooltipItems[0].label,
          label: (context: any) => `${context.formattedValue} vidéos`,
        },
      },
    },
    scales: {
      x: {
        grid: { display: false },
        ticks: {
          color: "#a1a1aa",
          font: { size: 11 },
          padding: 8,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
      },
      y: {
        grid: {
          color: "rgba(255, 255, 255, 0.05)",
          lineWidth: 1,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
        ticks: {
          color: "#a1a1aa",
          stepSize: 1,
          font: { size: 11 },
          padding: 8,
        },
        beginAtZero: true,
      },
    },
    interaction: {
      mode: "index" as const,
      intersect: false,
    },
    elements: {
      line: {
        capBezierPoints: true,
      },
    },
    animation: {
      duration: 1500,
      easing: "easeOutQuart",
    },
  };

  // --- PREPARATION DU SECOND CHART (Vidéos terminées par mois) ---
  const monthlyCounts = performance?.monthlyCounts || {};
  const months = Object.keys(monthlyCounts).sort();
  const counts = months.map((m) => monthlyCounts[m]);

  const chartDataByMonth = {
    labels: months,
    datasets: [
      {
        label: "Vidéos terminées",
        data: counts,
        backgroundColor: "rgba(147, 51, 234, 0.6)",
        borderColor: "#9333EA",
        borderWidth: 2,
      },
    ],
  };

  const chartOptionsByMonth = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { display: false },
      tooltip: {
        backgroundColor: "rgba(23, 23, 23, 0.9)",
        titleColor: "#fff",
        bodyColor: "#fff",
        padding: 12,
        borderColor: "rgba(147, 51, 234, 0.5)",
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: false,
        callbacks: {
          title: (tooltipItems: any) => `Mois: ${tooltipItems[0].label}`,
          label: (context: any) => `${context.formattedValue} vidéos`,
        },
      },
    },
    scales: {
      x: {
        grid: { display: false },
        ticks: {
          color: "#a1a1aa",
          font: { size: 11 },
          padding: 8,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
      },
      y: {
        grid: {
          color: "rgba(255, 255, 255, 0.05)",
          lineWidth: 1,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
        ticks: {
          color: "#a1a1aa",
          font: { size: 11 },
          padding: 8,
        },
        beginAtZero: true,
      },
    },
    animation: {
      duration: 1500,
      easing: "easeOutQuart",
    },
  };

  // --- NOUVEAU CHART : DISTRIBUTION PAR CATÉGORIE ---
  // On construit un bar chart simple : X = noms de catégorie, Y = total de vidéos
  const catLabels = categoryDistribution.map((c) => c.label);
  const catCounts = categoryDistribution.map((c) => c.total);

  const chartDataByCategory = {
    labels: catLabels,
    datasets: [
      {
        label: "Nombre de vidéos",
        data: catCounts,
        backgroundColor: "rgba(34, 197, 94, 0.6)", // un vert (tailwind: green-500)
        borderColor: "#22c55e",
        borderWidth: 2,
      },
    ],
  };

  const chartOptionsByCategory = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { display: false },
      tooltip: {
        backgroundColor: "rgba(23, 23, 23, 0.9)",
        titleColor: "#fff",
        bodyColor: "#fff",
        padding: 12,
        borderColor: "rgba(34, 197, 94, 0.5)",
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: false,
        callbacks: {
          title: (tooltipItems: any) => tooltipItems[0].label,
          label: (context: any) => `${context.formattedValue} vidéos`,
        },
      },
    },
    scales: {
      x: {
        grid: { display: false },
        ticks: {
          color: "#a1a1aa",
          font: { size: 11 },
          padding: 8,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
      },
      y: {
        grid: {
          color: "rgba(255, 255, 255, 0.05)",
          lineWidth: 1,
        },
        border: {
          color: "rgba(255, 255, 255, 0.1)",
        },
        ticks: {
          color: "#a1a1aa",
          font: { size: 11 },
          padding: 8,
        },
        beginAtZero: true,
      },
    },
    animation: {
      duration: 1500,
      easing: "easeOutQuart",
    },
  };

  // Items de status (pour affichage résumé + barres colorées)
  const statusItems = [
    {
      title: "À monter",
      value: stats?.toDo || 0,
      bgColor: "bg-yellow-600",
    },
    {
      title: "En cours",
      value: stats?.inProgress || 0,
      bgColor: "bg-blue-600",
    },
    {
      title: "Prêt à publier",
      value: stats?.readyToPublish || 0,
      bgColor: "bg-purple-600",
    },
    {
      title: "Terminé",
      value: stats?.finished || 0,
      bgColor: "bg-green-600",
    },
  ];

  return (
    <div className="p-4 md:p-6 text-gray-200 min-h-screen">
      <header className="mb-6">
        <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-white">
          Statistiques
        </h1>
        <p className="text-sm text-gray-400 mt-1">
          Aperçu global de la production vidéo
        </p>
      </header>

      {/* Indicateur de chargement + gestion d'erreur */}
      {isLoading && !error && (
        <div className="space-y-6">
          <Skeleton className="h-10 w-1/3 bg-gray-800" />
          <div className="grid grid-cols-2 gap-3">
            {[1, 2, 3, 4].map((item) => (
              <Skeleton key={item} className="h-24 w-full bg-gray-800" />
            ))}
          </div>
          <Skeleton className="h-80 w-full bg-gray-800" />
        </div>
      )}

      {error && (
        <Card className="bg-red-900/20 border border-red-700 text-red-300 p-4 mb-6">
          <div className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="text-red-400"
            >
              <circle cx="12" cy="12" r="10" />
              <line x1="12" y1="8" x2="12" y2="12" />
              <line x1="12" y1="16" x2="12.01" y2="16" />
            </svg>
            <div>
              <h3 className="font-medium text-red-200">Erreur de chargement</h3>
              <p className="text-sm mt-1">{error}</p>
            </div>
          </div>
        </Card>
      )}

      {!isLoading && !error && stats && performance && (
        <div className="space-y-6">
          {/* Cartes de stats (à monter, en cours, prêt, terminé) */}
          <div className="grid grid-cols-2 gap-3">
            {statusItems.map((item) => {
              const percentage = totalVideos > 0
                ? Math.round((item.value / totalVideos) * 100)
                : 0;
              return (
                <Card
                  key={item.title}
                  className="bg-[#1a1a1a] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300"
                >
                  <CardContent className="p-3">
                    <p className="text-gray-400 text-sm">{item.title}</p>
                    <div className="mt-2 flex items-center justify-between">
                      <span className="text-3xl font-bold text-white">
                        {item.value}
                      </span>
                      <Badge className={`${item.bgColor} ml-2`}>
                        {percentage}%
                      </Badge>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Graphique #1: répartition des vidéos par statut */}
          <Card className="bg-[#171717] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300 overflow-hidden">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <CardTitle className="text-white flex items-center text-lg">
                  <span>Évolution par statut</span>
                </CardTitle>
                <Badge className="bg-blue-900/50 text-blue-200">
                  {totalVideos} vidéos total
                </Badge>
              </div>
              <CardDescription className="text-gray-400 text-sm">
                Nombre de vidéos selon leur étape de production
              </CardDescription>
            </CardHeader>
            <CardContent className="px-2 pt-2 pb-0">
              <div className="relative w-full h-64 sm:h-72">
                <Line data={chartDataByStatus} options={chartOptionsByStatus} />
              </div>
            </CardContent>
          </Card>

          {/* Cartes Performance + Distribution (barres horizontales) */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

            {/* Carte 2: Distribution (progress bars) */}
            <Card className="bg-[#171717] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300">
              <CardHeader className="pb-2">
                <CardTitle className="text-white text-lg">Distribution</CardTitle>
                <CardDescription className="text-gray-400 text-sm">
                  Répartition des statuts
                </CardDescription>
              </CardHeader>
              <CardContent>
                {statusItems.map((item) => {
                  const pct = totalVideos > 0
                    ? Math.round((item.value / totalVideos) * 100)
                    : 0;
                  return (
                    <div key={item.title} className="mb-3">
                      <div className="flex justify-between mb-1">
                        <span className="text-sm text-gray-300">{item.title}</span>
                        <span className="text-sm text-gray-400">{pct}%</span>
                      </div>
                      <div className="w-full bg-gray-800 rounded-full h-2.5">
                        <div
                          className={`${item.bgColor} h-2.5 rounded-full`}
                          style={{ width: `${pct}%` }}
                        />
                      </div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          </div>

          {/* Graphique #2: nombre de vidéos terminées par mois */}
          <Card className="bg-[#171717] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300">
            <CardHeader className="pb-2">
              <CardTitle className="text-white text-lg">
                Vidéos terminées par mois
              </CardTitle>
              <CardDescription className="text-gray-400 text-sm">
                Historique des exports/terminaisons
              </CardDescription>
            </CardHeader>
            <CardContent className="px-2 pt-2 pb-0">
              <div className="relative w-full h-64 sm:h-72">
                {months.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    Aucune donnée mensuelle
                  </div>
                ) : (
                  <Bar data={chartDataByMonth} options={chartOptionsByMonth} />
                )}
              </div>
            </CardContent>
          </Card>

          {/* NOUVEAU Graphique #3: nombre total de vidéos par catégorie */}
          <Card className="bg-[#171717] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300">
            <CardHeader className="pb-2">
              <CardTitle className="text-white text-lg">
                Répartition par catégorie
              </CardTitle>
              <CardDescription className="text-gray-400 text-sm">
                Nombre de vidéos pour chaque catégorie
              </CardDescription>
            </CardHeader>
            <CardContent className="px-2 pt-2 pb-0">
              <div className="relative w-full h-64 sm:h-72">
                {categoryDistribution.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    Aucune catégorie ou aucune vidéo
                  </div>
                ) : (
                  <Bar
                    data={chartDataByCategory}
                    options={chartOptionsByCategory}
                  />
                )}
              </div>
            </CardContent>
          </Card>

          {/* Récapitulatif détaillé (table) */}
          <Card className="bg-[#171717] border border-[#2a2a2a] hover:border-gray-600 transition-all duration-300">
            <CardHeader className="pb-2">
              <CardTitle className="text-white text-lg">Récapitulatif détaillé</CardTitle>
              <CardDescription className="text-gray-400 text-sm">
                Distribution des vidéos par statut
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow className="border-b border-gray-800">
                    <TableHead className="text-gray-400">Statut</TableHead>
                    <TableHead className="text-right text-gray-400">Quantité</TableHead>
                    <TableHead className="text-right text-gray-400">Pourcentage</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {statusItems.map((item) => {
                    const pct = totalVideos > 0
                      ? Math.round((item.value / totalVideos) * 100)
                      : 0;
                    return (
                      <TableRow
                        key={item.title}
                        className="border-b border-gray-800 hover:bg-[#1d1d1d]"
                      >
                        <TableCell className="font-medium text-gray-300 flex items-center">
                          <span className={`w-3 h-3 rounded-full mr-2 ${item.bgColor}`} />
                          {item.title}
                        </TableCell>
                        <TableCell className="text-right font-semibold text-white">
                          {item.value}
                        </TableCell>
                        <TableCell className="text-right text-gray-400">
                          {pct}%
                        </TableCell>
                      </TableRow>
                    );
                  })}
                  <TableRow className="bg-[#1a1a1a]">
                    <TableCell className="font-bold text-white">Total</TableCell>
                    <TableCell className="text-right font-bold text-white">
                      {totalVideos}
                    </TableCell>
                    <TableCell className="text-right font-bold text-white">
                      100%
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </CardContent>
            <CardFooter className="text-xs text-gray-500 pt-0">
              Dernière mise à jour:{" "}
              {new Date().toLocaleDateString("fr-FR", {
                day: "numeric",
                month: "long",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
              })}
            </CardFooter>
          </Card>
        </div>
      )}
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/priorities/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

interface VideoPriority {
  id: number;
  title: string;
  production_status: string;
  updated_at: string;
  priority: number;
}

export default function PrioritiesPage() {
  const [videos, setVideos] = useState<VideoPriority[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchPriorities = async () => {
      try {
        const response = await fetch("/api/priorities");
        if (!response.ok) {
          throw new Error("Erreur lors de la récupération des priorités");
        }
        const data = await response.json();
        setVideos(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement des priorités", err);
        setError("Impossible de charger les priorités");
      } finally {
        setIsLoading(false);
      }
    };

    fetchPriorities();
  }, []);

  return (
    <div className="p-4 text-[#ECECEC]">
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">Priorisation et planification</h1>
      </header>
      {isLoading ? (
        <div>Chargement...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : videos.length === 0 ? (
        <div>Aucune vidéo prioritaire à afficher.</div>
      ) : (
        <div className="space-y-4">
          {videos.map((video) => (
            <div
              key={video.id}
              className="p-4 bg-[#171717] rounded-lg cursor-pointer hover:bg-[#212121] transition-colors"
              onClick={() => router.push(`/dashboard/videos/${video.id}`)}
            >
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-bold">{video.title}</h2>
                <span className="px-3 py-1 rounded-full bg-red-600 text-white text-sm">
                  Priorité: {video.priority}
                </span>
              </div>
              <p>Statut: {video.production_status}</p>
              <p>
                Dernière mise à jour: {new Date(video.updated_at).toLocaleDateString()}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}


===== video.ts =====
Chemin : ./src/types/video.ts
export interface Video {
  id: number;
  title: string;
  status: 'pending' | 'finished' | 'ready_to_publish';
  created_at: string;
  updated_at: string;
  category_id: number;
  description?: string;
  video_url?: string;
  thumbnail_url?: string;
  instructions_miniature: string;
  rush_link: string;
  video_link: string;
  miniature_link: string;
  production_status: Status;
  identifier?: number;
  fullIdentifier?: string;
}

export const VIDEO_STATUS = {
  TO_DO: 'À monter',
  IN_PROGRESS: 'En cours',
  READY_TO_PUBLISH: 'Prêt à publier',
  FINISHED: 'Terminé'
} as const;

export type Status = typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS];

export interface StatusStep {
  value: Status;
  label: string;
  description: string;
}


===== next-auth.types.d.ts =====
Chemin : ./types/next-auth.types.d.ts
import NextAuth, { DefaultSession, DefaultUser } from "next-auth";
import "next-auth/jwt";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      role?: string | null;
    } & DefaultSession["user"];
  }
  interface User extends DefaultUser {
    id: string;
    role?: string | null;
  }
  interface AdapterUser extends User {}
}

declare module "next-auth/jwt" {
  interface JWT {
    id?: string;
    role?: string | null;
    name?: string;
  }
}


