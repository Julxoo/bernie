===== tailwind.config.ts =====
Chemin : ./tailwind.config.ts
import type { Config } from "tailwindcss";

const config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)"
      }
    }
  },
  plugins: []
} satisfies Config;

export default config;


===== postcss.config.js =====
Chemin : ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};


===== tsconfig.json =====
Chemin : ./tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "next-env.d.ts",
    "types/**/*.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "files_content.txt"
  ]
}


===== next.config.mjs =====
Chemin : ./next.config.mjs
const nextConfig = {
  reactStrictMode: true,
};

export default nextConfig;


===== .eslintrc.js =====
Chemin : ./.eslintrc.js
module.exports = {
  extends: ["next/core-web-vitals", "next/typescript"],
};


===== listfiles.py =====
Chemin : ./listfiles.py
import os

def get_files_content(directory, excluded_files):
    files_data = []
    
    for root, dirs, files in os.walk(directory):
        # Exclure certains dossiers pour éviter de parcourir des répertoires non désirés
        dirs[:] = [d for d in dirs if os.path.join(root, d) not in excluded_files]
        
        for file in files:
            file_path = os.path.join(root, file)
            # Si le chemin complet du fichier est dans la liste d'exclusion, on passe au suivant
            if file_path in excluded_files:
                continue
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                files_data.append({"name": file, "path": file_path, "content": content})
            except Exception as e:
                print(f"Erreur lors de la lecture du fichier {file_path}: {e}")
    
    return files_data

def save_to_text(data, output_file):
    with open(output_file, 'w', encoding='utf-8') as f:
        for file in data:
            f.write(f"===== {file['name']} =====\n")
            f.write(f"Chemin : {file['path']}\n")
            f.write(file['content'] + "\n\n")

if __name__ == "__main__":
    directory = "./"
    output_file = "files_content.txt"
    
    excluded_files = {
        os.path.join(directory, ".env.local"),
        os.path.join(directory, ".gitignore"),
        os.path.join(directory, "eslint.config.mjs"),
        os.path.join(directory, "next-env.d.ts"),
        os.path.join(directory, "next.config.ts"),
        os.path.join(directory, "package-lock.json"),
        os.path.join(directory, "package.json"),
        os.path.join(directory, "postcss.config.mjs"),
        os.path.join(directory, "README.md"),
        os.path.join(directory, ".next"),
        os.path.join(directory, "node_modules"),
        os.path.join(directory, "files_content.txt")  # Ajout pour éviter de relire le fichier de sortie
    }
    
    if os.path.exists(directory):
        files_content = get_files_content(directory, excluded_files)
        save_to_text(files_content, output_file)
        print(f"Les données ont été enregistrées dans {output_file}")
    else:
        print(f"Le dossier {directory} n'existe pas.")


===== middleware.ts =====
Chemin : ./src/middleware.ts
// src/middleware.ts
import { getToken } from "next-auth/jwt";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  // Vérification de la présence d'un token NextAuth
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  
  if (!token) {
    return NextResponse.redirect(new URL("/login", req.url));
  }
  
  return NextResponse.next();
}

export const config = {
  matcher: ["/dashboard/:path*", "/api/:path*"],
};


===== useEditable.ts =====
Chemin : ./src/hooks/useEditable.ts
import { useState, useRef, useEffect } from "react";

export const useEditable = (
  initialValue: string,
  onSave: (value: string) => Promise<void>,
  delay = 500
) => {
  const [editing, setEditing] = useState(false);
  const [value, setValue] = useState(initialValue);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!editing) {
      setValue(initialValue);
    }
  }, [initialValue, editing]);

  const handleChange = (newVal: string) => {
    setValue(newVal);
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(async () => {
      await onSave(newVal);
    }, delay);
  };

  const handleBlur = async () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    await onSave(value);
    setEditing(false);
  };

  return {
    editing,
    value,
    setEditing,
    handleChange,
    handleBlur,
  };
};


===== urlUtils.ts =====
Chemin : ./src/utils/urlUtils.ts
export const isUrl = (str: string): boolean => {
    const pattern = new RegExp(
      "^(https?:\\/\\/)?" + // protocole
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // nom de domaine
        "((\\d{1,3}\\.){3}\\d{1,3}))" + // ou adresse IP
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port et chemin
        "(\\?[;&a-z\\d%_.~+=-]*)?" + // chaîne de requête
        "(\\#[-a-z\\d_]*)?$", // fragment
      "i"
    );
    return pattern.test(str);
  };
  

===== supabaseClient.ts =====
Chemin : ./src/utils/supabaseClient.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey) 

===== videoService.ts =====
Chemin : ./src/services/videoService.ts
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Video } from "../types/video";

const supabase = createClientComponentClient();

// Interface décrivant la structure attendue des données retournées par Supabase
interface VideoDetailsResult {
  id: number;
  identifier: number;
  title: string;
  production_status: string;
  created_at: string;
  updated_at: string;
  video_details: Array<{
    title: string;
    instructions_miniature: string;
    rush_link: string;
    video_link: string;
    miniature_link: string;
    production_status: string;
    description: string;
  }>;
  video_categories: { identifier: string }[] | null;
}

/**
 * Met à jour un champ donné dans les tables "category_videos" et "video_details".
 * @param id - L'ID de la vidéo.
 * @param field - Le nom du champ à mettre à jour.
 * @param value - La nouvelle valeur.
 */
const updateFieldAcrossTables = async (
  id: string,
  field: string,
  value: string
): Promise<void> => {
  const { error: errorVideo } = await supabase
    .from("category_videos")
    .update({ [field]: value })
    .eq("id", id);
  const { error: errorDetails } = await supabase
    .from("video_details")
    .update({ [field]: value })
    .eq("category_video_id", id);

  if (errorVideo || errorDetails) {
    throw new Error(`Erreur lors de la mise à jour du champ "${field}"`);
  }
};

export const fetchVideoDetails = async (id: string): Promise<Video> => {
  const { data, error } = await supabase
    .from("category_videos")
    .select(
      `
      id,
      identifier,
      title,
      production_status,
      created_at,
      updated_at,
      video_details (
        title,
        instructions_miniature,
        rush_link,
        video_link,
        miniature_link,
        production_status,
        description
      ),
      video_categories!fk_category (identifier)
    `
    )
    .eq("id", id)
    .single();

  if (error) {
    console.error("Erreur Supabase dans fetchVideoDetails :", error);
    throw error;
  }
  if (!data) {
    throw new Error("Détails de la vidéo introuvables");
  }

  // Conversion via unknown pour ensuite le caster en VideoDetailsResult
  const parsedData = data as unknown as VideoDetailsResult;
  const { video_categories, video_details, ...rest } = parsedData;
  const categoryIdentifier =
    video_categories && video_categories.length > 0
      ? video_categories[0].identifier
      : "";
  const numericIdentifier = parsedData.identifier || 0;
  const fullIdentifier = `${categoryIdentifier}-${numericIdentifier}`;

  return {
    ...rest,
    ...(video_details ? video_details[0] : {}),
    fullIdentifier,
  } as Video;
};

export const updateTitle = async (
  id: string,
  newTitle: string
): Promise<void> => {
  await updateFieldAcrossTables(id, "title", newTitle);
};

export const updateDescription = async (
  id: string,
  newDescription: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ description: newDescription })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour de la description");
  }
};

export const updateInstructions = async (
  id: string,
  newInstructions: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ instructions_miniature: newInstructions })
    .eq("category_video_id", id);
  if (error) {
    throw new Error("Erreur lors de la mise à jour des instructions");
  }
};

export const updateLink = async (
  id: string,
  field: string,
  value: string
): Promise<void> => {
  const { error } = await supabase
    .from("video_details")
    .update({ [field]: value })
    .eq("category_video_id", id);
  if (error) {
    throw new Error(`Erreur lors de la mise à jour du lien "${field}"`);
  }
};

export const updateStatus = async (
  id: string,
  newStatus: string
): Promise<void> => {
  await updateFieldAcrossTables(id, "production_status", newStatus);
};


===== Sidebar.tsx =====
Chemin : ./src/components/Sidebar.tsx
// src/components/Sidebar.tsx
"use client";

import Link from "next/link";
import { useSession } from "next-auth/react";

interface SidebarProps {
  isOpen: boolean;
  onToggle: () => void;
  onSignOut: () => void;
}

export default function Sidebar({ isOpen, onToggle, onSignOut }: SidebarProps) {
  const { data: session } = useSession(); // Ce hook fonctionne maintenant car l'application est enveloppée dans SessionProvider

  return (
    <aside
      className={`fixed inset-y-0 left-0 transform transition-transform duration-300 ease-in-out z-40 w-64 bg-[#171717] flex flex-col border-r border-[#424242] ${
        isOpen ? "translate-x-0" : "-translate-x-full"
      } md:static md:translate-x-0`}
    >
      <div className="p-6">
        <h1 className="text-xl font-semibold text-[#ECECEC]">Dashboard</h1>
      </div>
      <nav className="flex-1 p-4">
        <ul className="space-y-2">
          <li>
            <Link
              href="/dashboard"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
              onClick={onToggle}
            >
              Catégories
            </Link>
          </li>
          <li>
            <Link
              href="/dashboard/stats"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
              onClick={onToggle}
            >
              Statistiques
            </Link>
          </li>
          <li>
            <Link
              href="/dashboard/alerts"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
              onClick={onToggle}
            >
              Alertes
            </Link>
          </li>
          <li>
            <Link
              href="/dashboard/priorities"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
              onClick={onToggle}
            >
              Priorités
            </Link>
          </li>
          <li>
            <Link
              href="/dashboard/performance"
              className="text-[#ECECEC] hover:text-gray-300 block py-2"
              onClick={onToggle}
            >
              Performance
            </Link>
          </li>
          {session?.user?.role === "admin" && (
            <li>
              <Link
                href="/dashboard/admin"
                className="text-[#ECECEC] hover:text-gray-300 block py-2"
                onClick={onToggle}
              >
                Administration
              </Link>
            </li>
          )}
        </ul>
      </nav>
      <div className="p-4 border-t border-[#424242]">
        <button
          onClick={onSignOut}
          className="w-full px-4 py-2 text-sm bg-[#424242] hover:bg-[#171717] rounded-lg transition-colors duration-200 border border-[#424242] text-[#ECECEC]"
        >
          Déconnexion
        </button>
      </div>
    </aside>
  );
}


===== EditableItem.tsx =====
Chemin : ./src/components/EditableItem.tsx
"use client";

import { useState } from "react";
import { EditableField } from "./EditableField";
import { Copy } from "react-feather";

interface EditableItemProps {
  label: string;
  value: string;
  placeholder: string;
  onSave: (newValue: string) => Promise<void>;
  inputType?: "text" | "textarea";
  isLink?: boolean;
  copyable?: boolean; // Nouvelle prop pour activer la copie
}

export default function EditableItem({
  label,
  value,
  placeholder,
  onSave,
  inputType = "text",
  copyable = false,
}: EditableItemProps) {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(value);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Erreur lors de la copie", err);
    }
  };

  return (
    <div className="flex flex-col sm:flex-row sm:items-start gap-2">
      {label && (
        <span className="text-gray-400 min-w-[100px]">{label}</span>
      )}
      <div className="w-full sm:ml-4 flex items-center gap-2">
        <EditableField
          value={value}
          onSave={onSave}
          inputType={inputType}
          placeholder={placeholder}
          autoFocus
        />
        {copyable && (
          <button
            onClick={handleCopy}
            className="p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            title="Copier"
          >
            <Copy size={16} />
            {copied && <span className="text-xs ml-1">Copié</span>}
          </button>
        )}
      </div>
    </div>
  );
}


===== EditableField.tsx =====
Chemin : ./src/components/EditableField.tsx
"use client";

import { useEditable } from "../hooks/useEditable";
import { isUrl } from "../utils/urlUtils";
import React from "react";
import { ExternalLink } from "react-feather";

interface EditableFieldProps {
  value: string;
  onSave: (newValue: string) => Promise<void>;
  inputType?: "text" | "textarea";
  placeholder?: string;
  className?: string;
  autoFocus?: boolean;
}

export function EditableField({
  value,
  onSave,
  inputType = "text",
  placeholder = "",
  className = "",
  autoFocus = false,
}: EditableFieldProps) {
  const {
    editing,
    value: localValue,
    setEditing,
    handleChange,
    handleBlur,
  } = useEditable(value, onSave);

  const inputStyles =
    "bg-transparent border border-[#424242] focus:border-[#ECECEC] outline-none rounded w-full";

  const handleKeyDown = (
    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    // Pour les inputs : on capture "Enter" (et pour textarea, si Shift n'est pas pressé)
    if (e.key === "Enter" && (inputType !== "textarea" || !e.shiftKey)) {
      e.preventDefault();
      handleBlur();
    }
  };

  if (editing) {
    return (
      <div className={className}>
        {inputType === "textarea" ? (
          <textarea
            value={localValue}
            onChange={(e) => handleChange(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={`${inputStyles} p-2`}
            rows={4}
            autoFocus={autoFocus}
            onBlur={handleBlur}
            enterKeyHint="done"
          />
        ) : (
          <input
            type="text"
            value={localValue}
            onChange={(e) => handleChange(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={`${inputStyles} px-2 py-1`}
            autoFocus={autoFocus}
            onBlur={handleBlur}
            enterKeyHint="done"
          />
        )}
      </div>
    );
  }

  return (
    <div className={className}>
      {value ? (
        isUrl(value) ? (
          <div className="flex items-center gap-2">
            <span
              onClick={() => setEditing(true)}
              className="cursor-pointer hover:text-gray-300 p-1 rounded hover:bg-[#2a2a2a] transition-colors break-all flex-1"
            >
              {value}
            </span>
            <a
              href={value}
              target="_blank"
              rel="noreferrer"
              className="cursor-pointer hover:underline text-blue-400"
              onClick={(e) => e.stopPropagation()}
              aria-label="Ouvrir le lien"
            >
              <ExternalLink size={16} />
            </a>
          </div>
        ) : (
          <span
            onClick={() => setEditing(true)}
            className="cursor-pointer hover:text-gray-300 p-1 rounded hover:bg-[#2a2a2a] transition-colors break-all"
          >
            {value}
          </span>
        )
      ) : (
        <span
          onClick={() => setEditing(true)}
          className="cursor-pointer italic p-1 rounded hover:bg-[#2a2a2a] transition-colors"
        >
          {placeholder}
        </span>
      )}
    </div>
  );
}


===== CreateVideoModal.tsx =====
Chemin : ./src/components/CreateVideoModal.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateVideoModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  categoryId: string; // ID numérique de la catégorie
  categoryIdentifier: string; // Par ex. "A"
  categoryTitle: string; // Par ex. "Vidéo Grattage/Casino"
}

export default function CreateVideoModal({
  isOpen,
  onClose,
  onSuccess,
  categoryId,
  categoryIdentifier,
  categoryTitle,
}: CreateVideoModalProps) {
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // Identifiant numérique de la vidéo (ex. 1, 2, 3...)
  const [videoIdentifier, setVideoIdentifier] = useState<number>(0);

  // Titre de la vidéo
  const [videoTitle, setVideoTitle] = useState("");

  const supabase = createClientComponentClient();

  const fetchNextVideoIdentifier = useCallback(async () => {
    try {
      setError("");

      // Récupérer le plus grand "identifier" existant dans la catégorie
      const { data, error } = await supabase
        .from("category_videos")
        .select("identifier")
        .eq("category_id", Number(categoryId))
        .order("identifier", { ascending: false })
        .limit(1);

      if (error) throw error;

      // S'il n'y a aucune vidéo, on part de 0
      const lastIdentifier = data && data.length > 0 ? data[0].identifier : 0;
      const nextIdentifier = lastIdentifier + 1;
      setVideoIdentifier(nextIdentifier);
    } catch (err: unknown) {
      console.error(
        "Erreur lors de la récupération de l'identifiant vidéo:",
        err
      );
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError(
          "Erreur inconnue lors de la récupération de l'identifiant vidéo"
        );
      }
    }
  }, [supabase, categoryId]);

  useEffect(() => {
    if (isOpen) {
      fetchNextVideoIdentifier();
      setVideoTitle(""); // reset du champ titre
    }
  }, [isOpen, fetchNextVideoIdentifier]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      if (!videoTitle.trim()) {
        throw new Error("Le titre de la vidéo ne peut être vide.");
      }
      if (videoIdentifier <= 0) {
        throw new Error("L'identifiant de la vidéo est invalide.");
      }

      // Exemple de statut par défaut
      const defaultProductionStatus = "À monter";

      // 1. Insertion dans category_videos
      const { data: inserted, error: insertError } = await supabase
        .from("category_videos")
        .insert([
          {
            category_id: Number(categoryId),
            identifier: videoIdentifier, // On insère l'identifiant numérique
            title: videoTitle,
            production_status: defaultProductionStatus,
          },
        ])
        .select()
        .single();

      if (insertError) throw insertError;

      // 2. Insertion dans video_details (optionnel, si vous l'utilisez)
      const { error: detailsError } = await supabase
        .from("video_details")
        .insert([
          {
            category_video_id: inserted.id,
            title: videoTitle,
            production_status: defaultProductionStatus,
          },
        ]);

      if (detailsError) throw detailsError;

      onSuccess();
      onClose();
    } catch (err: unknown) {
      console.error("Erreur lors de la création de la vidéo :", err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Erreur inconnue lors de la création de la vidéo");
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  // Identifiant complet ex. "A-1"
  const fullIdentifier = `${categoryIdentifier}-${videoIdentifier}`;

  return (
    <div
      className="
        fixed inset-0 bg-black bg-opacity-50
        flex items-center justify-center z-50
        px-4 py-4
      "
    >
      <div
        className="
          bg-[#171717]
          p-4 sm:p-8
          rounded-lg
          w-full max-w-md
          border border-[#424242]
        "
      >
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">
          Nouvelle vidéo
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          {/* Catégorie (en lecture seule) */}
          <div className="mb-4">
            <label
              htmlFor="categoryName"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Catégorie
            </label>
            <input
              id="categoryName"
              type="text"
              value={categoryTitle}
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                cursor-not-allowed opacity-50
              "
              readOnly
              disabled
            />
          </div>

          {/* Identifiant complet (lecture seule, non modifiable) */}
          <div className="mb-4">
            <label className="block mb-2 text-sm font-medium text-[#ECECEC]">
              Identifiant complet
            </label>
            <div
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                cursor-not-allowed opacity-50
              "
            >
              {fullIdentifier}
            </div>
            <p className="text-xs text-gray-400 mt-1">
              Cet identifiant est généré automatiquement.
            </p>
          </div>

          {/* Titre de la vidéo */}
          <div className="mb-4">
            <label
              htmlFor="videoTitle"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Titre de la vidéo
            </label>
            <input
              id="videoTitle"
              type="text"
              value={videoTitle}
              onChange={(e) => setVideoTitle(e.target.value)}
              className="
                w-full p-3 rounded-lg bg-[#212121]
                border border-[#424242]
                text-[#ECECEC]
                focus:outline-none focus:border-[#ECECEC]
              "
              placeholder="Saisissez un titre pour la vidéo..."
              required
              disabled={isLoading}
            />
          </div>

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="
                px-4 py-2 text-[#ECECEC] rounded-lg
                hover:bg-[#212121] transition-colors duration-200
              "
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="
                px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg
                hover:bg-[#171717] transition-colors duration-200
                border border-[#424242] disabled:opacity-50
              "
              disabled={isLoading}
            >
              {isLoading ? "Ajout en cours..." : "Ajouter"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


===== Header.tsx =====
Chemin : ./src/components/Header.tsx
"use client";

import { useRouter } from "next/navigation";
import { MenuIcon, XIcon } from "lucide-react";

interface HeaderProps {
  title?: string;
  isSidebarOpen?: boolean;
  onToggleSidebar?: () => void;
}

export default function Header({
  title = "Dashboard",
  isSidebarOpen = false,
  onToggleSidebar,
}: HeaderProps) {
  const router = useRouter();

  return (
    <header className="flex items-center justify-between p-4 bg-[#171717] border-b border-[#424242]">
      <div className="flex items-center gap-2">
        {onToggleSidebar && (
          <button onClick={onToggleSidebar} className="md:hidden focus:outline-none">
            {isSidebarOpen ? <XIcon size={24} /> : <MenuIcon size={24} />}
          </button>
        )}
        <h1 className="text-xl font-semibold text-[#ECECEC]">{title}</h1>
      </div>
      <nav>
        <button
          onClick={() => router.push("/dashboard")}
          className="text-[#ECECEC] hover:text-gray-300 transition-colors"
        >
          Accueil
        </button>
      </nav>
    </header>
  );
}


===== ErrorState.tsx =====
Chemin : ./src/components/ErrorState.tsx
import { ArrowLeft } from "react-feather";

interface ErrorStateProps {
  error: string | null;
  onBack: () => void;
}

export default function ErrorState({ error, onBack }: ErrorStateProps) {
  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-4">
      <div className="max-w-4xl mx-auto">
        <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-4">
          {error || "Erreur inconnue"}
        </div>
        <button
          onClick={onBack}
          className="inline-flex items-center gap-1.5 text-[#ECECEC] hover:text-gray-300 transition-colors"
        >
          <ArrowLeft size={16} />
          Retour
        </button>
      </div>
    </div>
  );
}


===== DashboardLayout.tsx =====
Chemin : ./src/components/DashboardLayout.tsx
// src/components/DashboardLayout.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Sidebar from "./Sidebar";
import { signOut } from "next-auth/react";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      // Utilisation de signOut de NextAuth pour terminer la session
      await signOut({ redirect: false });
      router.push("/login");
    } catch (error) {
      console.error("Erreur lors de la déconnexion:", error);
    }
  };

  return (
    <div className="relative min-h-screen bg-[#212121] flex">
      {/* Bouton hamburger pour mobile */}
      <button
        className="md:hidden fixed top-4 left-4 z-50 p-2 bg-[#424242] rounded-full shadow-lg focus:outline-none"
        onClick={() => setIsSidebarOpen(!isSidebarOpen)}
        aria-label={isSidebarOpen ? "Fermer le menu" : "Ouvrir le menu"}
      >
        {isSidebarOpen ? "X" : "≡"}
      </button>

      {/* Sidebar avec props pour gérer l'état et la déconnexion */}
      <Sidebar
        isOpen={isSidebarOpen}
        onToggle={() => setIsSidebarOpen((prev) => !prev)}
        onSignOut={handleSignOut}
      />

      {/* Contenu principal */}
      <main className="flex-1 p-4 pt-16 md:pt-4 md:p-8 text-[#ECECEC] overflow-y-auto">
        {children}
      </main>
    </div>
  );
}


===== Section.tsx =====
Chemin : ./src/components/Section.tsx
import React from "react";

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

export default function Section({ title, children }: SectionProps) {
  return (
    <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm">
      <h2 className="text-lg md:text-xl font-medium mb-4">{title}</h2>
      <div className="grid gap-4">{children}</div>
    </section>
  );
}


===== StatusProgress.tsx =====
Chemin : ./src/components/StatusProgress.tsx
import { Status } from "../types/video";
import { STATUS_STEPS } from "../constants/videoConstants";

interface StatusProgressProps {
  currentStatus: Status;
  onStatusChange: (newStatus: Status) => void;
  isDisabled?: boolean;
}

export function StatusProgress({
  currentStatus,
  onStatusChange,
  isDisabled = false,
}: StatusProgressProps) {
  const getStepStatus = (stepValue: Status): "completed" | "current" | "upcoming" => {
    const stepIndex = STATUS_STEPS.findIndex((step) => step.value === stepValue);
    const currentIndex = STATUS_STEPS.findIndex((step) => step.value === currentStatus);
    if (stepIndex < currentIndex) return "completed";
    if (stepIndex === currentIndex) return "current";
    return "upcoming";
  };

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
      {STATUS_STEPS.map((step, index) => (
        <button
          key={step.value}
          onClick={() => onStatusChange(step.value)}
          disabled={isDisabled}
          className={`
            w-full p-3 rounded-lg transition-all duration-200 
            flex flex-col justify-between
            ${
              getStepStatus(step.value) === "completed"
                ? "bg-green-600/20 border-green-600 text-green-500"
                : getStepStatus(step.value) === "current"
                ? "bg-blue-600/20 border-blue-600 text-blue-500"
                : "bg-[#424242]/20 border-[#424242] text-gray-400"
            }
            border hover:border-white/50
            min-h-[80px] md:min-h-[100px]
            focus:outline-none focus:ring-2 focus:ring-white/30
          `}
        >
          <div className="flex justify-between items-center mb-2">
            <span className="font-medium text-sm md:text-base">{step.label}</span>
            <span className="flex items-center justify-center h-6 w-6 rounded-full border text-xs">
              {getStepStatus(step.value) === "completed" ? "✓" : index + 1}
            </span>
          </div>
          <p className="text-xs md:text-sm opacity-80 mt-1">{step.description}</p>
        </button>
      ))}
    </div>
  );
}


===== Providers.tsx =====
Chemin : ./src/components/Providers.tsx
"use client";

import { SessionProvider } from "next-auth/react";

export function Providers({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}


===== CreateCategoryModal.tsx =====
Chemin : ./src/components/CreateCategoryModal.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface CreateVideoModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

const getNextLetter = (existingIdentifiers: string[]): string => {
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const usedLetters = new Set(
    existingIdentifiers.map((id) => id.toUpperCase())
  );
  for (const letter of alphabet) {
    if (!usedLetters.has(letter)) {
      return letter;
    }
  }
  return "Z"; // Retourne 'Z' si tous les identifiants sont utilisés
};

export default function CreateVideoModal({
  isOpen,
  onClose,
  onSuccess,
}: CreateVideoModalProps) {
  const [identifier, setIdentifier] = useState("");
  const [title, setTitle] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const supabase = createClientComponentClient();

  const fetchNextVideoIdentifier = useCallback(async () => {
    if (isOpen) {
      try {
        const { data: categories, error } = await supabase
          .from("video_categories")
          .select("identifier");

        if (error) throw error;

        const existingIdentifiers =
          categories?.map((cat: { identifier: string }) => cat.identifier) ||
          [];
        const nextLetter = getNextLetter(existingIdentifiers);
        setIdentifier(nextLetter);
      } catch (err: unknown) {
        console.error("Erreur lors de la récupération de l'identifiant :", err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Erreur inconnue lors de la récupération de l'identifiant");
        }
      }
    }
  }, [isOpen, supabase]);

  useEffect(() => {
    fetchNextVideoIdentifier();
  }, [fetchNextVideoIdentifier]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      const { error } = await supabase
        .from("video_categories")
        .insert([{ identifier, title }]);

      if (error) throw error;

      setIdentifier("");
      setTitle("");
      onSuccess();
      onClose();
    } catch (err: unknown) {
      console.error("Erreur lors de la création de la vidéo :", err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Erreur inconnue lors de la création de la vidéo");
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="
        fixed inset-0 bg-black bg-opacity-50 
        flex items-center justify-center z-50 
        px-4 py-4
      "
    >
      <div
        className="
          bg-[#171717] 
          p-4 sm:p-8
          rounded-lg 
          w-full max-w-md 
          border border-[#424242]
        "
      >
        <h2 className="text-2xl font-semibold mb-6 text-[#ECECEC]">
          Nouvelle vidéo
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
            {error}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label
              htmlFor="identifier"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Identifiant
            </label>
            <input
              id="identifier"
              type="text"
              value={identifier}
              readOnly
              disabled
              className="
                w-full p-3 rounded-lg bg-[#212121] 
                border border-[#424242] 
                text-[#ECECEC] 
                focus:outline-none focus:border-[#ECECEC] 
                cursor-not-allowed opacity-50
              "
              required
            />
          </div>
          <div className="mb-6">
            <label
              htmlFor="title"
              className="block mb-2 text-sm font-medium text-[#ECECEC]"
            >
              Titre
            </label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="
                w-full p-3 rounded-lg bg-[#212121] 
                border border-[#424242] 
                text-[#ECECEC] 
                focus:outline-none focus:border-[#ECECEC]
              "
              required
              disabled={isLoading}
            />
          </div>
          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="
                px-4 py-2 text-[#ECECEC] rounded-lg 
                hover:bg-[#212121] transition-colors duration-200
              "
              disabled={isLoading}
            >
              Annuler
            </button>
            <button
              type="submit"
              className="
                px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg 
                hover:bg-[#171717] transition-colors duration-200 
                border border-[#424242] disabled:opacity-50
              "
              disabled={isLoading}
            >
              {isLoading ? "Création..." : "Créer"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


===== videoConstants.ts =====
Chemin : ./src/constants/videoConstants.ts
import { VIDEO_STATUS, StatusStep } from "../types/video";

export const STATUS_STEPS: StatusStep[] = [
  {
    value: VIDEO_STATUS.TO_DO,
    label: 'À faire',
    description: 'La vidéo est en attente de montage'
  },
  {
    value: VIDEO_STATUS.IN_PROGRESS,
    label: 'En cours',
    description: 'Le montage est en cours'
  },
  {
    value: VIDEO_STATUS.READY_TO_PUBLISH,
    label: 'Prêt à publier',
    description: 'La vidéo est prête pour publication'
  },
  {
    value: VIDEO_STATUS.FINISHED,
    label: 'Terminé',
    description: 'La vidéo a été publiée'
  }
];


===== layout.tsx =====
Chemin : ./src/app/layout.tsx
// src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import React from "react";
import { Providers } from "@/components/Providers"; // Import du composant client
import "./globals.css";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${inter.variable} antialiased`}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}


===== globals.css =====
Chemin : ./src/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica, sans-serif;
}


===== page.tsx =====
Chemin : ./src/app/page.tsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    router.push("/login");
  }, [router]);

  return null;
}


===== route.ts =====
Chemin : ./src/app/api/admin/route.ts
// src/app/api/admin/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function GET() {
  const supabase = createRouteHandlerClient({ cookies });
  const { data: { session }, error: authError } = await supabase.auth.getSession();
  if (authError || !session || session.user.role !== "admin") {
    return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
  }

  // Ici, mettez la logique de votre API pour les admins
  return NextResponse.json({ message: "Bienvenue dans l'API d'administration" });
}


===== route.ts =====
Chemin : ./src/app/api/videos/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from "next/server";
import { z } from "zod";

// Schéma de validation pour la création d'une vidéo
const videoSchema = z.object({
  category_id: z.number(),
  title: z.string().min(1, "Le titre est requis"),
  production_status: z.enum(["À monter", "Miniature à faire", "En validation", "Prête à exporter"]),
  instructions_miniature: z.string().optional(),
  rush_link: z.string().url().optional(),
  video_link: z.string().url().optional(),
  miniature_link: z.string().url().optional(),
});

// Pour la mise à jour, toutes les propriétés sont optionnelles sauf category_id
const videoUpdateSchema = videoSchema.partial().extend({
  category_id: z.number()
});

export async function GET(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const categoryId = searchParams.get("categoryId");
    const videoId = searchParams.get("id");

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    let query = supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `);

    if (videoId) {
      query = query.eq("id", videoId);
    }
    if (categoryId) {
      query = query.eq("category_id", categoryId);
    }

    const { data, error } = await query;

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération des vidéos:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoSchema.parse(body);

    // Commencer une transaction
    const { data: categoryVideo, error: categoryVideoError } = await supabase
      .from("category_videos")
      .insert({
        category_id: parsedData.category_id,
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (categoryVideoError) throw categoryVideoError;

    // Créer les détails de la vidéo
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .insert({
        category_video_id: categoryVideo.id,
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .select()
      .single();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json({
      categoryVideo,
      videoDetails
    }, { status: 201 });
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('Erreur lors de la création de la vidéo:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    console.error('Erreur lors de la création de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur inconnue' },
      { status: 400 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la mise à jour" },
        { status: 400 }
      );
    }

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const parsedData = videoUpdateSchema.parse(body);

    // Mise à jour de category_videos
    const { error: categoryVideoError } = await supabase
      .from("category_videos")
      .update({
        title: parsedData.title,
        production_status: parsedData.production_status
      })
      .eq("id", id);

    if (categoryVideoError) throw categoryVideoError;

    // Mise à jour de video_details
    const { data: videoDetails, error: videoDetailsError } = await supabase
      .from("video_details")
      .update({
        title: parsedData.title,
        instructions_miniature: parsedData.instructions_miniature,
        rush_link: parsedData.rush_link,
        video_link: parsedData.video_link,
        miniature_link: parsedData.miniature_link,
        production_status: parsedData.production_status
      })
      .eq("category_video_id", id)
      .select();

    if (videoDetailsError) throw videoDetailsError;

    return NextResponse.json(videoDetails);
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('Erreur lors de la mise à jour de la vidéo:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    console.error('Erreur lors de la mise à jour de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur inconnue' },
      { status: 400 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID requis pour la suppression" },
        { status: 400 }
      );
    }

    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { error } = await supabase
      .from("category_videos")
      .delete()
      .eq("id", id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la vidéo:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/[videoId]/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const { data, error } = await supabase
      .from("category_videos")
      .select(`
        *,
        video_details (*)
      `)
      .eq("id", params.videoId)
      .single();
    if (error) throw error;
    return NextResponse.json(data);
  } catch (error: unknown) {
    console.error("Erreur lors de la récupération des détails de la vidéo:", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const { error } = await supabase
      .from("category_videos")
      .delete()
      .eq("id", params.videoId);
    if (error) throw error;
    return NextResponse.json({ success: true });
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : "Erreur lors de la suppression";
    console.error("Erreur lors de la suppression de la vidéo:", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/videos/[videoId]/comments/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { z } from "zod";

const commentSchema = z.object({
  comment: z.string().min(1, "Le commentaire ne peut être vide"),
});

export async function GET(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { data: comments, error } = await supabase
      .from("video_comments")
      .select("id, comment, created_at, user_id")
      .eq("video_id", Number(params.videoId))
      .order("created_at", { ascending: true });
    if (error) throw error;
    return NextResponse.json(comments);
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}

export async function POST(
  request: Request,
  { params }: { params: { videoId: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const {
      data: { session },
      error: authError,
    } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
    }
    const body = await request.json();
    const parsed = commentSchema.safeParse(body);
    if (!parsed.success) {
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }
    const { comment } = parsed.data;
    const { data, error } = await supabase
      .from("video_comments")
      .insert([
        {
          video_id: Number(params.videoId),
          user_id: session.user.id,
          comment,
        },
      ])
      .select()
      .single();
    if (error) throw error;
    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/categories/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import { SupabaseClient } from '@supabase/supabase-js';

const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

async function getNextIdentifier(supabase: SupabaseClient) {
  const { data: categories } = await supabase
    .from('video_categories')
    .select('identifier')
    .order('identifier', { ascending: true });

  if (!categories || categories.length === 0) {
    return ALPHABET[0];
  }

  const lastIdentifier = categories[categories.length - 1].identifier;
  const lastIndex = ALPHABET.indexOf(lastIdentifier);

  if (lastIndex === -1 || lastIndex === ALPHABET.length - 1) {
    throw new Error("Plus d'identifiants disponibles");
  }

  return ALPHABET[lastIndex + 1];
}

export async function GET(): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select('*')
      .order('identifier');

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error('Erreur lors de la récupération des catégories:', error);
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

export async function POST(request: Request): Promise<NextResponse> {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { title } = body;

    if (!title) {
      return NextResponse.json(
        { error: 'Le titre est requis' },
        { status: 400 }
      );
    }

    const identifier = await getNextIdentifier(supabase);

    const { data, error } = await supabase
      .from('video_categories')
      .insert([{ 
        identifier,
        title,
        user_id: session.user.id
      }])
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error('Erreur lors de la création de la catégorie:', error);
    return NextResponse.json(
      { error: errorMessage },
      { status: 400 }
    );
  }
}


===== route.ts =====
Chemin : ./src/app/api/categories/[id]/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

// GET /api/categories/[id]
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { data, error } = await supabase
      .from('video_categories')
      .select(`
        *,
        category_videos (*)
      `)
      .eq('id', params.id)
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la récupération de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// PATCH /api/categories/[id]
export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { identifier, title } = body;

    const { data, error } = await supabase
      .from('video_categories')
      .update({ identifier, title })
      .eq('id', params.id)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}

// DELETE /api/categories/[id]
export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Vérifier l'authentification
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Non autorisé' },
        { status: 401 }
      );
    }

    const { error } = await supabase
      .from('video_categories')
      .delete()
      .eq('id', params.id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la catégorie:', error);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
} 

===== route.ts =====
Chemin : ./src/app/api/alerts/route.ts
// src/app/api/alerts/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    // On définit un seuil à 7 jours
    const thresholdDate = new Date();
    thresholdDate.setDate(thresholdDate.getDate() - 7);
    const isoThreshold = thresholdDate.toISOString();

    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, title, production_status, updated_at")
      .neq("production_status", "Terminé")
      .lt("updated_at", isoThreshold);

    if (error) throw error;
    return NextResponse.json(videos);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API alerts :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/stats/route.ts
// src/app/api/stats/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

// Définition d'une interface pour les vidéos récupérées
interface Video {
  production_status: string;
}

// Interface pour les statistiques calculées
interface Stats {
  toDo: number;
  inProgress: number;
  readyToPublish: number;
  finished: number;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    
    // Récupération de la colonne production_status de la table category_videos
    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("production_status");
      
    if (error) throw error;

    const videoList: Video[] = videos ?? [];

    // Calcul des compteurs en typant l'accumulateur
    const stats: Stats = videoList.reduce((acc: Stats, video: Video) => {
      const status = video.production_status;
      if (status === "À monter") acc.toDo += 1;
      else if (status === "En cours") acc.inProgress += 1;
      else if (status === "Prêt à publier") acc.readyToPublish += 1;
      else if (status === "Terminé") acc.finished += 1;
      return acc;
    }, { toDo: 0, inProgress: 0, readyToPublish: 0, finished: 0 });

    return NextResponse.json(stats);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API stats :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/priorities/route.ts
// src/app/api/priorities/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

interface Video {
  id: number;
  title: string;
  production_status: string;
  updated_at: string;
}

interface PrioritizedVideo extends Video {
  priority: number;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Récupérer toutes les vidéos dont le statut n'est pas "Terminé"
    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, title, production_status, updated_at")
      .neq("production_status", "Terminé");

    if (error) throw error;

    const now = new Date();
    const videoList: Video[] = videos ?? [];

    const prioritizedVideos: PrioritizedVideo[] = videoList.map((video) => {
      const updatedAt = new Date(video.updated_at);
      const diffInMs = now.getTime() - updatedAt.getTime();
      const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
      return {
        ...video,
        priority: Math.round(diffInDays),
      };
    });

    prioritizedVideos.sort((a, b) => b.priority - a.priority);

    return NextResponse.json(prioritizedVideos);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur serveur';
    console.error("Erreur dans l'API priorités :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/performance/route.ts
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

interface Video {
  id: number;
  created_at: string;
  updated_at: string;
  production_status: string;
}

export async function GET() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    const { data: videos, error } = await supabase
      .from("category_videos")
      .select("id, created_at, updated_at, production_status")
      .eq("production_status", "Terminé");

    if (error) throw error;

    const videoList: Video[] = videos ?? [];

    let totalDays = 0;
    let count = 0;
    const monthlyCounts: Record<string, number> = {};

    videoList.forEach((video) => {
      const created = new Date(video.created_at);
      const updated = new Date(video.updated_at);
      const diffInDays =
        (updated.getTime() - created.getTime()) / (1000 * 60 * 60 * 24);
      totalDays += diffInDays;
      count++;

      const month = updated.toISOString().slice(0, 7);
      monthlyCounts[month] = (monthlyCounts[month] || 0) + 1;
    });

    const avgProductionTime = count > 0 ? totalDays / count : 0;

    return NextResponse.json({
      avgProductionTime: avgProductionTime.toFixed(2),
      monthlyCounts,
      totalVideos: count,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur serveur";
    console.error("Erreur dans l'API performance :", error);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


===== route.ts =====
Chemin : ./src/app/api/auth/[...nextauth]/route.ts
// ./src/app/api/auth/[...nextauth]/route.ts
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { supabase } from "@/utils/supabaseClient";

const handler = NextAuth({
  secret: process.env.NEXTAUTH_SECRET, // Clé secrète ajoutée pour signer les tokens JWT
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: {
          label: "Email",
          type: "text",
          placeholder: "john.doe@example.com",
        },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Email et mot de passe requis");
        }

        const { data, error } = await supabase.auth.signInWithPassword({
          email: credentials.email,
          password: credentials.password,
        });

        if (error || !data.user) {
          throw new Error("Identifiants invalides");
        }

        let role = "user"; // rôle par défaut
        try {
          const { data: profileData, error: profileError } = await supabase
            .from("profiles")
            .select("role")
            .eq("id", data.user.id)
            .single();
          if (!profileError && profileData?.role) {
            role = profileData.role;
          }
          console.log("[Authorize] Rôle récupéré :", role);
        } catch (e) {
          console.error("Impossible de récupérer le rôle:", e);
        }

        return { ...data.user, role };
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email ?? undefined;
        token.role = user.role ?? "user"; // Forcer une valeur par défaut si non défini
        console.log("[JWT] User:", user);
        console.log("[JWT] Token après ajout role:", token);
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
        session.user.role = token.role ?? "user"; // Assurez-vous que role est toujours présent
        console.log("[Session] Session utilisateur:", session.user);
      }
      return session;
    },
  },

  pages: {
    signIn: "/login",
  },
});

export { handler as GET, handler as POST };


===== page.tsx =====
Chemin : ./src/app/login/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { signIn } from "next-auth/react";
import toast, { Toaster } from "react-hot-toast";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMsg("");
    setIsLoading(true);

    try {
      const result = await signIn("credentials", {
        email,
        password,
        redirect: false, // nous gérons la redirection nous-mêmes
      });

      console.log("Résultat de signIn:", result);

      if (result?.error) {
        toast.error(result.error);
        setErrorMsg(result.error);
      } else if (result?.ok) {
        router.push("/dashboard");
      } else {
        // Cas non prévu
        toast.error("Connexion échouée");
        setErrorMsg("Connexion échouée");
      }
    } catch (error: any) {
      console.error("Erreur de connexion:", error);
      toast.error("Une erreur est survenue lors de la connexion");
      setErrorMsg("Une erreur est survenue lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#212121] text-[#ECECEC]">
      <Toaster />
      <form
        onSubmit={handleSubmit}
        className="w-96 p-8 bg-[#171717] rounded-lg shadow-xl border border-[#424242]"
      >
        <h2 className="text-2xl font-semibold mb-6">Connexion</h2>
        {errorMsg && <p className="text-red-500 mb-4">{errorMsg}</p>}
        <div className="mb-4">
          <label htmlFor="email" className="block mb-2 text-sm font-medium">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC]"
            required
            disabled={isLoading}
          />
        </div>
        <div className="mb-6">
          <label htmlFor="password" className="block mb-2 text-sm font-medium">
            Mot de passe
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-3 rounded-lg bg-[#212121] border border-[#424242] text-[#ECECEC]"
            required
            disabled={isLoading}
          />
        </div>
        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-[#424242] hover:bg-[#171717] text-[#ECECEC] py-3 px-4 rounded-lg border border-[#424242] disabled:opacity-50"
        >
          {isLoading ? "Connexion en cours..." : "Se connecter"}
        </button>
      </form>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import DashboardLayout from "@/components/DashboardLayout";
import CreateCategoryModal from "@/components/CreateCategoryModal";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter } from "next/navigation";

interface CategoryWithCounts {
  id: number;
  identifier: string;
  title: string;
  pending_count: number;
  ready_to_publish_count: number;
  finished_count: number;
}

interface VideoCategory {
  id: number;
  identifier: string;
  title: string;
  category_videos: { production_status: string }[] | null;
}

export default function DashboardPage() {
  const [categories, setCategories] = useState<CategoryWithCounts[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState<boolean>(false);
  const supabase = createClientComponentClient();
  const router = useRouter();

  const fetchCategories = useCallback(async () => {
    setIsLoading(true);
    try {
      // Récupérer les catégories et leurs vidéos associées
      const { data, error } = await supabase
        .from("video_categories")
        .select(`
          id, 
          identifier,
          title,
          category_videos (
            production_status
          )
        `)
        .order("identifier", { ascending: true });

      if (error) throw error;

      // On s'assure que data est un tableau de VideoCategory
      const dataCategories = (data || []) as VideoCategory[];

      // Calculer les compteurs par statut
      const mapped = dataCategories.map((cat) => {
        let pending_count = 0;
        let ready_to_publish_count = 0;
        let finished_count = 0;

        cat.category_videos?.forEach((video) => {
          if (video.production_status === "En cours") {
            pending_count++;
          } else if (video.production_status === "Prêt à publier") {
            ready_to_publish_count++;
          } else if (video.production_status === "Terminé") {
            finished_count++;
          }
        });

        return {
          id: cat.id,
          identifier: cat.identifier,
          title: cat.title,
          pending_count,
          ready_to_publish_count,
          finished_count,
        };
      });

      setCategories(mapped);
    } catch (err) {
      console.error("Erreur lors du chargement des catégories:", err);
      setError("Impossible de charger les catégories");
    } finally {
      setIsLoading(false);
    }
  }, [supabase]);

  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">
          Catégories de vidéos
        </h1>
      </header>

      {isLoading ? (
        <div className="text-center py-6">
          Chargement en cours...
        </div>
      ) : (
        <>
          {error && (
            <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-6">
              {error}
            </div>
          )}

          <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* Carte pour ajouter une nouvelle catégorie */}
            <div
              onClick={() => setIsCreateModalOpen(true)}
              className="bg-[#171717] p-5 md:p-6 rounded-lg border border-dashed border-[#424242] hover:border-[#ECECEC] transition-all duration-200 cursor-pointer flex flex-col items-center justify-center hover:shadow-md hover:scale-[1.01] active:scale-[0.99]"
            >
              <div className="w-10 h-10 md:w-12 md:h-12 bg-[#424242] rounded-full flex items-center justify-center mb-3">
                +
              </div>
              <p className="text-center text-gray-400 text-sm md:text-base">
                Créer une nouvelle catégorie
              </p>
            </div>

            {/* Liste des catégories existantes */}
            {categories.map((category, index) => (
              <div
                key={category.id}
                onClick={() => router.push(`/dashboard/categories/${category.id}`)}
                className="bg-[#171717] p-5 md:p-6 rounded-lg border border-[#424242] hover:border-[#ECECEC] transition-all duration-200 cursor-pointer hover:shadow-md hover:scale-[1.01] active:scale-[0.99]"
                style={{ animationDelay: `${index * 50}ms` }}
              >
                <div className="flex items-center mb-3">
                  <span className="text-lg md:text-xl font-medium text-[#424242]">
                    {category.identifier}
                  </span>
                  <span className="mx-2 text-lg md:text-xl font-medium text-[#424242]">
                    |
                  </span>
                  <h3 className="text-lg md:text-xl font-medium truncate">
                    {category.title}
                  </h3>
                </div>
                <div className="flex flex-col text-xs md:text-sm text-gray-400 gap-1">
                  <span>{category.pending_count} en cours</span>
                  <span>{category.ready_to_publish_count} prêtes</span>
                  <span>{category.finished_count} terminées</span>
                </div>
              </div>
            ))}
          </section>
        </>
      )}

      <CreateCategoryModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSuccess={fetchCategories}
      />
    </DashboardLayout>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/admin/page.tsx
"use client";

import { useEffect } from "react";
import DashboardLayout from "@/components/DashboardLayout";
import { useSession, signOut } from "next-auth/react";
import { useRouter } from "next/navigation";

export default function AdminPage() {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status !== "loading" && session?.user?.role !== "admin") {
      // Redirige vers le dashboard si l'utilisateur n'est pas admin
      router.push("/dashboard");
    }
  }, [session, status, router]);

  if (status === "loading") {
    return <div>Chargement...</div>;
  }

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">Administration</h1>
      </header>
      <div className="p-4 bg-[#171717] rounded-lg">
        <p className="text-lg">
          Bienvenue dans l&apos;espace administration. Vous pouvez gérer les utilisateurs et effectuer des actions sensibles ici.
        </p>
        <button
          onClick={() => signOut()}
          className="mt-4 px-4 py-2 bg-red-600 text-white rounded-lg"
        >
          Déconnexion
        </button>
      </div>
    </DashboardLayout>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/videos/[id]/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import {
  fetchVideoDetails,
  updateTitle,
  updateDescription,
  updateInstructions,
  updateLink,
  updateStatus,
} from "../../../../services/videoService";
import { Video, VIDEO_STATUS } from "../../../../types/video";
// L'import de STATUS_STEPS a été supprimé car il n'est pas utilisé.
import EditableItem from "../../../../components/EditableItem";
import { StatusProgress } from "../../../../components/StatusProgress";
import { ArrowLeft, Trash2 } from "react-feather";

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

const Section = ({ title, children }: SectionProps) => (
  <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm">
    <h2 className="text-lg md:text-xl font-medium mb-4">{title}</h2>
    <div className="grid gap-4">{children}</div>
  </section>
);

interface ErrorStateProps {
  error: string | null;
  onBack: () => void;
}

const ErrorState = ({ error, onBack }: ErrorStateProps) => (
  <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-4">
    <div className="max-w-4xl mx-auto">
      <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg mb-4">
        {error || "Vidéo non trouvée"}
      </div>
      <button
        onClick={onBack}
        className="inline-flex items-center gap-1.5 text-[#ECECEC] hover:text-gray-300 transition-colors"
      >
        <ArrowLeft size={16} /> Retour
      </button>
    </div>
  </div>
);

interface Comment {
  id: number;
  comment: string;
  created_at: string;
}

export default function VideoPage({ params }: { params: { id: string } }) {
  const [video, setVideo] = useState<Video | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isStatusChanging, setIsStatusChanging] = useState<boolean>(false);
  const router = useRouter();
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [loadingComments, setLoadingComments] = useState(true);
  const [errorComments, setErrorComments] = useState("");

  // État pour la suppression
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState("");

  useEffect(() => {
    const loadVideo = async () => {
      try {
        const data = await fetchVideoDetails(params.id);
        setVideo(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement de la vidéo :", err);
        if (err instanceof Error) {
          setError("Impossible de charger les détails de la vidéo");
        } else {
          setError("Erreur inconnue lors du chargement de la vidéo");
        }
      } finally {
        setIsLoading(false);
      }
    };
    loadVideo();
  }, [params.id]);

  // Mise à jour du titre
  const handleTitleUpdate = async (newTitle: string) => {
    const trimmed = newTitle.trim();
    if (!trimmed) return;
    try {
      await updateTitle(params.id, trimmed);
      setVideo((prev) => (prev ? { ...prev, title: trimmed } : null));
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour du titre :", err);
      if (err instanceof Error) {
        setError("Impossible de mettre à jour le titre");
      } else {
        setError("Erreur inconnue lors de la mise à jour du titre");
      }
    }
  };

  // Mise à jour de la description
  const handleDescriptionUpdate = async (newDescription: string) => {
    try {
      await updateDescription(params.id, newDescription);
      setVideo((prev) =>
        prev ? { ...prev, description: newDescription } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour de la description :", err);
      if (err instanceof Error) {
        setError("Impossible de mettre à jour la description");
      } else {
        setError("Erreur inconnue lors de la mise à jour de la description");
      }
    }
  };

  // Mise à jour des instructions
  const handleInstructionsUpdate = async (newInstructions: string) => {
    try {
      await updateInstructions(params.id, newInstructions);
      setVideo((prev) =>
        prev ? { ...prev, instructions_miniature: newInstructions } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour des instructions :", err);
      if (err instanceof Error) {
        setError("Impossible de mettre à jour les instructions");
      } else {
        setError("Erreur inconnue lors de la mise à jour des instructions");
      }
    }
  };

  // Mise à jour d'un lien (rush, vidéo montée, miniature)
  const handleLinkUpdate = async (
    newValue: string,
    dbField: "rush_link" | "video_link" | "miniature_link"
  ) => {
    try {
      await updateLink(params.id, dbField, newValue);
      setVideo((prev) => (prev ? { ...prev, [dbField]: newValue } : null));
    } catch (err: unknown) {
      console.error(`Erreur lors de la mise à jour du lien ${dbField} :`, err);
      if (err instanceof Error) {
        setError(`Impossible de mettre à jour le lien ${dbField}`);
      } else {
        setError("Erreur inconnue lors de la mise à jour du lien");
      }
    }
  };

  // Mise à jour du statut avec gestion de toast en cas d'erreur
  const handleStatusUpdate = async (
    newStatus: (typeof VIDEO_STATUS)[keyof typeof VIDEO_STATUS]
  ) => {
    if (!video) return;
    setIsStatusChanging(true);
    try {
      await updateStatus(params.id, newStatus);
      setVideo((prev) =>
        prev ? { ...prev, production_status: newStatus } : null
      );
    } catch (err: unknown) {
      console.error("Erreur lors de la mise à jour du statut :", err);
      toast.error(
        err instanceof Error
          ? err.message
          : "Impossible de mettre à jour le statut"
      );
    } finally {
      setIsStatusChanging(false);
    }
  };

  // Suppression de la vidéo
  const handleDeleteVideo = async () => {
    setIsDeleting(true);
    setDeleteError("");
    try {
      const response = await fetch(`/api/videos/${params.id}`, {
        method: "DELETE",
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Échec de la suppression");
      }
      router.push("/dashboard");
    } catch (err: unknown) {
      console.error("Erreur lors de la suppression de la vidéo :", err);
      if (err instanceof Error) {
        setDeleteError(err.message);
      } else {
        setDeleteError("Erreur inconnue lors de la suppression");
      }
    } finally {
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    }
  };

  const fetchComments = useCallback(async () => {
    try {
      const response = await fetch(`/api/videos/${params.id}/comments`);
      if (!response.ok) {
        throw new Error("Erreur lors de la récupération des commentaires");
      }
      const data = (await response.json()) as Comment[];
      setComments(data);
    } catch (err: unknown) {
      console.error("Erreur lors du chargement des commentaires", err);
      if (err instanceof Error) {
        setErrorComments("Impossible de charger les commentaires");
      } else {
        setErrorComments("Erreur inconnue lors du chargement des commentaires");
      }
    } finally {
      setLoadingComments(false);
    }
  }, [params.id]);

  useEffect(() => {
    if (video) {
      fetchComments();
    }
  }, [video, fetchComments]);

  // Fonction pour poster un commentaire
  const postComment = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      const response = await fetch(`/api/videos/${params.id}/comments`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ comment: newComment }),
      });
      if (!response.ok) {
        throw new Error("Erreur lors de l'envoi du commentaire");
      }
      // Rafraîchir la liste des commentaires
      setNewComment("");
      fetchComments();
    } catch (err: unknown) {
      console.error("Erreur lors de l'ajout du commentaire", err);
      alert("Impossible d'ajouter le commentaire");
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center p-4">
        <div className="animate-pulse flex flex-col items-center">
          <div className="h-8 w-48 bg-gray-700 rounded mb-4"></div>
          <div className="h-32 w-full max-w-md bg-gray-700 rounded"></div>
        </div>
      </div>
    );
  }

  if (error || !video) {
    return <ErrorState error={error} onBack={() => router.back()} />;
  }

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="container mx-auto p-4 md:p-8 max-w-4xl">
        {/* ------------------ Header (Bouton Retour + Titre en gros + Statut + Bouton Supprimer) ------------------ */}
        <header className="mb-6">
          <button
            onClick={() => router.back()}
            className="inline-flex items-center text-[#ECECEC] hover:text-gray-300 transition-colors"
            aria-label="Retour"
          >
            <ArrowLeft size={18} />
            <span className="ml-2">Retour</span>
          </button>
          <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4 mt-4">
            <h1 className="text-2xl md:text-3xl font-semibold flex flex-wrap items-center gap-3">
              <span>{video.fullIdentifier}</span>
              <EditableItem
                label=""
                value={video.title}
                placeholder="Titre de la vidéo..."
                onSave={handleTitleUpdate}
                isLink={false}
              />
            </h1>
            <div className="flex items-center gap-4">
              <span
                className={`px-3 py-1 rounded-full text-sm font-semibold transition-opacity duration-200 ${
                  isStatusChanging ? "opacity-50" : "opacity-100"
                } ${(() => {
                  switch (video.production_status) {
                    case VIDEO_STATUS.TO_DO:
                      return "bg-yellow-600";
                    case VIDEO_STATUS.IN_PROGRESS:
                      return "bg-blue-600";
                    case VIDEO_STATUS.READY_TO_PUBLISH:
                      return "bg-green-600";
                    case VIDEO_STATUS.FINISHED:
                      return "bg-purple-600";
                    default:
                      return "bg-gray-600";
                  }
                })()}`}
              >
                {(() => {
                  switch (video.production_status) {
                    case VIDEO_STATUS.TO_DO:
                      return "À faire";
                    case VIDEO_STATUS.IN_PROGRESS:
                      return "En cours";
                    case VIDEO_STATUS.READY_TO_PUBLISH:
                      return "Prêt à publier";
                    case VIDEO_STATUS.FINISHED:
                      return "Terminé";
                    default:
                      return video.production_status;
                  }
                })()}
              </span>
              <button
                onClick={() => setShowDeleteConfirm(true)}
                className="flex items-center gap-1.5 px-3 py-1.5 hover:bg-black/20 text-red-500 rounded-md transition-colors duration-200 text-sm"
                disabled={isDeleting}
              >
                <Trash2 size={16} />
                {isDeleting ? "Suppression..." : "Supprimer"}
              </button>
            </div>
          </div>
        </header>

        {/* ------------------ Contenu principal ------------------ */}
        <main className="grid gap-6">
          <Section title="Contenu de la vidéo">
            <EditableItem
              label="Titre"
              value={video.title}
              placeholder="Ajouter un titre"
              onSave={handleTitleUpdate}
              copyable={true}
            />
            <EditableItem
              label="Description"
              value={video.description || ""}
              placeholder="Ajouter une description"
              onSave={handleDescriptionUpdate}
              inputType="textarea"
              copyable={true}
            />
          </Section>

          <Section title="Ressources de production">
            <EditableItem
              label="Rush brut"
              value={video.rush_link || ""}
              placeholder="Ajouter le lien des rushes"
              onSave={(newVal: string) => handleLinkUpdate(newVal, "rush_link")}
              isLink={true}
            />
            <EditableItem
              label="Montage final"
              value={video.video_link || ""}
              placeholder="Ajouter le lien de la vidéo montée"
              onSave={(newVal: string) =>
                handleLinkUpdate(newVal, "video_link")
              }
              isLink={true}
            />
          </Section>

          <Section title="Miniature">
            <EditableItem
              label="Instructions"
              value={video.instructions_miniature || ""}
              placeholder="Ajouter les instructions pour la miniature"
              onSave={handleInstructionsUpdate}
              inputType="textarea"
            />
            <EditableItem
              label="Fichier miniature"
              value={video.miniature_link || ""}
              placeholder="Ajouter le lien de la miniature"
              onSave={(newVal: string) =>
                handleLinkUpdate(newVal, "miniature_link")
              }
              isLink={true}
            />
          </Section>

          <Section title="Progression">
            <StatusProgress
              currentStatus={video.production_status}
              onStatusChange={handleStatusUpdate}
              isDisabled={isStatusChanging}
            />
          </Section>

          <Section title="Informations système">
            <div className="grid gap-3">
              <div className="flex justify-between">
                <span className="text-gray-400">Créée le</span>
                <span>{new Date(video.created_at).toLocaleDateString()}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Dernière mise à jour</span>
                <span>{new Date(video.updated_at).toLocaleDateString()}</span>
              </div>
            </div>
          </Section>

          <section className="bg-[#171717] p-4 md:p-6 rounded-lg border border-gray-700 shadow-sm mt-6">
            <h2 className="text-lg md:text-xl font-medium mb-4">
              Commentaires internes
            </h2>

            {/* Formulaire pour ajouter un commentaire */}
            <form onSubmit={postComment} className="mb-4">
              <textarea
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Ajouter un commentaire..."
                className="w-full p-2 bg-[#212121] border border-[#424242] rounded-lg text-[#ECECEC] focus:outline-none"
                rows={3}
              />
              <button
                type="submit"
                className="mt-2 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200"
              >
                Ajouter
              </button>
            </form>

            {/* Liste des commentaires */}
            {loadingComments ? (
              <div>Chargement des commentaires...</div>
            ) : errorComments ? (
              <div className="text-red-500">{errorComments}</div>
            ) : comments.length === 0 ? (
              <div>Aucun commentaire pour le moment.</div>
            ) : (
              <ul className="space-y-3">
                {comments.map((c: Comment) => (
                  <li key={c.id} className="p-3 bg-[#212121] rounded-lg">
                    <p className="text-sm">{c.comment}</p>
                    <span className="text-xs text-gray-400">
                      {new Date(c.created_at).toLocaleString()}
                    </span>
                  </li>
                ))}
              </ul>
            )}
          </section>

          {deleteError && (
            <div className="mb-4 p-3 bg-red-500/10 border border-red-500 text-red-500 rounded">
              {deleteError}
            </div>
          )}
        </main>
      </div>

      {/* ------------------ Modale de confirmation de suppression ------------------ */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-[#171717] p-6 rounded-lg shadow-xl max-w-md w-full border border-gray-200 dark:border-[#424242]">
            <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-[#ECECEC]">
              Confirmer la suppression
            </h2>
            <p className="mb-6 text-gray-700 dark:text-gray-300">
              Êtes-vous sûr de vouloir supprimer la vidéo{" "}
              <strong>{video.title}</strong> ?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-[#424242] dark:hover:bg-[#535353] text-gray-800 dark:text-[#ECECEC] rounded-md transition-colors duration-200 text-sm"
                disabled={isDeleting}
              >
                Annuler
              </button>
              <button
                onClick={handleDeleteVideo}
                className="px-3 py-1.5 flex items-center gap-1.5 bg-red-50 hover:bg-red-100 dark:bg-red-900/30 dark:hover:bg-red-900/50 text-red-600 dark:text-red-400 rounded-md transition-colors duration-200 text-sm"
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <>
                    <svg
                      className="animate-spin h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Suppression...
                  </>
                ) : (
                  <>
                    <Trash2 size={16} />
                    Confirmer
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/categories/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Trash2, ArrowLeft } from "react-feather";
import CreateVideoModal from "@/components/CreateVideoModal";

interface Video {
  id: number;
  title: string;
  production_status: string; // Ex. "À monter", "En cours", "Prêt à publier", "Terminé"
  created_at: string;
  updated_at: string;
  identifier: number; // Identifiant numérique de la vidéo
}

interface Category {
  id: number;
  identifier: string; // Par ex. "A"
  title: string;
  videos: Video[];
}

export default function CategoryPage({ params }: { params: { id: string } }) {
  const [category, setCategory] = useState<Category | null>(null);
  const [editingTitle, setEditingTitle] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    fetchCategoryDetails();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [params.id]);

  useEffect(() => {
    if (category) {
      setNewTitle(category.title);
    }
  }, [category]);

  const fetchCategoryDetails = async () => {
    try {
      // 1. Récupérer la catégorie
      const { data: categoryData, error: categoryError } = await supabase
        .from("video_categories")
        .select("*")
        .eq("id", params.id)
        .single();
      if (categoryError) throw categoryError;

      // 2. Récupérer les vidéos associées à la catégorie
      const { data: videosData, error: videosError } = await supabase
        .from("category_videos")
        .select("id, identifier, title, production_status, created_at, updated_at")
        .eq("category_id", params.id)
        .order("id", { ascending: true });
      if (videosError) throw videosError;

      // 3. Mettre à jour le state local
      setCategory({
        ...categoryData,
        videos: videosData || [],
      });
    } catch (err) {
      console.error("Erreur lors du chargement de la catégorie:", err);
      setError("Impossible de charger les détails de la catégorie");
    } finally {
      setIsLoading(false);
    }
  };

  const handleTitleUpdate = async () => {
    try {
      const { error } = await supabase
        .from("video_categories")
        .update({ title: newTitle })
        .eq("id", params.id);
      if (error) throw error;

      setCategory((prev) => (prev ? { ...prev, title: newTitle } : null));
      setEditingTitle(false);
    } catch (err) {
      console.error("Erreur lors de la mise à jour du titre:", err);
      setError("Impossible de mettre à jour le titre");
    }
  };

  const handleDeleteCategory = async () => {
    try {
      setIsDeleting(true);
      const response = await fetch(`/api/categories/${params.id}`, {
        method: "DELETE",
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Échec de la suppression");
      }
      router.push("/dashboard");
    } catch (err) {
      console.error("Erreur lors de la suppression de la catégorie:", err);
      setError("Impossible de supprimer la catégorie");
      setIsDeleting(false);
      setShowDeleteConfirm(false);
    }
  };

  // Fonctions pour l'affichage du statut
  const getStatusColor = (status: string) => {
    switch (status) {
      case "À monter":
        return "bg-yellow-600";
      case "En cours":
        return "bg-blue-600";
      case "Prêt à publier":
        return "bg-green-600";
      case "Terminé":
        return "bg-purple-600";
      default:
        return "bg-[#424242]";
    }
  };

  const getStatusText = (status: string) => {
    return status;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] flex items-center justify-center">
        Chargement...
      </div>
    );
  }

  if (error || !category) {
    return (
      <div className="min-h-screen bg-[#212121] text-[#ECECEC] p-8">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 text-red-500 p-4 rounded-lg">
            {error || "Catégorie non trouvée"}
          </div>
          <button
            onClick={() => router.back()}
            className="mt-4 px-4 py-2 bg-[#424242] text-[#ECECEC] rounded-lg hover:bg-[#171717] transition-colors duration-200 flex items-center gap-2"
          >
            <ArrowLeft size={16} /> Retour
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#212121] text-[#ECECEC]">
      <div className="max-w-6xl mx-auto p-8">
        {/* En-tête de la catégorie */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <button
              onClick={() => router.back()}
              className="text-[#ECECEC] hover:text-gray-300 transition-colors duration-200 flex items-center gap-1.5"
            >
              <ArrowLeft size={16} /> Retour
            </button>
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="flex items-center gap-1.5 px-3 py-1.5 hover:bg-black/20 text-red-500 rounded-md transition-colors duration-200 text-sm"
              disabled={isDeleting}
            >
              <Trash2 size={16} />
              {isDeleting ? "Suppression..." : "Supprimer"}
            </button>
          </div>
          <h1 className="text-2xl md:text-3xl font-semibold flex items-center gap-2 md:gap-4 flex-wrap w-full">
            <span className="break-all">{category.identifier}</span>
            {editingTitle ? (
              <div className="flex flex-wrap sm:flex-nowrap items-center gap-2 w-full sm:w-auto mt-2 sm:mt-0">
                <input
                  type="text"
                  value={newTitle}
                  onChange={(e) => setNewTitle(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleTitleUpdate();
                    }
                  }}
                  className="bg-transparent border-b border-[#424242] focus:border-[#ECECEC] outline-none px-1 w-full sm:w-auto min-w-0"
                  autoFocus
                />
                <button
                  onClick={handleTitleUpdate}
                  className="text-sm px-2 py-1 bg-[#424242] rounded flex items-center gap-1 whitespace-nowrap mt-2 sm:mt-0"
                >
                  Sauvegarder
                </button>
              </div>
            ) : (
              <span
                onClick={() => setEditingTitle(true)}
                className="cursor-pointer hover:text-gray-300 break-all"
              >
                {category.title}
              </span>
            )}
          </h1>
        </div>

        {/* Modale de confirmation de suppression */}
        {showDeleteConfirm && (
          <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-[#171717] p-6 rounded-lg shadow-xl max-w-md w-full border border-gray-200 dark:border-[#424242]">
              <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-[#ECECEC]">
                Confirmer la suppression
              </h2>
              <p className="mb-6 text-gray-700 dark:text-gray-300">
                Êtes-vous sûr de vouloir supprimer la catégorie{" "}
                <strong>{category.title}</strong> ?{" "}
                {category.videos.length > 0 && (
                  <span className="block mt-2 text-red-500 dark:text-red-400">
                    Cette catégorie contient {category.videos.length} vidéo
                    {category.videos.length > 1 ? "s" : ""} qui ne sera/seront
                    plus associée(s) à aucune catégorie.
                  </span>
                )}
              </p>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-[#424242] dark:hover:bg-[#535353] text-gray-800 dark:text-[#ECECEC] rounded-md transition-colors duration-200 text-sm"
                  disabled={isDeleting}
                >
                  Annuler
                </button>
                <button
                  onClick={handleDeleteCategory}
                  className="px-3 py-1.5 flex items-center gap-1.5 bg-red-50 hover:bg-red-100 dark:bg-red-900/30 dark:hover:bg-red-900/50 text-red-600 dark:text-red-400 rounded-md transition-colors duration-200 text-sm"
                  disabled={isDeleting}
                >
                  {isDeleting ? (
                    <>
                      <svg
                        className="animate-spin h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Suppression...
                    </>
                  ) : (
                    <>
                      <Trash2 size={16} />
                      Confirmer
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Liste des vidéos */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Carte spéciale pour ajouter une nouvelle vidéo */}
          <div
            onClick={() => setIsCreateModalOpen(true)}
            className="bg-[#171717] p-6 rounded-lg border-2 border-dashed border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer flex items-center justify-center min-h-[160px] group"
          >
            <div className="text-center">
              <div className="w-12 h-12 rounded-full border-2 border-[#424242] group-hover:border-[#ECECEC] flex items-center justify-center mx-auto mb-3 transition-colors duration-200">
                <span className="text-2xl text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                  +
                </span>
              </div>
              <div className="text-[#424242] group-hover:text-[#ECECEC] transition-colors duration-200">
                Ajouter une vidéo
              </div>
            </div>
          </div>

          {/* Cartes des vidéos existantes */}
          {category.videos.map((video) => {
            // Construire l'identifiant complet : ex. "A-2"
            const fullIdentifier = `${category.identifier}-${video.identifier}`;
            return (
              <div
                key={video.id}
                onClick={() => router.push(`/dashboard/videos/${video.id}`)}
                className="relative bg-[#171717] p-6 rounded-lg border border-[#424242] hover:border-[#ECECEC] transition-colors duration-200 cursor-pointer"
              >
                {/* Badge du statut */}
                <div className="absolute top-2 right-2">
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-semibold text-white ${getStatusColor(
                      video.production_status
                    )}`}
                  >
                    {getStatusText(video.production_status)}
                  </span>
                </div>
                <div className="flex flex-col h-full">
                  <h3 className="text-xl font-medium mb-2">
                    {fullIdentifier} {video.title}
                  </h3>
                  <div className="mt-auto text-sm text-gray-400">
                    Dernière mise à jour :{" "}
                    {new Date(video.updated_at).toLocaleDateString()}
                  </div>
                </div>
              </div>
            );
          })}

          {category.videos.length === 0 && (
            <div className="col-span-full text-center py-12 text-gray-400">
              Aucune vidéo dans cette catégorie
            </div>
          )}
        </div>

        {/* Modale de création d'une nouvelle vidéo */}
        <CreateVideoModal
          isOpen={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          onSuccess={fetchCategoryDetails}
          categoryId={params.id}
          categoryIdentifier={category.identifier} // Pour générer l'identifiant complet, ex. "A-1"
          categoryTitle={category.title} // Pour afficher le nom complet de la catégorie
        />
      </div>
    </div>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/alerts/page.tsx
"use client";

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/DashboardLayout";

interface Alert {
  id: number;
  title: string;
  production_status: string;
  updated_at: string;
}

export default function AlertsPage() {
  const [alerts, setAlerts] = useState<Alert[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchAlerts = async () => {
      try {
        const response = await fetch("/api/alerts");
        if (!response.ok) {
          throw new Error("Erreur lors de la récupération des alertes");
        }
        const data = (await response.json()) as Alert[];
        setAlerts(data);
      } catch (err: unknown) {
        if (err instanceof Error) {
          console.error("Erreur lors du chargement des alertes", err);
        } else {
          console.error("Erreur lors du chargement des alertes", err);
        }
        setError("Impossible de charger les alertes");
      } finally {
        setIsLoading(false);
      }
    };

    fetchAlerts();
  }, []);

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">Alertes et Rappels</h1>
      </header>
      {isLoading ? (
        <div>Chargement...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : alerts.length === 0 ? (
        <div>Aucune alerte pour le moment.</div>
      ) : (
        <div className="space-y-4">
          {alerts.map((alert) => (
            <div key={alert.id} className="p-4 bg-[#171717] rounded-lg">
              <h2 className="text-xl font-bold">{alert.title}</h2>
              <p>Statut : {alert.production_status}</p>
              <p>
                Dernière mise à jour :{" "}
                {new Date(alert.updated_at).toLocaleDateString()}
              </p>
            </div>
          ))}
        </div>
      )}
    </DashboardLayout>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/stats/page.tsx
"use client";

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/DashboardLayout";

interface Stats {
  toDo: number;
  inProgress: number;
  readyToPublish: number;
  finished: number;
}

export default function StatsPage() {
  const [stats, setStats] = useState<Stats>({
    toDo: 0,
    inProgress: 0,
    readyToPublish: 0,
    finished: 0,
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch("/api/stats");
        if (!response.ok) {
          throw new Error("Erreur lors de la récupération des statistiques");
        }
        const data = (await response.json()) as Stats;
        setStats(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement des statistiques", err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Impossible de charger les statistiques");
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchStats();
  }, []);

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">
          Vue d&apos;ensemble de la production
        </h1>
      </header>

      {isLoading ? (
        <div>Chargement...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <div className="grid gap-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="p-4 bg-[#171717] rounded-lg text-center">
              <p className="text-3xl font-bold">{stats.toDo}</p>
              <p>À monter</p>
            </div>
            <div className="p-4 bg-[#171717] rounded-lg text-center">
              <p className="text-3xl font-bold">{stats.inProgress}</p>
              <p>En cours</p>
            </div>
            <div className="p-4 bg-[#171717] rounded-lg text-center">
              <p className="text-3xl font-bold">{stats.readyToPublish}</p>
              <p>Prêt à publier</p>
            </div>
            <div className="p-4 bg-[#171717] rounded-lg text-center">
              <p className="text-3xl font-bold">{stats.finished}</p>
              <p>Terminé</p>
            </div>
          </div>
          {/* Vous pouvez ajouter ici d'autres visualisations (graphique, etc.) */}
        </div>
      )}
    </DashboardLayout>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/priorities/page.tsx
"use client";

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/DashboardLayout";
import { useRouter } from "next/navigation";

interface VideoPriority {
  id: number;
  title: string;
  production_status: string;
  updated_at: string;
  priority: number;
}

export default function PrioritiesPage() {
  const [videos, setVideos] = useState<VideoPriority[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchPriorities = async () => {
      try {
        const response = await fetch("/api/priorities");
        if (!response.ok) {
          throw new Error("Erreur lors de la récupération des priorités");
        }
        const data = (await response.json()) as VideoPriority[];
        setVideos(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement des priorités", err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Impossible de charger les priorités");
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchPriorities();
  }, []);

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">Priorisation et planification</h1>
      </header>

      {isLoading ? (
        <div>Chargement...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : videos.length === 0 ? (
        <div>Aucune vidéo prioritaire à afficher.</div>
      ) : (
        <div className="space-y-4">
          {videos.map((video) => (
            <div
              key={video.id}
              className="p-4 bg-[#171717] rounded-lg cursor-pointer hover:bg-[#212121] transition-colors"
              onClick={() => router.push(`/dashboard/videos/${video.id}`)}
            >
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-bold">{video.title}</h2>
                <span className="px-3 py-1 rounded-full bg-red-600 text-white text-sm">
                  Priorité: {video.priority}
                </span>
              </div>
              <p>Statut: {video.production_status}</p>
              <p>
                Dernière mise à jour: {new Date(video.updated_at).toLocaleDateString()}
              </p>
            </div>
          ))}
        </div>
      )}
    </DashboardLayout>
  );
}


===== page.tsx =====
Chemin : ./src/app/dashboard/performance/page.tsx
"use client";

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/DashboardLayout";

interface PerformanceStats {
  avgProductionTime: string;
  monthlyCounts: Record<string, number>;
  totalVideos: number;
}

export default function PerformancePage() {
  const [stats, setStats] = useState<PerformanceStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchPerformance = async () => {
      try {
        const response = await fetch("/api/performance");
        if (!response.ok) {
          throw new Error("Erreur lors de la récupération des statistiques de performance");
        }
        const data = (await response.json()) as PerformanceStats;
        setStats(data);
      } catch (err: unknown) {
        console.error("Erreur lors du chargement des statistiques de performance", err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Une erreur inconnue est survenue");
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchPerformance();
  }, []);

  return (
    <DashboardLayout>
      <header className="mb-6">
        <h1 className="text-2xl md:text-3xl font-semibold">
          Suivi de performance et Reporting
        </h1>
      </header>

      {isLoading ? (
        <div>Chargement...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : stats ? (
        <div className="space-y-6">
          {/* Temps moyen de production */}
          <div className="p-4 bg-[#171717] rounded-lg">
            <h2 className="text-xl font-bold">Temps moyen de production</h2>
            <p className="text-3xl">{stats.avgProductionTime} jours</p>
          </div>
          {/* Vidéos terminées par mois */}
          <div className="p-4 bg-[#171717] rounded-lg">
            <h2 className="text-xl font-bold">Vidéos terminées par mois</h2>
            <ul>
              {Object.entries(stats.monthlyCounts).map(([month, count]) => (
                <li key={month}>
                  {month}: {count} vidéo{count > 1 ? "s" : ""}
                </li>
              ))}
            </ul>
          </div>
          {/* Total des vidéos terminées */}
          <div className="p-4 bg-[#171717] rounded-lg">
            <h2 className="text-xl font-bold">Total des vidéos terminées</h2>
            <p className="text-3xl">{stats.totalVideos}</p>
          </div>
        </div>
      ) : null}
    </DashboardLayout>
  );
}


===== video.ts =====
Chemin : ./src/types/video.ts
export interface Video {
  id: number;
  title: string;
  status: 'pending' | 'finished' | 'ready_to_publish';
  created_at: string;
  updated_at: string;
  category_id: number;
  description?: string;
  video_url?: string;
  thumbnail_url?: string;
  instructions_miniature: string;
  rush_link: string;
  video_link: string;
  miniature_link: string;
  production_status: Status;
  identifier?: number;
  fullIdentifier?: string;
}

export const VIDEO_STATUS = {
  TO_DO: 'À monter',
  IN_PROGRESS: 'En cours',
  READY_TO_PUBLISH: 'Prêt à publier',
  FINISHED: 'Terminé'
} as const;

export type Status = typeof VIDEO_STATUS[keyof typeof VIDEO_STATUS];

export interface StatusStep {
  value: Status;
  label: string;
  description: string;
}


===== next-auth.types.d.ts =====
Chemin : ./types/next-auth.types.d.ts
import NextAuth, { DefaultSession, DefaultUser } from "next-auth";
import "next-auth/jwt";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      role?: string | null;
    } & DefaultSession["user"];
  }
  interface User extends DefaultUser {
    id: string;
    role?: string | null;
  }
  interface AdapterUser extends User {}
}

declare module "next-auth/jwt" {
  interface JWT {
    id?: string;
    role?: string | null;
    name?: string;
  }
}


